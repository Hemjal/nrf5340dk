
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 0f 00 20 39 19 00 00 a5 55 00 00 f1 18 00 00     ... 9....U......
  10:	f1 18 00 00 f1 18 00 00 f1 18 00 00 f1 18 00 00     ................
	...
  2c:	ed 15 00 00 f1 18 00 00 00 00 00 00 91 15 00 00     ................
  3c:	f1 18 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
  50:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
  60:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
  70:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
  80:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
  90:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
  a0:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
  b0:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
  c0:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
  d0:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
  e0:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
  f0:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
 100:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
 110:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
 120:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
 130:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
 140:	7d 16 00 00 7d 16 00 00 7d 16 00 00 7d 16 00 00     }...}...}...}...
 150:	7d 16 00 00                                         }...

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     18c:	4607      	mov	r7, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e09      	ldr	r6, [sp, #36]	; 0x24
     194:	4615      	mov	r5, r2
     196:	463c      	mov	r4, r7
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c5 	bne.w	32a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xaa>
     1a0:	4282      	cmp	r2, r0
     1a2:	fab2 f782 	clz	r7, r2
     1a6:	d946      	bls.n	236 <CONFIG_SRAM_SIZE+0x76>
     1a8:	b14f      	cbz	r7, 1be <__udivmoddi4+0x36>
     1aa:	f1c7 0e20 	rsb	lr, r7, #32
     1ae:	fa00 f307 	lsl.w	r3, r0, r7
     1b2:	40bd      	lsls	r5, r7
     1b4:	fa24 fe0e 	lsr.w	lr, r4, lr
     1b8:	40bc      	lsls	r4, r7
     1ba:	ea4e 0c03 	orr.w	ip, lr, r3
     1be:	ea4f 4815 	mov.w	r8, r5, lsr #16
     1c2:	fa1f fe85 	uxth.w	lr, r5
     1c6:	0c22      	lsrs	r2, r4, #16
     1c8:	fbbc f9f8 	udiv	r9, ip, r8
     1cc:	fb08 c319 	mls	r3, r8, r9, ip
     1d0:	fb09 fa0e 	mul.w	sl, r9, lr
     1d4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     1d8:	459a      	cmp	sl, r3
     1da:	d928      	bls.n	22e <CONFIG_SRAM_SIZE+0x6e>
     1dc:	18eb      	adds	r3, r5, r3
     1de:	f109 30ff 	add.w	r0, r9, #4294967295
     1e2:	d204      	bcs.n	1ee <CONFIG_SRAM_SIZE+0x2e>
     1e4:	459a      	cmp	sl, r3
     1e6:	d902      	bls.n	1ee <CONFIG_SRAM_SIZE+0x2e>
     1e8:	f1a9 0002 	sub.w	r0, r9, #2
     1ec:	442b      	add	r3, r5
     1ee:	eba3 030a 	sub.w	r3, r3, sl
     1f2:	b2a4      	uxth	r4, r4
     1f4:	fbb3 f2f8 	udiv	r2, r3, r8
     1f8:	fb08 3312 	mls	r3, r8, r2, r3
     1fc:	fb02 fe0e 	mul.w	lr, r2, lr
     200:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     204:	45a6      	cmp	lr, r4
     206:	d914      	bls.n	232 <CONFIG_SRAM_SIZE+0x72>
     208:	192c      	adds	r4, r5, r4
     20a:	f102 33ff 	add.w	r3, r2, #4294967295
     20e:	d203      	bcs.n	218 <CONFIG_SRAM_SIZE+0x58>
     210:	45a6      	cmp	lr, r4
     212:	d901      	bls.n	218 <CONFIG_SRAM_SIZE+0x58>
     214:	1e93      	subs	r3, r2, #2
     216:	442c      	add	r4, r5
     218:	eba4 040e 	sub.w	r4, r4, lr
     21c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     220:	b11e      	cbz	r6, 22a <CONFIG_SRAM_SIZE+0x6a>
     222:	40fc      	lsrs	r4, r7
     224:	2300      	movs	r3, #0
     226:	6034      	str	r4, [r6, #0]
     228:	6073      	str	r3, [r6, #4]
     22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     22e:	4648      	mov	r0, r9
     230:	e7dd      	b.n	1ee <CONFIG_SRAM_SIZE+0x2e>
     232:	4613      	mov	r3, r2
     234:	e7f0      	b.n	218 <CONFIG_SRAM_SIZE+0x58>
     236:	b902      	cbnz	r2, 23a <CONFIG_SRAM_SIZE+0x7a>
     238:	deff      	udf	#255	; 0xff
     23a:	bb87      	cbnz	r7, 29e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1e>
     23c:	1a83      	subs	r3, r0, r2
     23e:	2101      	movs	r1, #1
     240:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     244:	b2aa      	uxth	r2, r5
     246:	0c20      	lsrs	r0, r4, #16
     248:	fbb3 fcfe 	udiv	ip, r3, lr
     24c:	fb0e 331c 	mls	r3, lr, ip, r3
     250:	fb0c f802 	mul.w	r8, ip, r2
     254:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     258:	4598      	cmp	r8, r3
     25a:	d962      	bls.n	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     25c:	18eb      	adds	r3, r5, r3
     25e:	f10c 30ff 	add.w	r0, ip, #4294967295
     262:	d204      	bcs.n	26e <CONFIG_SRAM_SIZE+0xae>
     264:	4598      	cmp	r8, r3
     266:	d902      	bls.n	26e <CONFIG_SRAM_SIZE+0xae>
     268:	f1ac 0002 	sub.w	r0, ip, #2
     26c:	442b      	add	r3, r5
     26e:	eba3 0308 	sub.w	r3, r3, r8
     272:	b2a4      	uxth	r4, r4
     274:	fbb3 fcfe 	udiv	ip, r3, lr
     278:	fb0e 331c 	mls	r3, lr, ip, r3
     27c:	fb0c f202 	mul.w	r2, ip, r2
     280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     284:	42a2      	cmp	r2, r4
     286:	d94e      	bls.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>
     288:	192c      	adds	r4, r5, r4
     28a:	f10c 33ff 	add.w	r3, ip, #4294967295
     28e:	d204      	bcs.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     290:	42a2      	cmp	r2, r4
     292:	d902      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     294:	f1ac 0302 	sub.w	r3, ip, #2
     298:	442c      	add	r4, r5
     29a:	1aa4      	subs	r4, r4, r2
     29c:	e7be      	b.n	21c <CONFIG_SRAM_SIZE+0x5c>
     29e:	f1c7 0c20 	rsb	ip, r7, #32
     2a2:	40bd      	lsls	r5, r7
     2a4:	fa00 f307 	lsl.w	r3, r0, r7
     2a8:	fa20 f80c 	lsr.w	r8, r0, ip
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	fa24 fc0c 	lsr.w	ip, r4, ip
     2b4:	40bc      	lsls	r4, r7
     2b6:	ea4c 0203 	orr.w	r2, ip, r3
     2ba:	b2ab      	uxth	r3, r5
     2bc:	fbb8 fcfe 	udiv	ip, r8, lr
     2c0:	0c11      	lsrs	r1, r2, #16
     2c2:	fb0e 801c 	mls	r0, lr, ip, r8
     2c6:	fb0c f903 	mul.w	r9, ip, r3
     2ca:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     2ce:	4581      	cmp	r9, r0
     2d0:	d923      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     2d2:	1828      	adds	r0, r5, r0
     2d4:	f10c 31ff 	add.w	r1, ip, #4294967295
     2d8:	d204      	bcs.n	2e4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x64>
     2da:	4581      	cmp	r9, r0
     2dc:	d902      	bls.n	2e4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x64>
     2de:	f1ac 0102 	sub.w	r1, ip, #2
     2e2:	4428      	add	r0, r5
     2e4:	eba0 0009 	sub.w	r0, r0, r9
     2e8:	b292      	uxth	r2, r2
     2ea:	fbb0 fcfe 	udiv	ip, r0, lr
     2ee:	fb0e 001c 	mls	r0, lr, ip, r0
     2f2:	fb0c f803 	mul.w	r8, ip, r3
     2f6:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2fa:	4598      	cmp	r8, r3
     2fc:	d90f      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     2fe:	18eb      	adds	r3, r5, r3
     300:	f10c 32ff 	add.w	r2, ip, #4294967295
     304:	d204      	bcs.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     306:	4598      	cmp	r8, r3
     308:	d902      	bls.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     30a:	f1ac 0202 	sub.w	r2, ip, #2
     30e:	442b      	add	r3, r5
     310:	eba3 0308 	sub.w	r3, r3, r8
     314:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     318:	e792      	b.n	240 <CONFIG_SRAM_SIZE+0x80>
     31a:	4661      	mov	r1, ip
     31c:	e7e2      	b.n	2e4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x64>
     31e:	4662      	mov	r2, ip
     320:	e7f6      	b.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     322:	4660      	mov	r0, ip
     324:	e7a3      	b.n	26e <CONFIG_SRAM_SIZE+0xae>
     326:	4663      	mov	r3, ip
     328:	e7b7      	b.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     32a:	4283      	cmp	r3, r0
     32c:	d905      	bls.n	33a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xba>
     32e:	b10e      	cbz	r6, 334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     330:	e9c6 7000 	strd	r7, r0, [r6]
     334:	2100      	movs	r1, #0
     336:	4608      	mov	r0, r1
     338:	e777      	b.n	22a <CONFIG_SRAM_SIZE+0x6a>
     33a:	fab3 f183 	clz	r1, r3
     33e:	b981      	cbnz	r1, 362 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xe2>
     340:	4283      	cmp	r3, r0
     342:	d301      	bcc.n	348 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc8>
     344:	42ba      	cmp	r2, r7
     346:	d80a      	bhi.n	35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
     348:	1abc      	subs	r4, r7, r2
     34a:	eb60 0303 	sbc.w	r3, r0, r3
     34e:	2001      	movs	r0, #1
     350:	469c      	mov	ip, r3
     352:	2e00      	cmp	r6, #0
     354:	d067      	beq.n	426 <CONFIG_FLASH_SIZE+0x26>
     356:	e9c6 4c00 	strd	r4, ip, [r6]
     35a:	2100      	movs	r1, #0
     35c:	e765      	b.n	22a <CONFIG_SRAM_SIZE+0x6a>
     35e:	4608      	mov	r0, r1
     360:	e7f7      	b.n	352 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd2>
     362:	f1c1 0c20 	rsb	ip, r1, #32
     366:	408b      	lsls	r3, r1
     368:	fa02 f501 	lsl.w	r5, r2, r1
     36c:	fa22 f40c 	lsr.w	r4, r2, ip
     370:	fa20 fb0c 	lsr.w	fp, r0, ip
     374:	fa27 f20c 	lsr.w	r2, r7, ip
     378:	408f      	lsls	r7, r1
     37a:	431c      	orrs	r4, r3
     37c:	fa00 f301 	lsl.w	r3, r0, r1
     380:	ea4f 4914 	mov.w	r9, r4, lsr #16
     384:	4313      	orrs	r3, r2
     386:	fa1f fe84 	uxth.w	lr, r4
     38a:	0c1a      	lsrs	r2, r3, #16
     38c:	fbbb f8f9 	udiv	r8, fp, r9
     390:	fb09 bb18 	mls	fp, r9, r8, fp
     394:	fb08 fa0e 	mul.w	sl, r8, lr
     398:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     39c:	4592      	cmp	sl, r2
     39e:	d93e      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     3a0:	18a2      	adds	r2, r4, r2
     3a2:	f108 30ff 	add.w	r0, r8, #4294967295
     3a6:	d204      	bcs.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     3a8:	4592      	cmp	sl, r2
     3aa:	d902      	bls.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     3ac:	f1a8 0002 	sub.w	r0, r8, #2
     3b0:	4422      	add	r2, r4
     3b2:	eba2 020a 	sub.w	r2, r2, sl
     3b6:	b29b      	uxth	r3, r3
     3b8:	fbb2 f8f9 	udiv	r8, r2, r9
     3bc:	fb09 2218 	mls	r2, r9, r8, r2
     3c0:	fb08 fe0e 	mul.w	lr, r8, lr
     3c4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     3c8:	4596      	cmp	lr, r2
     3ca:	d92a      	bls.n	422 <CONFIG_FLASH_SIZE+0x22>
     3cc:	18a2      	adds	r2, r4, r2
     3ce:	f108 33ff 	add.w	r3, r8, #4294967295
     3d2:	d204      	bcs.n	3de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x15e>
     3d4:	4596      	cmp	lr, r2
     3d6:	d902      	bls.n	3de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x15e>
     3d8:	f1a8 0302 	sub.w	r3, r8, #2
     3dc:	4422      	add	r2, r4
     3de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3e2:	eba2 020e 	sub.w	r2, r2, lr
     3e6:	fba0 9305 	umull	r9, r3, r0, r5
     3ea:	429a      	cmp	r2, r3
     3ec:	46ce      	mov	lr, r9
     3ee:	4698      	mov	r8, r3
     3f0:	d302      	bcc.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     3f2:	d106      	bne.n	402 <CONFIG_FLASH_SIZE+0x2>
     3f4:	454f      	cmp	r7, r9
     3f6:	d204      	bcs.n	402 <CONFIG_FLASH_SIZE+0x2>
     3f8:	3801      	subs	r0, #1
     3fa:	ebb9 0e05 	subs.w	lr, r9, r5
     3fe:	eb63 0804 	sbc.w	r8, r3, r4
     402:	b186      	cbz	r6, 426 <CONFIG_FLASH_SIZE+0x26>
     404:	ebb7 030e 	subs.w	r3, r7, lr
     408:	eb62 0708 	sbc.w	r7, r2, r8
     40c:	fa07 fc0c 	lsl.w	ip, r7, ip
     410:	40cb      	lsrs	r3, r1
     412:	40cf      	lsrs	r7, r1
     414:	ea4c 0303 	orr.w	r3, ip, r3
     418:	e9c6 3700 	strd	r3, r7, [r6]
     41c:	e79d      	b.n	35a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xda>
     41e:	4640      	mov	r0, r8
     420:	e7c7      	b.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     422:	4643      	mov	r3, r8
     424:	e7db      	b.n	3de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x15e>
     426:	4631      	mov	r1, r6
     428:	e6ff      	b.n	22a <CONFIG_SRAM_SIZE+0x6a>
	...

0000042c <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);

void main(void)
{
     42c:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     42e:	4810      	ldr	r0, [pc, #64]	; (470 <main+0x44>)
     430:	f005 ff0f 	bl	6252 <z_device_is_ready>
	int ret;

	if (!device_is_ready(led.port)) {
     434:	b900      	cbnz	r0, 438 <main+0xc>
		if (ret < 0) {
			return;
		}
		k_msleep(SLEEP_TIME_MS);
	}
}
     436:	bd08      	pop	{r3, pc}

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
     438:	480d      	ldr	r0, [pc, #52]	; (470 <main+0x44>)
     43a:	6881      	ldr	r1, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     43c:	6902      	ldr	r2, [r0, #16]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     43e:	6813      	ldr	r3, [r2, #0]
     440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     444:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     446:	680b      	ldr	r3, [r1, #0]
     448:	4a0a      	ldr	r2, [pc, #40]	; (474 <main+0x48>)
     44a:	211c      	movs	r1, #28
     44c:	4798      	blx	r3
	if (ret < 0) {
     44e:	2800      	cmp	r0, #0
     450:	da05      	bge.n	45e <main+0x32>
     452:	e7f0      	b.n	436 <main+0xa>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     454:	f640 40cd 	movw	r0, #3277	; 0xccd
     458:	2100      	movs	r1, #0
     45a:	f004 fb0d 	bl	4a78 <z_impl_k_sleep>
				    gpio_port_pins_t pins);

static inline int z_impl_gpio_port_toggle_bits(const struct device *port,
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
     45e:	4804      	ldr	r0, [pc, #16]	; (470 <main+0x44>)
     460:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
     462:	695b      	ldr	r3, [r3, #20]
     464:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     468:	4798      	blx	r3
		if (ret < 0) {
     46a:	2800      	cmp	r0, #0
     46c:	daf2      	bge.n	454 <main+0x28>
     46e:	e7e2      	b.n	436 <main+0xa>
     470:	0000676c 	.word	0x0000676c
     474:	00060001 	.word	0x00060001

00000478 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     478:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     47a:	680b      	ldr	r3, [r1, #0]
     47c:	3301      	adds	r3, #1
     47e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     480:	4b01      	ldr	r3, [pc, #4]	; (488 <char_out+0x10>)
     482:	681b      	ldr	r3, [r3, #0]
     484:	4798      	blx	r3
}
     486:	bd08      	pop	{r3, pc}
     488:	20000000 	.word	0x20000000

0000048c <__printk_hook_install>:
	_char_out = fn;
     48c:	4b01      	ldr	r3, [pc, #4]	; (494 <__printk_hook_install+0x8>)
     48e:	6018      	str	r0, [r3, #0]
}
     490:	4770      	bx	lr
     492:	bf00      	nop
     494:	20000000 	.word	0x20000000

00000498 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     498:	b500      	push	{lr}
     49a:	b083      	sub	sp, #12
     49c:	4602      	mov	r2, r0
     49e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     4a0:	2100      	movs	r1, #0
     4a2:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     4a4:	a901      	add	r1, sp, #4
     4a6:	4803      	ldr	r0, [pc, #12]	; (4b4 <vprintk+0x1c>)
     4a8:	f000 fa3c 	bl	924 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     4ac:	b003      	add	sp, #12
     4ae:	f85d fb04 	ldr.w	pc, [sp], #4
     4b2:	bf00      	nop
     4b4:	00000479 	.word	0x00000479

000004b8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4bc:	b083      	sub	sp, #12
     4be:	4604      	mov	r4, r0
     4c0:	4608      	mov	r0, r1
     4c2:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4c4:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4c6:	f013 0f08 	tst.w	r3, #8
     4ca:	d105      	bne.n	4d8 <process_event+0x20>
     4cc:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     4d0:	2300      	movs	r3, #0
     4d2:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     4d4:	9301      	str	r3, [sp, #4]
}
     4d6:	e069      	b.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
		if (evt == EVT_COMPLETE) {
     4d8:	2901      	cmp	r1, #1
     4da:	d009      	beq.n	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     4dc:	f043 0320 	orr.w	r3, r3, #32
     4e0:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4e2:	f385 8811 	msr	BASEPRI, r5
     4e6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4ea:	b003      	add	sp, #12
     4ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4f0:	f043 0310 	orr.w	r3, r3, #16
     4f4:	8323      	strh	r3, [r4, #24]
     4f6:	e7f4      	b.n	4e2 <process_event+0x2a>
			evt = process_recheck(mgr);
     4f8:	4620      	mov	r0, r4
     4fa:	f004 fe6a 	bl	51d2 <process_recheck>
     4fe:	e057      	b.n	5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>
			res = mgr->last_res;
     500:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     504:	464a      	mov	r2, r9
     506:	4669      	mov	r1, sp
     508:	4620      	mov	r0, r4
     50a:	f004 fe7b 	bl	5204 <process_complete>
		onoff_transition_fn transit = NULL;
     50e:	2700      	movs	r7, #0
     510:	e05a      	b.n	5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>
			transit = mgr->transitions->start;
     512:	6923      	ldr	r3, [r4, #16]
     514:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     516:	2106      	movs	r1, #6
     518:	4620      	mov	r0, r4
     51a:	f004 fe33 	bl	5184 <set_state>
		res = 0;
     51e:	f04f 0900 	mov.w	r9, #0
     522:	e051      	b.n	5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>
			transit = mgr->transitions->stop;
     524:	6923      	ldr	r3, [r4, #16]
     526:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     528:	2104      	movs	r1, #4
     52a:	4620      	mov	r0, r4
     52c:	f004 fe2a 	bl	5184 <set_state>
		res = 0;
     530:	f04f 0900 	mov.w	r9, #0
     534:	e048      	b.n	5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>
			transit = mgr->transitions->reset;
     536:	6923      	ldr	r3, [r4, #16]
     538:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     53a:	2105      	movs	r1, #5
     53c:	4620      	mov	r0, r4
     53e:	f004 fe21 	bl	5184 <set_state>
		res = 0;
     542:	f04f 0900 	mov.w	r9, #0
     546:	e03f      	b.n	5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>
				   && !sys_slist_is_empty(&mgr->monitors);
     548:	2200      	movs	r2, #0
     54a:	e046      	b.n	5da <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf2>
     54c:	2200      	movs	r2, #0
     54e:	e044      	b.n	5da <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     550:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     554:	8323      	strh	r3, [r4, #24]
     556:	f385 8811 	msr	BASEPRI, r5
     55a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     55e:	2900      	cmp	r1, #0
     560:	d144      	bne.n	5ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x104>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     562:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     564:	b12b      	cbz	r3, 572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
				notify_all(mgr, &clients, state, res);
     566:	464b      	mov	r3, r9
     568:	4642      	mov	r2, r8
     56a:	4669      	mov	r1, sp
     56c:	4620      	mov	r0, r4
     56e:	f004 fec0 	bl	52f2 <notify_all>
			if (transit != NULL) {
     572:	b117      	cbz	r7, 57a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x92>
				transit(mgr, transition_complete);
     574:	4925      	ldr	r1, [pc, #148]	; (60c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x124>)
     576:	4620      	mov	r0, r4
     578:	47b8      	blx	r7
	__asm__ volatile(
     57a:	f04f 0320 	mov.w	r3, #32
     57e:	f3ef 8511 	mrs	r5, BASEPRI
     582:	f383 8812 	msr	BASEPRI_MAX, r3
     586:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     58a:	8b23      	ldrh	r3, [r4, #24]
     58c:	f023 0308 	bic.w	r3, r3, #8
     590:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     592:	8b23      	ldrh	r3, [r4, #24]
     594:	f013 0f10 	tst.w	r3, #16
     598:	d02e      	beq.n	5f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x110>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     59a:	f023 0310 	bic.w	r3, r3, #16
     59e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     5a0:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     5a2:	8b26      	ldrh	r6, [r4, #24]
     5a4:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     5a8:	2800      	cmp	r0, #0
     5aa:	d09a      	beq.n	4e2 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     5ac:	2802      	cmp	r0, #2
     5ae:	d0a3      	beq.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
		if (evt == EVT_NOP) {
     5b0:	2800      	cmp	r0, #0
     5b2:	d096      	beq.n	4e2 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     5b4:	2801      	cmp	r0, #1
     5b6:	d0a3      	beq.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
		} else if (evt == EVT_START) {
     5b8:	2803      	cmp	r0, #3
     5ba:	d0aa      	beq.n	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
		} else if (evt == EVT_STOP) {
     5bc:	2804      	cmp	r0, #4
     5be:	d0b1      	beq.n	524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>
		} else if (evt == EVT_RESET) {
     5c0:	2805      	cmp	r0, #5
     5c2:	d0b8      	beq.n	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
		onoff_transition_fn transit = NULL;
     5c4:	2700      	movs	r7, #0
		res = 0;
     5c6:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5c8:	8b23      	ldrh	r3, [r4, #24]
     5ca:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5ce:	45b0      	cmp	r8, r6
     5d0:	d0ba      	beq.n	548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>
     5d2:	68a2      	ldr	r2, [r4, #8]
     5d4:	2a00      	cmp	r2, #0
     5d6:	d0b9      	beq.n	54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>
     5d8:	2201      	movs	r2, #1
		if (do_monitors
     5da:	4611      	mov	r1, r2
     5dc:	2a00      	cmp	r2, #0
     5de:	d1b7      	bne.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     5e0:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     5e2:	2a00      	cmp	r2, #0
     5e4:	d1b4      	bne.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
		    || (transit != NULL)) {
     5e6:	2f00      	cmp	r7, #0
     5e8:	d1b2      	bne.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     5ea:	e7d2      	b.n	592 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xaa>
				notify_monitors(mgr, state, res);
     5ec:	464a      	mov	r2, r9
     5ee:	4641      	mov	r1, r8
     5f0:	4620      	mov	r0, r4
     5f2:	f004 fdcf 	bl	5194 <notify_monitors>
     5f6:	e7b4      	b.n	562 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7a>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     5f8:	f013 0f20 	tst.w	r3, #32
     5fc:	d004      	beq.n	608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     5fe:	f023 0320 	bic.w	r3, r3, #32
     602:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     604:	2002      	movs	r0, #2
     606:	e7cc      	b.n	5a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xba>
		evt = EVT_NOP;
     608:	2000      	movs	r0, #0
     60a:	e7ca      	b.n	5a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xba>
     60c:	00005321 	.word	0x00005321

00000610 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
     610:	b570      	push	{r4, r5, r6, lr}
     612:	b082      	sub	sp, #8
     614:	4604      	mov	r4, r0
	*conv = (struct conversion) {
     616:	2300      	movs	r3, #0
     618:	6003      	str	r3, [r0, #0]
     61a:	6043      	str	r3, [r0, #4]
     61c:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
     61e:	784b      	ldrb	r3, [r1, #1]
     620:	2b25      	cmp	r3, #37	; 0x25
     622:	d002      	beq.n	62a <extract_conversion+0x1a>
     624:	1c4e      	adds	r6, r1, #1
	bool loop = true;
     626:	2501      	movs	r5, #1
     628:	e01f      	b.n	66a <extract_conversion+0x5a>
		conv->specifier = *sp++;
     62a:	1c88      	adds	r0, r1, #2
     62c:	70e3      	strb	r3, [r4, #3]
		return sp;
     62e:	e145      	b.n	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
			conv->flag_dash = true;
     630:	7823      	ldrb	r3, [r4, #0]
     632:	f043 0304 	orr.w	r3, r3, #4
     636:	7023      	strb	r3, [r4, #0]
		if (loop) {
     638:	b1b5      	cbz	r5, 668 <extract_conversion+0x58>
			++sp;
     63a:	3601      	adds	r6, #1
     63c:	e014      	b.n	668 <extract_conversion+0x58>
			conv->flag_plus = true;
     63e:	7823      	ldrb	r3, [r4, #0]
     640:	f043 0308 	orr.w	r3, r3, #8
     644:	7023      	strb	r3, [r4, #0]
			break;
     646:	e7f7      	b.n	638 <extract_conversion+0x28>
			conv->flag_space = true;
     648:	7823      	ldrb	r3, [r4, #0]
     64a:	f043 0310 	orr.w	r3, r3, #16
     64e:	7023      	strb	r3, [r4, #0]
			break;
     650:	e7f2      	b.n	638 <extract_conversion+0x28>
			conv->flag_hash = true;
     652:	7823      	ldrb	r3, [r4, #0]
     654:	f043 0320 	orr.w	r3, r3, #32
     658:	7023      	strb	r3, [r4, #0]
			break;
     65a:	e7ed      	b.n	638 <extract_conversion+0x28>
			conv->flag_zero = true;
     65c:	7823      	ldrb	r3, [r4, #0]
     65e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     662:	7023      	strb	r3, [r4, #0]
			break;
     664:	e7e8      	b.n	638 <extract_conversion+0x28>
		switch (*sp) {
     666:	2500      	movs	r5, #0
	} while (loop);
     668:	b345      	cbz	r5, 6bc <extract_conversion+0xac>
		switch (*sp) {
     66a:	7833      	ldrb	r3, [r6, #0]
     66c:	3b20      	subs	r3, #32
     66e:	2b10      	cmp	r3, #16
     670:	d8f9      	bhi.n	666 <extract_conversion+0x56>
     672:	a201      	add	r2, pc, #4	; (adr r2, 678 <extract_conversion+0x68>)
     674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     678:	00000649 	.word	0x00000649
     67c:	00000667 	.word	0x00000667
     680:	00000667 	.word	0x00000667
     684:	00000653 	.word	0x00000653
     688:	00000667 	.word	0x00000667
     68c:	00000667 	.word	0x00000667
     690:	00000667 	.word	0x00000667
     694:	00000667 	.word	0x00000667
     698:	00000667 	.word	0x00000667
     69c:	00000667 	.word	0x00000667
     6a0:	00000667 	.word	0x00000667
     6a4:	0000063f 	.word	0x0000063f
     6a8:	00000667 	.word	0x00000667
     6ac:	00000631 	.word	0x00000631
     6b0:	00000667 	.word	0x00000667
     6b4:	00000667 	.word	0x00000667
     6b8:	0000065d 	.word	0x0000065d
	if (conv->flag_zero && conv->flag_dash) {
     6bc:	7823      	ldrb	r3, [r4, #0]
     6be:	f003 0344 	and.w	r3, r3, #68	; 0x44
     6c2:	2b44      	cmp	r3, #68	; 0x44
     6c4:	d05f      	beq.n	786 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
     6c6:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
     6c8:	7823      	ldrb	r3, [r4, #0]
     6ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     6ce:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
     6d0:	7833      	ldrb	r3, [r6, #0]
     6d2:	2b2a      	cmp	r3, #42	; 0x2a
     6d4:	d05c      	beq.n	790 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
     6d6:	a801      	add	r0, sp, #4
     6d8:	f004 feb3 	bl	5442 <extract_decimal>
	if (sp != wp) {
     6dc:	9b01      	ldr	r3, [sp, #4]
     6de:	429e      	cmp	r6, r3
     6e0:	d00f      	beq.n	702 <extract_conversion+0xf2>
		conv->width_present = true;
     6e2:	7823      	ldrb	r3, [r4, #0]
     6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     6e8:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
     6ea:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
     6ec:	b2db      	uxtb	r3, r3
     6ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     6f2:	2800      	cmp	r0, #0
     6f4:	db54      	blt.n	7a0 <extract_conversion+0x190>
     6f6:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     6f8:	4313      	orrs	r3, r2
     6fa:	7822      	ldrb	r2, [r4, #0]
     6fc:	f363 0241 	bfi	r2, r3, #1, #1
     700:	7022      	strb	r2, [r4, #0]
	return sp;
     702:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
     704:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
     706:	781b      	ldrb	r3, [r3, #0]
     708:	2b2e      	cmp	r3, #46	; 0x2e
     70a:	bf14      	ite	ne
     70c:	2300      	movne	r3, #0
     70e:	2301      	moveq	r3, #1
     710:	7862      	ldrb	r2, [r4, #1]
     712:	f363 0241 	bfi	r2, r3, #1, #1
     716:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
     718:	2b00      	cmp	r3, #0
     71a:	d043      	beq.n	7a4 <extract_conversion+0x194>
	++sp;
     71c:	9b01      	ldr	r3, [sp, #4]
     71e:	1c5a      	adds	r2, r3, #1
     720:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
     722:	785b      	ldrb	r3, [r3, #1]
     724:	2b2a      	cmp	r3, #42	; 0x2a
     726:	d03f      	beq.n	7a8 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
     728:	a801      	add	r0, sp, #4
     72a:	f004 fe8a 	bl	5442 <extract_decimal>
	conv->prec_value = prec;
     72e:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
     730:	7823      	ldrb	r3, [r4, #0]
     732:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     736:	2800      	cmp	r0, #0
     738:	db3e      	blt.n	7b8 <extract_conversion+0x1a8>
     73a:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     73c:	4313      	orrs	r3, r2
     73e:	7822      	ldrb	r2, [r4, #0]
     740:	f363 0241 	bfi	r2, r3, #1, #1
     744:	7022      	strb	r2, [r4, #0]
	return sp;
     746:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
     748:	7803      	ldrb	r3, [r0, #0]
     74a:	3b4c      	subs	r3, #76	; 0x4c
     74c:	2b2e      	cmp	r3, #46	; 0x2e
     74e:	f200 809d 	bhi.w	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     752:	e8df f003 	tbb	[pc, r3]
     756:	9b90      	.short	0x9b90
     758:	9b9b9b9b 	.word	0x9b9b9b9b
     75c:	9b9b9b9b 	.word	0x9b9b9b9b
     760:	9b9b9b9b 	.word	0x9b9b9b9b
     764:	9b9b9b9b 	.word	0x9b9b9b9b
     768:	9b9b9b9b 	.word	0x9b9b9b9b
     76c:	9b9b9b9b 	.word	0x9b9b9b9b
     770:	9b339b9b 	.word	0x9b339b9b
     774:	9b459b57 	.word	0x9b459b57
     778:	9b9b9b9b 	.word	0x9b9b9b9b
     77c:	9b899b9b 	.word	0x9b899b9b
     780:	9b9b9b9b 	.word	0x9b9b9b9b
     784:	82          	.byte	0x82
     785:	00          	.byte	0x00
		conv->flag_zero = false;
     786:	7823      	ldrb	r3, [r4, #0]
     788:	f36f 1386 	bfc	r3, #6, #1
     78c:	7023      	strb	r3, [r4, #0]
     78e:	e79a      	b.n	6c6 <extract_conversion+0xb6>
		conv->width_star = true;
     790:	7863      	ldrb	r3, [r4, #1]
     792:	f043 0301 	orr.w	r3, r3, #1
     796:	7063      	strb	r3, [r4, #1]
		return ++sp;
     798:	4633      	mov	r3, r6
     79a:	3301      	adds	r3, #1
     79c:	9301      	str	r3, [sp, #4]
     79e:	e7b1      	b.n	704 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
     7a0:	2201      	movs	r2, #1
     7a2:	e7a9      	b.n	6f8 <extract_conversion+0xe8>
		return sp;
     7a4:	9801      	ldr	r0, [sp, #4]
     7a6:	e7cf      	b.n	748 <extract_conversion+0x138>
		conv->prec_star = true;
     7a8:	7863      	ldrb	r3, [r4, #1]
     7aa:	f043 0304 	orr.w	r3, r3, #4
     7ae:	7063      	strb	r3, [r4, #1]
		return ++sp;
     7b0:	4610      	mov	r0, r2
     7b2:	3001      	adds	r0, #1
     7b4:	9001      	str	r0, [sp, #4]
     7b6:	e7c7      	b.n	748 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
     7b8:	2201      	movs	r2, #1
     7ba:	e7bf      	b.n	73c <extract_conversion+0x12c>
		if (*++sp == 'h') {
     7bc:	1c42      	adds	r2, r0, #1
     7be:	7843      	ldrb	r3, [r0, #1]
     7c0:	2b68      	cmp	r3, #104	; 0x68
     7c2:	d006      	beq.n	7d2 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
     7c4:	7863      	ldrb	r3, [r4, #1]
     7c6:	2102      	movs	r1, #2
     7c8:	f361 03c6 	bfi	r3, r1, #3, #4
     7cc:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
     7ce:	4610      	mov	r0, r2
     7d0:	e01e      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
			conv->length_mod = LENGTH_HH;
     7d2:	7863      	ldrb	r3, [r4, #1]
     7d4:	2201      	movs	r2, #1
     7d6:	f362 03c6 	bfi	r3, r2, #3, #4
     7da:	7063      	strb	r3, [r4, #1]
			++sp;
     7dc:	3002      	adds	r0, #2
     7de:	e017      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
		if (*++sp == 'l') {
     7e0:	1c42      	adds	r2, r0, #1
     7e2:	7843      	ldrb	r3, [r0, #1]
     7e4:	2b6c      	cmp	r3, #108	; 0x6c
     7e6:	d006      	beq.n	7f6 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
     7e8:	7863      	ldrb	r3, [r4, #1]
     7ea:	2103      	movs	r1, #3
     7ec:	f361 03c6 	bfi	r3, r1, #3, #4
     7f0:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
     7f2:	4610      	mov	r0, r2
     7f4:	e00c      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
			conv->length_mod = LENGTH_LL;
     7f6:	7863      	ldrb	r3, [r4, #1]
     7f8:	2204      	movs	r2, #4
     7fa:	f362 03c6 	bfi	r3, r2, #3, #4
     7fe:	7063      	strb	r3, [r4, #1]
			++sp;
     800:	3002      	adds	r0, #2
     802:	e005      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
		conv->length_mod = LENGTH_J;
     804:	7863      	ldrb	r3, [r4, #1]
     806:	2205      	movs	r2, #5
     808:	f362 03c6 	bfi	r3, r2, #3, #4
     80c:	7063      	strb	r3, [r4, #1]
		++sp;
     80e:	3001      	adds	r0, #1
	conv->specifier = *sp++;
     810:	f810 3b01 	ldrb.w	r3, [r0], #1
     814:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
     816:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     81a:	2a37      	cmp	r2, #55	; 0x37
     81c:	d87d      	bhi.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
     81e:	e8df f002 	tbb	[pc, r2]
     822:	7c5e      	.short	0x7c5e
     824:	5e5e7c7c 	.word	0x5e5e7c7c
     828:	7c7c7c5e 	.word	0x7c7c7c5e
     82c:	7c7c7c7c 	.word	0x7c7c7c7c
     830:	7c7c7c7c 	.word	0x7c7c7c7c
     834:	7c7c7c7c 	.word	0x7c7c7c7c
     838:	7c7c4f7c 	.word	0x7c7c4f7c
     83c:	7c7c7c7c 	.word	0x7c7c7c7c
     840:	7c5e7c7c 	.word	0x7c5e7c7c
     844:	5e5e3a4f 	.word	0x5e5e3a4f
     848:	7c3a7c5e 	.word	0x7c3a7c5e
     84c:	657c7c7c 	.word	0x657c7c7c
     850:	7c7c714f 	.word	0x7c7c714f
     854:	7c4f7c71 	.word	0x7c4f7c71
     858:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
     85a:	7863      	ldrb	r3, [r4, #1]
     85c:	2206      	movs	r2, #6
     85e:	f362 03c6 	bfi	r3, r2, #3, #4
     862:	7063      	strb	r3, [r4, #1]
		++sp;
     864:	3001      	adds	r0, #1
		break;
     866:	e7d3      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
		conv->length_mod = LENGTH_T;
     868:	7863      	ldrb	r3, [r4, #1]
     86a:	2207      	movs	r2, #7
     86c:	f362 03c6 	bfi	r3, r2, #3, #4
     870:	7063      	strb	r3, [r4, #1]
		++sp;
     872:	3001      	adds	r0, #1
		break;
     874:	e7cc      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
		conv->length_mod = LENGTH_UPPER_L;
     876:	7863      	ldrb	r3, [r4, #1]
     878:	2208      	movs	r2, #8
     87a:	f362 03c6 	bfi	r3, r2, #3, #4
     87e:	7063      	strb	r3, [r4, #1]
		++sp;
     880:	3001      	adds	r0, #1
		conv->unsupported = true;
     882:	7823      	ldrb	r3, [r4, #0]
     884:	f043 0302 	orr.w	r3, r3, #2
     888:	7023      	strb	r3, [r4, #0]
		break;
     88a:	e7c1      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
		conv->length_mod = LENGTH_NONE;
     88c:	7863      	ldrb	r3, [r4, #1]
     88e:	f36f 03c6 	bfc	r3, #3, #4
     892:	7063      	strb	r3, [r4, #1]
		break;
     894:	e7bc      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
		conv->specifier_cat = SPECIFIER_SINT;
     896:	78a2      	ldrb	r2, [r4, #2]
     898:	2101      	movs	r1, #1
     89a:	f361 0202 	bfi	r2, r1, #0, #3
     89e:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     8a0:	7862      	ldrb	r2, [r4, #1]
     8a2:	f002 0278 	and.w	r2, r2, #120	; 0x78
     8a6:	2a40      	cmp	r2, #64	; 0x40
     8a8:	d010      	beq.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
		if (conv->specifier == 'c') {
     8aa:	2b63      	cmp	r3, #99	; 0x63
     8ac:	d013      	beq.n	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
	conv->unsupported |= unsupported;
     8ae:	7823      	ldrb	r3, [r4, #0]
     8b0:	f3c3 0240 	ubfx	r2, r3, #1, #1
     8b4:	4315      	orrs	r5, r2
     8b6:	f365 0341 	bfi	r3, r5, #1, #1
     8ba:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
     8bc:	b002      	add	sp, #8
     8be:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
     8c0:	78a2      	ldrb	r2, [r4, #2]
     8c2:	2102      	movs	r1, #2
     8c4:	f361 0202 	bfi	r2, r1, #0, #3
     8c8:	70a2      	strb	r2, [r4, #2]
     8ca:	e7e9      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
			conv->invalid = true;
     8cc:	7821      	ldrb	r1, [r4, #0]
     8ce:	f041 0101 	orr.w	r1, r1, #1
     8d2:	7021      	strb	r1, [r4, #0]
     8d4:	e7e9      	b.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
			unsupported = (conv->length_mod != LENGTH_NONE);
     8d6:	1e15      	subs	r5, r2, #0
     8d8:	bf18      	it	ne
     8da:	2501      	movne	r5, #1
     8dc:	e7e7      	b.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
		conv->specifier_cat = SPECIFIER_FP;
     8de:	78a3      	ldrb	r3, [r4, #2]
     8e0:	2204      	movs	r2, #4
     8e2:	f362 0302 	bfi	r3, r2, #0, #3
     8e6:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
     8e8:	2501      	movs	r5, #1
			break;
     8ea:	e7e0      	b.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
		conv->specifier_cat = SPECIFIER_PTR;
     8ec:	78a3      	ldrb	r3, [r4, #2]
     8ee:	2203      	movs	r2, #3
     8f0:	f362 0302 	bfi	r3, r2, #0, #3
     8f4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     8f6:	7863      	ldrb	r3, [r4, #1]
     8f8:	f003 0378 	and.w	r3, r3, #120	; 0x78
     8fc:	2b40      	cmp	r3, #64	; 0x40
     8fe:	d1d6      	bne.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
			unsupported = true;
     900:	2501      	movs	r5, #1
     902:	e7d4      	b.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
		conv->specifier_cat = SPECIFIER_PTR;
     904:	78a3      	ldrb	r3, [r4, #2]
     906:	2203      	movs	r2, #3
     908:	f362 0302 	bfi	r3, r2, #0, #3
     90c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
     90e:	7863      	ldrb	r3, [r4, #1]
     910:	f013 0f78 	tst.w	r3, #120	; 0x78
     914:	d0cb      	beq.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
			unsupported = true;
     916:	2501      	movs	r5, #1
     918:	e7c9      	b.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
		conv->invalid = true;
     91a:	7823      	ldrb	r3, [r4, #0]
     91c:	f043 0301 	orr.w	r3, r3, #1
     920:	7023      	strb	r3, [r4, #0]
		break;
     922:	e7c4      	b.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>

00000924 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     928:	b091      	sub	sp, #68	; 0x44
     92a:	4606      	mov	r6, r0
     92c:	460d      	mov	r5, r1
     92e:	4691      	mov	r9, r2
     930:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     932:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     934:	f899 0000 	ldrb.w	r0, [r9]
     938:	2800      	cmp	r0, #0
     93a:	f000 82d5 	beq.w	ee8 <cbvprintf+0x5c4>
		if (*fp != '%') {
     93e:	2825      	cmp	r0, #37	; 0x25
     940:	d008      	beq.n	954 <cbvprintf+0x30>
			OUTC(*fp++);
     942:	f109 0901 	add.w	r9, r9, #1
     946:	4629      	mov	r1, r5
     948:	47b0      	blx	r6
     94a:	2800      	cmp	r0, #0
     94c:	f2c0 82cd 	blt.w	eea <cbvprintf+0x5c6>
     950:	3401      	adds	r4, #1
			continue;
     952:	e7ef      	b.n	934 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     954:	2300      	movs	r3, #0
     956:	9304      	str	r3, [sp, #16]
     958:	9305      	str	r3, [sp, #20]
     95a:	9306      	str	r3, [sp, #24]
     95c:	9307      	str	r3, [sp, #28]
     95e:	9308      	str	r3, [sp, #32]
     960:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     962:	4649      	mov	r1, r9
     964:	a806      	add	r0, sp, #24
     966:	f7ff fe53 	bl	610 <extract_conversion>
     96a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     96c:	f89d 3019 	ldrb.w	r3, [sp, #25]
     970:	f013 0f01 	tst.w	r3, #1
     974:	f000 8097 	beq.w	aa6 <cbvprintf+0x182>
			width = va_arg(ap, int);
     978:	9b03      	ldr	r3, [sp, #12]
     97a:	1d1a      	adds	r2, r3, #4
     97c:	9203      	str	r2, [sp, #12]
     97e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     980:	2f00      	cmp	r7, #0
     982:	f2c0 8088 	blt.w	a96 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     986:	f89d 3019 	ldrb.w	r3, [sp, #25]
     98a:	f013 0f04 	tst.w	r3, #4
     98e:	f000 809c 	beq.w	aca <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
     992:	9b03      	ldr	r3, [sp, #12]
     994:	1d1a      	adds	r2, r3, #4
     996:	9203      	str	r2, [sp, #12]
     998:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     99c:	f1ba 0f00 	cmp.w	sl, #0
     9a0:	f2c0 808a 	blt.w	ab8 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     9a4:	2300      	movs	r3, #0
     9a6:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     9a8:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     9aa:	f89d 301a 	ldrb.w	r3, [sp, #26]
     9ae:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     9b2:	f89d 1019 	ldrb.w	r1, [sp, #25]
     9b6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     9ba:	2b01      	cmp	r3, #1
     9bc:	f000 808e 	beq.w	adc <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     9c0:	2b02      	cmp	r3, #2
     9c2:	f000 80d3 	beq.w	b6c <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     9c6:	2b04      	cmp	r3, #4
     9c8:	f000 8124 	beq.w	c14 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     9cc:	2b03      	cmp	r3, #3
     9ce:	f000 813b 	beq.w	c48 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     9d2:	f89d 8018 	ldrb.w	r8, [sp, #24]
     9d6:	f018 0b03 	ands.w	fp, r8, #3
     9da:	f040 813b 	bne.w	c54 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     9de:	f89d 301b 	ldrb.w	r3, [sp, #27]
     9e2:	3b25      	subs	r3, #37	; 0x25
     9e4:	2b53      	cmp	r3, #83	; 0x53
     9e6:	f200 81e6 	bhi.w	db6 <cbvprintf+0x492>
     9ea:	e8df f013 	tbh	[pc, r3, lsl #1]
     9ee:	0140      	.short	0x0140
     9f0:	01e401e4 	.word	0x01e401e4
     9f4:	01e401e4 	.word	0x01e401e4
     9f8:	01e401e4 	.word	0x01e401e4
     9fc:	01e401e4 	.word	0x01e401e4
     a00:	01e401e4 	.word	0x01e401e4
     a04:	01e401e4 	.word	0x01e401e4
     a08:	01e401e4 	.word	0x01e401e4
     a0c:	01e401e4 	.word	0x01e401e4
     a10:	01e401e4 	.word	0x01e401e4
     a14:	01e401e4 	.word	0x01e401e4
     a18:	01e401e4 	.word	0x01e401e4
     a1c:	01e401e4 	.word	0x01e401e4
     a20:	01e401e4 	.word	0x01e401e4
     a24:	01e401e4 	.word	0x01e401e4
     a28:	01e401e4 	.word	0x01e401e4
     a2c:	01e401e4 	.word	0x01e401e4
     a30:	01e401e4 	.word	0x01e401e4
     a34:	01e401e4 	.word	0x01e401e4
     a38:	01e401e4 	.word	0x01e401e4
     a3c:	01e401e4 	.word	0x01e401e4
     a40:	01e401e4 	.word	0x01e401e4
     a44:	01e401e4 	.word	0x01e401e4
     a48:	01e401e4 	.word	0x01e401e4
     a4c:	01e401e4 	.word	0x01e401e4
     a50:	01e401e4 	.word	0x01e401e4
     a54:	01e40181 	.word	0x01e40181
     a58:	01e401e4 	.word	0x01e401e4
     a5c:	01e401e4 	.word	0x01e401e4
     a60:	01e401e4 	.word	0x01e401e4
     a64:	01e401e4 	.word	0x01e401e4
     a68:	015e01e4 	.word	0x015e01e4
     a6c:	01e40167 	.word	0x01e40167
     a70:	01e401e4 	.word	0x01e401e4
     a74:	016701e4 	.word	0x016701e4
     a78:	01e401e4 	.word	0x01e401e4
     a7c:	01e401e4 	.word	0x01e401e4
     a80:	018101be 	.word	0x018101be
     a84:	01e401a2 	.word	0x01e401a2
     a88:	014d01e4 	.word	0x014d01e4
     a8c:	018101e4 	.word	0x018101e4
     a90:	01e401e4 	.word	0x01e401e4
     a94:	0181      	.short	0x0181
				conv->flag_dash = true;
     a96:	f89d 3018 	ldrb.w	r3, [sp, #24]
     a9a:	f043 0304 	orr.w	r3, r3, #4
     a9e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     aa2:	427f      	negs	r7, r7
     aa4:	e76f      	b.n	986 <cbvprintf+0x62>
		} else if (conv->width_present) {
     aa6:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     aaa:	2b00      	cmp	r3, #0
     aac:	db02      	blt.n	ab4 <cbvprintf+0x190>
		int width = -1;
     aae:	f04f 37ff 	mov.w	r7, #4294967295
     ab2:	e768      	b.n	986 <cbvprintf+0x62>
			width = conv->width_value;
     ab4:	9f07      	ldr	r7, [sp, #28]
     ab6:	e766      	b.n	986 <cbvprintf+0x62>
				conv->prec_present = false;
     ab8:	f89d 3019 	ldrb.w	r3, [sp, #25]
     abc:	f36f 0341 	bfc	r3, #1, #1
     ac0:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     ac4:	f04f 3aff 	mov.w	sl, #4294967295
     ac8:	e76c      	b.n	9a4 <cbvprintf+0x80>
		} else if (conv->prec_present) {
     aca:	f013 0f02 	tst.w	r3, #2
     ace:	d002      	beq.n	ad6 <cbvprintf+0x1b2>
			precision = conv->prec_value;
     ad0:	f8dd a020 	ldr.w	sl, [sp, #32]
     ad4:	e766      	b.n	9a4 <cbvprintf+0x80>
		int precision = -1;
     ad6:	f04f 3aff 	mov.w	sl, #4294967295
     ada:	e763      	b.n	9a4 <cbvprintf+0x80>
			switch (length_mod) {
     adc:	1ecb      	subs	r3, r1, #3
     ade:	2b04      	cmp	r3, #4
     ae0:	d804      	bhi.n	aec <cbvprintf+0x1c8>
     ae2:	e8df f003 	tbb	[pc, r3]
     ae6:	1d0b      	.short	0x1d0b
     ae8:	3529      	.short	0x3529
     aea:	35          	.byte	0x35
     aeb:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     aec:	9b03      	ldr	r3, [sp, #12]
     aee:	1d1a      	adds	r2, r3, #4
     af0:	9203      	str	r2, [sp, #12]
     af2:	681b      	ldr	r3, [r3, #0]
     af4:	17da      	asrs	r2, r3, #31
     af6:	9304      	str	r3, [sp, #16]
     af8:	9205      	str	r2, [sp, #20]
				break;
     afa:	e006      	b.n	b0a <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
     afc:	9b03      	ldr	r3, [sp, #12]
     afe:	1d1a      	adds	r2, r3, #4
     b00:	9203      	str	r2, [sp, #12]
     b02:	681b      	ldr	r3, [r3, #0]
     b04:	17da      	asrs	r2, r3, #31
     b06:	9304      	str	r3, [sp, #16]
     b08:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     b0a:	2901      	cmp	r1, #1
     b0c:	d028      	beq.n	b60 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
     b0e:	2902      	cmp	r1, #2
     b10:	f47f af5f 	bne.w	9d2 <cbvprintf+0xae>
				value->sint = (short)value->sint;
     b14:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     b18:	17da      	asrs	r2, r3, #31
     b1a:	9304      	str	r3, [sp, #16]
     b1c:	9205      	str	r2, [sp, #20]
     b1e:	e758      	b.n	9d2 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
     b20:	9b03      	ldr	r3, [sp, #12]
     b22:	3307      	adds	r3, #7
     b24:	f023 0307 	bic.w	r3, r3, #7
     b28:	f103 0208 	add.w	r2, r3, #8
     b2c:	9203      	str	r2, [sp, #12]
     b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     b32:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     b36:	e7e8      	b.n	b0a <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
     b38:	9b03      	ldr	r3, [sp, #12]
     b3a:	3307      	adds	r3, #7
     b3c:	f023 0307 	bic.w	r3, r3, #7
     b40:	f103 0208 	add.w	r2, r3, #8
     b44:	9203      	str	r2, [sp, #12]
     b46:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     b4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     b4e:	e7dc      	b.n	b0a <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     b50:	9b03      	ldr	r3, [sp, #12]
     b52:	1d1a      	adds	r2, r3, #4
     b54:	9203      	str	r2, [sp, #12]
     b56:	681b      	ldr	r3, [r3, #0]
     b58:	17da      	asrs	r2, r3, #31
				value->sint =
     b5a:	9304      	str	r3, [sp, #16]
     b5c:	9205      	str	r2, [sp, #20]
				break;
     b5e:	e7d4      	b.n	b0a <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
     b60:	f89d 3010 	ldrb.w	r3, [sp, #16]
     b64:	9304      	str	r3, [sp, #16]
     b66:	2300      	movs	r3, #0
     b68:	9305      	str	r3, [sp, #20]
     b6a:	e732      	b.n	9d2 <cbvprintf+0xae>
			switch (length_mod) {
     b6c:	1ecb      	subs	r3, r1, #3
     b6e:	2b04      	cmp	r3, #4
     b70:	d804      	bhi.n	b7c <cbvprintf+0x258>
     b72:	e8df f003 	tbb	[pc, r3]
     b76:	1f0b      	.short	0x1f0b
     b78:	4135      	.short	0x4135
     b7a:	41          	.byte	0x41
     b7b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     b7c:	9b03      	ldr	r3, [sp, #12]
     b7e:	1d1a      	adds	r2, r3, #4
     b80:	9203      	str	r2, [sp, #12]
     b82:	681b      	ldr	r3, [r3, #0]
     b84:	9304      	str	r3, [sp, #16]
     b86:	2300      	movs	r3, #0
     b88:	9305      	str	r3, [sp, #20]
				break;
     b8a:	e01e      	b.n	bca <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
     b8c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     b90:	2b63      	cmp	r3, #99	; 0x63
     b92:	d007      	beq.n	ba4 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
     b94:	9b03      	ldr	r3, [sp, #12]
     b96:	1d1a      	adds	r2, r3, #4
     b98:	9203      	str	r2, [sp, #12]
     b9a:	681b      	ldr	r3, [r3, #0]
     b9c:	9304      	str	r3, [sp, #16]
     b9e:	2300      	movs	r3, #0
     ba0:	9305      	str	r3, [sp, #20]
     ba2:	e012      	b.n	bca <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
     ba4:	9b03      	ldr	r3, [sp, #12]
     ba6:	1d1a      	adds	r2, r3, #4
     ba8:	9203      	str	r2, [sp, #12]
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	9304      	str	r3, [sp, #16]
     bae:	2300      	movs	r3, #0
     bb0:	9305      	str	r3, [sp, #20]
     bb2:	e00a      	b.n	bca <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
     bb4:	9b03      	ldr	r3, [sp, #12]
     bb6:	3307      	adds	r3, #7
     bb8:	f023 0307 	bic.w	r3, r3, #7
     bbc:	f103 0208 	add.w	r2, r3, #8
     bc0:	9203      	str	r2, [sp, #12]
     bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     bc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     bca:	2901      	cmp	r1, #1
     bcc:	d01c      	beq.n	c08 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
     bce:	2902      	cmp	r1, #2
     bd0:	f47f aeff 	bne.w	9d2 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
     bd4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     bd8:	9304      	str	r3, [sp, #16]
     bda:	2300      	movs	r3, #0
     bdc:	9305      	str	r3, [sp, #20]
     bde:	e6f8      	b.n	9d2 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
     be0:	9b03      	ldr	r3, [sp, #12]
     be2:	3307      	adds	r3, #7
     be4:	f023 0307 	bic.w	r3, r3, #7
     be8:	f103 0208 	add.w	r2, r3, #8
     bec:	9203      	str	r2, [sp, #12]
     bee:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     bf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     bf6:	e7e8      	b.n	bca <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
     bf8:	9b03      	ldr	r3, [sp, #12]
     bfa:	1d1a      	adds	r2, r3, #4
     bfc:	9203      	str	r2, [sp, #12]
     bfe:	681b      	ldr	r3, [r3, #0]
				value->uint =
     c00:	9304      	str	r3, [sp, #16]
     c02:	2300      	movs	r3, #0
     c04:	9305      	str	r3, [sp, #20]
				break;
     c06:	e7e0      	b.n	bca <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
     c08:	f89d 3010 	ldrb.w	r3, [sp, #16]
     c0c:	9304      	str	r3, [sp, #16]
     c0e:	2300      	movs	r3, #0
     c10:	9305      	str	r3, [sp, #20]
     c12:	e6de      	b.n	9d2 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     c14:	2908      	cmp	r1, #8
     c16:	d00b      	beq.n	c30 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
     c18:	9b03      	ldr	r3, [sp, #12]
     c1a:	3307      	adds	r3, #7
     c1c:	f023 0307 	bic.w	r3, r3, #7
     c20:	f103 0208 	add.w	r2, r3, #8
     c24:	9203      	str	r2, [sp, #12]
     c26:	e9d3 2300 	ldrd	r2, r3, [r3]
     c2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
     c2e:	e6d0      	b.n	9d2 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
     c30:	9b03      	ldr	r3, [sp, #12]
     c32:	3307      	adds	r3, #7
     c34:	f023 0307 	bic.w	r3, r3, #7
     c38:	f103 0208 	add.w	r2, r3, #8
     c3c:	9203      	str	r2, [sp, #12]
     c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
     c42:	e9cd 2304 	strd	r2, r3, [sp, #16]
     c46:	e6c4      	b.n	9d2 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
     c48:	9b03      	ldr	r3, [sp, #12]
     c4a:	1d1a      	adds	r2, r3, #4
     c4c:	9203      	str	r2, [sp, #12]
     c4e:	681b      	ldr	r3, [r3, #0]
     c50:	9304      	str	r3, [sp, #16]
     c52:	e6be      	b.n	9d2 <cbvprintf+0xae>
			OUTS(sp, fp);
     c54:	9f02      	ldr	r7, [sp, #8]
     c56:	463b      	mov	r3, r7
     c58:	464a      	mov	r2, r9
     c5a:	4629      	mov	r1, r5
     c5c:	4630      	mov	r0, r6
     c5e:	f004 fc6c 	bl	553a <outs>
     c62:	2800      	cmp	r0, #0
     c64:	f2c0 8141 	blt.w	eea <cbvprintf+0x5c6>
     c68:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     c6a:	46b9      	mov	r9, r7
			continue;
     c6c:	e662      	b.n	934 <cbvprintf+0x10>
		case '%':
			OUTC('%');
     c6e:	4629      	mov	r1, r5
     c70:	2025      	movs	r0, #37	; 0x25
     c72:	47b0      	blx	r6
     c74:	2800      	cmp	r0, #0
     c76:	f2c0 8138 	blt.w	eea <cbvprintf+0x5c6>
     c7a:	3401      	adds	r4, #1
		char sign = 0;
     c7c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     c7e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     c82:	f04f 0900 	mov.w	r9, #0
			break;
     c86:	e09b      	b.n	dc0 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
     c88:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     c8c:	f1ba 0f00 	cmp.w	sl, #0
     c90:	db07      	blt.n	ca2 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
     c92:	4651      	mov	r1, sl
     c94:	4648      	mov	r0, r9
     c96:	f004 fd29 	bl	56ec <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     c9a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     c9e:	46d8      	mov	r8, fp
			precision = -1;

			break;
     ca0:	e08e      	b.n	dc0 <cbvprintf+0x49c>
				len = strlen(bps);
     ca2:	4648      	mov	r0, r9
     ca4:	f004 fd19 	bl	56da <strlen>
     ca8:	e7f7      	b.n	c9a <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     caa:	9b04      	ldr	r3, [sp, #16]
     cac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     cb0:	46d8      	mov	r8, fp
			bpe = buf + 1;
     cb2:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     cb6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     cba:	e081      	b.n	dc0 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     cbc:	f018 0f08 	tst.w	r8, #8
     cc0:	d105      	bne.n	cce <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
     cc2:	f018 0810 	ands.w	r8, r8, #16
     cc6:	d004      	beq.n	cd2 <cbvprintf+0x3ae>
				sign = ' ';
     cc8:	f04f 0820 	mov.w	r8, #32
     ccc:	e001      	b.n	cd2 <cbvprintf+0x3ae>
				sign = '+';
     cce:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     cd2:	9a04      	ldr	r2, [sp, #16]
     cd4:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     cd6:	2b00      	cmp	r3, #0
     cd8:	db02      	blt.n	ce0 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     cda:	9204      	str	r2, [sp, #16]
     cdc:	9305      	str	r3, [sp, #20]
     cde:	e008      	b.n	cf2 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
     ce0:	4252      	negs	r2, r2
     ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ce6:	9204      	str	r2, [sp, #16]
     ce8:	9305      	str	r3, [sp, #20]
				sign = '-';
     cea:	f04f 082d 	mov.w	r8, #45	; 0x2d
     cee:	e000      	b.n	cf2 <cbvprintf+0x3ce>
		switch (conv->specifier) {
     cf0:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     cf2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     cf6:	9300      	str	r3, [sp, #0]
     cf8:	ab0a      	add	r3, sp, #40	; 0x28
     cfa:	aa06      	add	r2, sp, #24
     cfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     d00:	f004 fbb1 	bl	5466 <encode_uint>
     d04:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     d06:	f1ba 0f00 	cmp.w	sl, #0
     d0a:	f2c0 8088 	blt.w	e1e <cbvprintf+0x4fa>
				size_t len = bpe - bps;
     d0e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     d12:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     d16:	f89d 2018 	ldrb.w	r2, [sp, #24]
     d1a:	f36f 1286 	bfc	r2, #6, #1
     d1e:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     d22:	459a      	cmp	sl, r3
     d24:	d97e      	bls.n	e24 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
     d26:	ebaa 0303 	sub.w	r3, sl, r3
     d2a:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     d2c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     d30:	e046      	b.n	dc0 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     d32:	9804      	ldr	r0, [sp, #16]
     d34:	b928      	cbnz	r0, d42 <cbvprintf+0x41e>
		char sign = 0;
     d36:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     d38:	f8df a1b4 	ldr.w	sl, [pc, #436]	; ef0 <cbvprintf+0x5cc>
			bps = "(nil)";
     d3c:	f1aa 0905 	sub.w	r9, sl, #5
     d40:	e03e      	b.n	dc0 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d42:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     d46:	9300      	str	r3, [sp, #0]
     d48:	ab0a      	add	r3, sp, #40	; 0x28
     d4a:	aa06      	add	r2, sp, #24
     d4c:	2100      	movs	r1, #0
     d4e:	f004 fb8a 	bl	5466 <encode_uint>
     d52:	4681      	mov	r9, r0
				conv->altform_0c = true;
     d54:	f89d 301a 	ldrb.w	r3, [sp, #26]
     d58:	f043 0310 	orr.w	r3, r3, #16
     d5c:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     d60:	2378      	movs	r3, #120	; 0x78
     d62:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     d66:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     d68:	e7cd      	b.n	d06 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     d6a:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
     d6c:	f89d 3019 	ldrb.w	r3, [sp, #25]
     d70:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     d74:	2b07      	cmp	r3, #7
     d76:	d806      	bhi.n	d86 <cbvprintf+0x462>
     d78:	e8df f003 	tbb	[pc, r3]
     d7c:	0f0d0b04 	.word	0x0f0d0b04
     d80:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
     d84:	6014      	str	r4, [r2, #0]
		char sign = 0;
     d86:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     d88:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     d8c:	f04f 0900 	mov.w	r9, #0
}
     d90:	e016      	b.n	dc0 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
     d92:	7014      	strb	r4, [r2, #0]
		break;
     d94:	e7f7      	b.n	d86 <cbvprintf+0x462>
		*(short *)dp = (short)count;
     d96:	8014      	strh	r4, [r2, #0]
		break;
     d98:	e7f5      	b.n	d86 <cbvprintf+0x462>
		*(long *)dp = (long)count;
     d9a:	6014      	str	r4, [r2, #0]
		break;
     d9c:	e7f3      	b.n	d86 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
     d9e:	17e3      	asrs	r3, r4, #31
     da0:	6014      	str	r4, [r2, #0]
     da2:	6053      	str	r3, [r2, #4]
		break;
     da4:	e7ef      	b.n	d86 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
     da6:	17e3      	asrs	r3, r4, #31
     da8:	6014      	str	r4, [r2, #0]
     daa:	6053      	str	r3, [r2, #4]
		break;
     dac:	e7eb      	b.n	d86 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
     dae:	6014      	str	r4, [r2, #0]
		break;
     db0:	e7e9      	b.n	d86 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     db2:	6014      	str	r4, [r2, #0]
		break;
     db4:	e7e7      	b.n	d86 <cbvprintf+0x462>
		switch (conv->specifier) {
     db6:	46d8      	mov	r8, fp
     db8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     dbc:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     dc0:	f1b9 0f00 	cmp.w	r9, #0
     dc4:	f000 808d 	beq.w	ee2 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     dc8:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     dcc:	f1b8 0f00 	cmp.w	r8, #0
     dd0:	d000      	beq.n	dd4 <cbvprintf+0x4b0>
			nj_len += 1U;
     dd2:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     dd4:	f89d 201a 	ldrb.w	r2, [sp, #26]
     dd8:	f012 0f10 	tst.w	r2, #16
     ddc:	d025      	beq.n	e2a <cbvprintf+0x506>
			nj_len += 2U;
     dde:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     de0:	9907      	ldr	r1, [sp, #28]
     de2:	440b      	add	r3, r1
		if (conv->pad_fp) {
     de4:	f012 0f40 	tst.w	r2, #64	; 0x40
     de8:	d001      	beq.n	dee <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
     dea:	9a08      	ldr	r2, [sp, #32]
     dec:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     dee:	2f00      	cmp	r7, #0
     df0:	dd31      	ble.n	e56 <cbvprintf+0x532>
			width -= (int)nj_len;
     df2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     df4:	f89d 3018 	ldrb.w	r3, [sp, #24]
     df8:	f013 0f04 	tst.w	r3, #4
     dfc:	d12b      	bne.n	e56 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     dfe:	f013 0f40 	tst.w	r3, #64	; 0x40
     e02:	d017      	beq.n	e34 <cbvprintf+0x510>
					if (sign != 0) {
     e04:	f1b8 0f00 	cmp.w	r8, #0
     e08:	d017      	beq.n	e3a <cbvprintf+0x516>
						OUTC(sign);
     e0a:	4629      	mov	r1, r5
     e0c:	4640      	mov	r0, r8
     e0e:	47b0      	blx	r6
     e10:	2800      	cmp	r0, #0
     e12:	db6a      	blt.n	eea <cbvprintf+0x5c6>
     e14:	3401      	adds	r4, #1
						sign = 0;
     e16:	46d8      	mov	r8, fp
					}
					pad = '0';
     e18:	f04f 0b30 	mov.w	fp, #48	; 0x30
     e1c:	e00f      	b.n	e3e <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
     e1e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     e22:	e7cd      	b.n	dc0 <cbvprintf+0x49c>
     e24:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     e28:	e7ca      	b.n	dc0 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
     e2a:	f012 0f08 	tst.w	r2, #8
     e2e:	d0d7      	beq.n	de0 <cbvprintf+0x4bc>
			nj_len += 1U;
     e30:	3301      	adds	r3, #1
     e32:	e7d5      	b.n	de0 <cbvprintf+0x4bc>
				char pad = ' ';
     e34:	f04f 0b20 	mov.w	fp, #32
     e38:	e001      	b.n	e3e <cbvprintf+0x51a>
					pad = '0';
     e3a:	f04f 0b30 	mov.w	fp, #48	; 0x30
     e3e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     e40:	1e5f      	subs	r7, r3, #1
     e42:	2b00      	cmp	r3, #0
     e44:	dd07      	ble.n	e56 <cbvprintf+0x532>
					OUTC(pad);
     e46:	4629      	mov	r1, r5
     e48:	4658      	mov	r0, fp
     e4a:	47b0      	blx	r6
     e4c:	2800      	cmp	r0, #0
     e4e:	db4c      	blt.n	eea <cbvprintf+0x5c6>
     e50:	3401      	adds	r4, #1
				while (width-- > 0) {
     e52:	463b      	mov	r3, r7
     e54:	e7f4      	b.n	e40 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     e56:	f1b8 0f00 	cmp.w	r8, #0
     e5a:	d005      	beq.n	e68 <cbvprintf+0x544>
			OUTC(sign);
     e5c:	4629      	mov	r1, r5
     e5e:	4640      	mov	r0, r8
     e60:	47b0      	blx	r6
     e62:	2800      	cmp	r0, #0
     e64:	db41      	blt.n	eea <cbvprintf+0x5c6>
     e66:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     e68:	f89d 301a 	ldrb.w	r3, [sp, #26]
     e6c:	f3c3 1200 	ubfx	r2, r3, #4, #1
     e70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     e74:	4313      	orrs	r3, r2
     e76:	d005      	beq.n	e84 <cbvprintf+0x560>
				OUTC('0');
     e78:	4629      	mov	r1, r5
     e7a:	2030      	movs	r0, #48	; 0x30
     e7c:	47b0      	blx	r6
     e7e:	2800      	cmp	r0, #0
     e80:	db33      	blt.n	eea <cbvprintf+0x5c6>
     e82:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     e84:	f89d 301a 	ldrb.w	r3, [sp, #26]
     e88:	f013 0f10 	tst.w	r3, #16
     e8c:	d006      	beq.n	e9c <cbvprintf+0x578>
				OUTC(conv->specifier);
     e8e:	4629      	mov	r1, r5
     e90:	f89d 001b 	ldrb.w	r0, [sp, #27]
     e94:	47b0      	blx	r6
     e96:	2800      	cmp	r0, #0
     e98:	db27      	blt.n	eea <cbvprintf+0x5c6>
     e9a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     e9c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     e9e:	f103 38ff 	add.w	r8, r3, #4294967295
     ea2:	2b00      	cmp	r3, #0
     ea4:	dd07      	ble.n	eb6 <cbvprintf+0x592>
				OUTC('0');
     ea6:	4629      	mov	r1, r5
     ea8:	2030      	movs	r0, #48	; 0x30
     eaa:	47b0      	blx	r6
     eac:	2800      	cmp	r0, #0
     eae:	db1c      	blt.n	eea <cbvprintf+0x5c6>
     eb0:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     eb2:	4643      	mov	r3, r8
     eb4:	e7f3      	b.n	e9e <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
     eb6:	4653      	mov	r3, sl
     eb8:	464a      	mov	r2, r9
     eba:	4629      	mov	r1, r5
     ebc:	4630      	mov	r0, r6
     ebe:	f004 fb3c 	bl	553a <outs>
     ec2:	2800      	cmp	r0, #0
     ec4:	db11      	blt.n	eea <cbvprintf+0x5c6>
     ec6:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     ec8:	2f00      	cmp	r7, #0
     eca:	dd07      	ble.n	edc <cbvprintf+0x5b8>
			OUTC(' ');
     ecc:	4629      	mov	r1, r5
     ece:	2020      	movs	r0, #32
     ed0:	47b0      	blx	r6
     ed2:	2800      	cmp	r0, #0
     ed4:	db09      	blt.n	eea <cbvprintf+0x5c6>
     ed6:	3401      	adds	r4, #1
			--width;
     ed8:	3f01      	subs	r7, #1
     eda:	e7f5      	b.n	ec8 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
     edc:	f8dd 9008 	ldr.w	r9, [sp, #8]
     ee0:	e528      	b.n	934 <cbvprintf+0x10>
     ee2:	f8dd 9008 	ldr.w	r9, [sp, #8]
     ee6:	e525      	b.n	934 <cbvprintf+0x10>
		}
	}

	return count;
     ee8:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     eea:	b011      	add	sp, #68	; 0x44
     eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ef0:	00006a3d 	.word	0x00006a3d

00000ef4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     ef4:	b508      	push	{r3, lr}
     ef6:	f04f 0220 	mov.w	r2, #32
     efa:	f3ef 8311 	mrs	r3, BASEPRI
     efe:	f382 8812 	msr	BASEPRI_MAX, r2
     f02:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     f06:	f000 fd47 	bl	1998 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     f0a:	4803      	ldr	r0, [pc, #12]	; (f18 <sys_reboot+0x24>)
     f0c:	f004 f92c 	bl	5168 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     f10:	f000 fab8 	bl	1484 <arch_cpu_idle>
     f14:	e7fc      	b.n	f10 <sys_reboot+0x1c>
     f16:	bf00      	nop
     f18:	00006a40 	.word	0x00006a40

00000f1c <nordicsemi_nrf53_init>:
     f1c:	f04f 0320 	mov.w	r3, #32
     f20:	f3ef 8c11 	mrs	ip, BASEPRI
     f24:	f383 8812 	msr	BASEPRI_MAX, r3
     f28:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     f2c:	2101      	movs	r1, #1
     f2e:	4b12      	ldr	r3, [pc, #72]	; (f78 <nordicsemi_nrf53_init+0x5c>)
     f30:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     f34:	4a11      	ldr	r2, [pc, #68]	; (f7c <nordicsemi_nrf53_init+0x60>)
     f36:	2302      	movs	r3, #2
     f38:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
NRF_STATIC_INLINE void nrf_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_mcusel_t mcu)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     f3c:	4810      	ldr	r0, [pc, #64]	; (f80 <nordicsemi_nrf53_init+0x64>)
     f3e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     f42:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
     f46:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     f4a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     f4e:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
     f52:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
     f56:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     f5a:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     f5e:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     f62:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     f66:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
     f6a:	f38c 8811 	msr	BASEPRI, ip
     f6e:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     f72:	2000      	movs	r0, #0
     f74:	4770      	bx	lr
     f76:	bf00      	nop
     f78:	50001000 	.word	0x50001000
     f7c:	50004000 	.word	0x50004000
     f80:	50842500 	.word	0x50842500

00000f84 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     f84:	b170      	cbz	r0, fa4 <arch_busy_wait+0x20>

void arch_busy_wait(uint32_t time_us)
{
     f86:	b508      	push	{r3, lr}
     f88:	4602      	mov	r2, r0

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     f8a:	4b07      	ldr	r3, [pc, #28]	; (fa8 <arch_busy_wait+0x24>)
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	4807      	ldr	r0, [pc, #28]	; (fac <arch_busy_wait+0x28>)
     f90:	fba0 1303 	umull	r1, r3, r0, r3
     f94:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
     f96:	fb03 f002 	mul.w	r0, r3, r2
     f9a:	4b05      	ldr	r3, [pc, #20]	; (fb0 <arch_busy_wait+0x2c>)
     f9c:	f043 0301 	orr.w	r3, r3, #1
     fa0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
     fa2:	bd08      	pop	{r3, pc}
     fa4:	4770      	bx	lr
     fa6:	bf00      	nop
     fa8:	20000040 	.word	0x20000040
     fac:	431bde83 	.word	0x431bde83
     fb0:	00006a30 	.word	0x00006a30

00000fb4 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     fb4:	2806      	cmp	r0, #6
     fb6:	d000      	beq.n	fba <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
     fb8:	4770      	bx	lr
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
     fba:	4b04      	ldr	r3, [pc, #16]	; (fcc <pm_state_set+0x18>)
     fbc:	2201      	movs	r2, #1
     fbe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     fc2:	f3bf 8f4f 	dsb	sy
        __WFE();
     fc6:	bf20      	wfe
    while (true)
     fc8:	e7fd      	b.n	fc6 <pm_state_set+0x12>
     fca:	bf00      	nop
     fcc:	50004000 	.word	0x50004000

00000fd0 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
     fd0:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
     fd2:	4b28      	ldr	r3, [pc, #160]	; (1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>)
     fd4:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     fd6:	f005 031f 	and.w	r3, r5, #31
     fda:	2201      	movs	r2, #1
     fdc:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     fde:	0969      	lsrs	r1, r5, #5
     fe0:	4b25      	ldr	r3, [pc, #148]	; (1078 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x78>)
     fe2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     fe6:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     fe8:	e8d3 1fef 	ldaex	r1, [r3]
     fec:	ea01 0400 	and.w	r4, r1, r0
     ff0:	e8c3 4fe6 	stlex	r6, r4, [r3]
     ff4:	2e00      	cmp	r6, #0
     ff6:	d1f7      	bne.n	fe8 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     ff8:	420a      	tst	r2, r1
     ffa:	d100      	bne.n	ffe <pm_system_resume+0x2e>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
     ffc:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
     ffe:	481f      	ldr	r0, [pc, #124]	; (107c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x7c>)
    1000:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    1004:	0093      	lsls	r3, r2, #2
    1006:	18c1      	adds	r1, r0, r3
	if (pm_state_exit_post_ops != NULL) {
    1008:	4a1d      	ldr	r2, [pc, #116]	; (1080 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x80>)
    100a:	b172      	cbz	r2, 102a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2a>
		pm_state_exit_post_ops(info->state, info->substate_id);
    100c:	7849      	ldrb	r1, [r1, #1]
    100e:	5cc0      	ldrb	r0, [r0, r3]
    1010:	f004 faae 	bl	5570 <pm_state_exit_post_ops>
	__asm__ volatile(
    1014:	f04f 0320 	mov.w	r3, #32
    1018:	f3ef 8611 	mrs	r6, BASEPRI
    101c:	f383 8812 	msr	BASEPRI_MAX, r3
    1020:	f3bf 8f6f 	isb	sy
    1024:	4b17      	ldr	r3, [pc, #92]	; (1084 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x84>)
    1026:	681c      	ldr	r4, [r3, #0]
    1028:	e010      	b.n	104c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c>
	__asm__ volatile(
    102a:	2300      	movs	r3, #0
    102c:	f383 8811 	msr	BASEPRI, r3
    1030:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1034:	e7ee      	b.n	1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1036:	4b0f      	ldr	r3, [pc, #60]	; (1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>)
    1038:	7d1b      	ldrb	r3, [r3, #20]
    103a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    103e:	0099      	lsls	r1, r3, #2
    1040:	4b0e      	ldr	r3, [pc, #56]	; (107c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x7c>)
    1042:	5c58      	ldrb	r0, [r3, r1]
    1044:	4790      	blx	r2
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    1046:	b10c      	cbz	r4, 104c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c>
	return node->next;
    1048:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    104a:	b124      	cbz	r4, 1056 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x56>
    104c:	b11c      	cbz	r4, 1056 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x56>
			callback = notifier->state_exit;
    104e:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    1050:	2a00      	cmp	r2, #0
    1052:	d1f0      	bne.n	1036 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x36>
    1054:	e7f7      	b.n	1046 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x46>
	__asm__ volatile(
    1056:	f386 8811 	msr	BASEPRI, r6
    105a:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    105e:	4807      	ldr	r0, [pc, #28]	; (107c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x7c>)
    1060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1064:	00aa      	lsls	r2, r5, #2
    1066:	1881      	adds	r1, r0, r2
    1068:	2300      	movs	r3, #0
    106a:	5083      	str	r3, [r0, r2]
    106c:	604b      	str	r3, [r1, #4]
    106e:	608b      	str	r3, [r1, #8]
}
    1070:	e7c4      	b.n	ffc <pm_system_resume+0x2c>
    1072:	bf00      	nop
    1074:	20000968 	.word	0x20000968
    1078:	20000330 	.word	0x20000330
    107c:	20000320 	.word	0x20000320
    1080:	00005571 	.word	0x00005571
    1084:	20000318 	.word	0x20000318

00001088 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1088:	b570      	push	{r4, r5, r6, lr}
    108a:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    108c:	4b50      	ldr	r3, [pc, #320]	; (11d0 <pm_system_suspend+0x148>)
    108e:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1090:	096a      	lsrs	r2, r5, #5
    1092:	4b50      	ldr	r3, [pc, #320]	; (11d4 <pm_system_suspend+0x14c>)
    1094:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1098:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    109c:	f005 021f 	and.w	r2, r5, #31
    10a0:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    10a2:	f013 0f01 	tst.w	r3, #1
    10a6:	d015      	beq.n	10d4 <pm_system_suspend+0x4c>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    10a8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    10ac:	4a4a      	ldr	r2, [pc, #296]	; (11d8 <pm_system_suspend+0x150>)
    10ae:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    10b2:	b1f3      	cbz	r3, 10f2 <pm_system_suspend+0x6a>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    10b4:	f1b4 3fff 	cmp.w	r4, #4294967295
    10b8:	d12d      	bne.n	1116 <pm_system_suspend+0x8e>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    10ba:	f003 f9a9 	bl	4410 <k_sched_lock>
	__asm__ volatile(
    10be:	f04f 0320 	mov.w	r3, #32
    10c2:	f3ef 8611 	mrs	r6, BASEPRI
    10c6:	f383 8812 	msr	BASEPRI_MAX, r3
    10ca:	f3bf 8f6f 	isb	sy
	return list->head;
    10ce:	4b43      	ldr	r3, [pc, #268]	; (11dc <pm_system_suspend+0x154>)
    10d0:	681c      	ldr	r4, [r3, #0]
    10d2:	e041      	b.n	1158 <pm_system_suspend+0xd0>
		info = pm_policy_next_state(id, ticks);
    10d4:	4601      	mov	r1, r0
    10d6:	4628      	mov	r0, r5
    10d8:	f000 f896 	bl	1208 <pm_policy_next_state>
		if (info != NULL) {
    10dc:	2800      	cmp	r0, #0
    10de:	d0e3      	beq.n	10a8 <pm_system_suspend+0x20>
			z_cpus_pm_state[id] = *info;
    10e0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    10e4:	4a3c      	ldr	r2, [pc, #240]	; (11d8 <pm_system_suspend+0x150>)
    10e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    10ea:	c807      	ldmia	r0, {r0, r1, r2}
    10ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    10f0:	e7da      	b.n	10a8 <pm_system_suspend+0x20>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    10f2:	f005 021f 	and.w	r2, r5, #31
    10f6:	2301      	movs	r3, #1
    10f8:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    10fa:	096d      	lsrs	r5, r5, #5
    10fc:	4a35      	ldr	r2, [pc, #212]	; (11d4 <pm_system_suspend+0x14c>)
    10fe:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1102:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1104:	e8d5 2fef 	ldaex	r2, [r5]
    1108:	401a      	ands	r2, r3
    110a:	e8c5 2fe1 	stlex	r1, r2, [r5]
    110e:	2900      	cmp	r1, #0
    1110:	d1f8      	bne.n	1104 <pm_system_suspend+0x7c>
		ret = false;
    1112:	2000      	movs	r0, #0
		goto end;
    1114:	e05a      	b.n	11cc <pm_system_suspend+0x144>
		     k_us_to_ticks_ceil32(
    1116:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    111a:	4a2f      	ldr	r2, [pc, #188]	; (11d8 <pm_system_suspend+0x150>)
    111c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1120:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1122:	0c41      	lsrs	r1, r0, #17
    1124:	03c0      	lsls	r0, r0, #15
    1126:	4b2e      	ldr	r3, [pc, #184]	; (11e0 <pm_system_suspend+0x158>)
    1128:	18c0      	adds	r0, r0, r3
    112a:	4a2e      	ldr	r2, [pc, #184]	; (11e4 <pm_system_suspend+0x15c>)
    112c:	f04f 0300 	mov.w	r3, #0
    1130:	f141 0100 	adc.w	r1, r1, #0
    1134:	f7ff f80e 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1138:	2101      	movs	r1, #1
    113a:	1a20      	subs	r0, r4, r0
    113c:	f005 fa9a 	bl	6674 <z_set_timeout_expiry>
    1140:	e7bb      	b.n	10ba <pm_system_suspend+0x32>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1142:	4b23      	ldr	r3, [pc, #140]	; (11d0 <pm_system_suspend+0x148>)
    1144:	7d1b      	ldrb	r3, [r3, #20]
    1146:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    114a:	4923      	ldr	r1, [pc, #140]	; (11d8 <pm_system_suspend+0x150>)
    114c:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1150:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    1152:	b10c      	cbz	r4, 1158 <pm_system_suspend+0xd0>
	return node->next;
    1154:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1156:	b124      	cbz	r4, 1162 <pm_system_suspend+0xda>
    1158:	b11c      	cbz	r4, 1162 <pm_system_suspend+0xda>
			callback = notifier->state_entry;
    115a:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    115c:	2a00      	cmp	r2, #0
    115e:	d1f0      	bne.n	1142 <pm_system_suspend+0xba>
    1160:	e7f7      	b.n	1152 <pm_system_suspend+0xca>
	__asm__ volatile(
    1162:	f386 8811 	msr	BASEPRI, r6
    1166:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    116a:	f005 031f 	and.w	r3, r5, #31
    116e:	2101      	movs	r1, #1
    1170:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1172:	096b      	lsrs	r3, r5, #5
    1174:	4a1c      	ldr	r2, [pc, #112]	; (11e8 <pm_system_suspend+0x160>)
    1176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    117a:	e8d3 2fef 	ldaex	r2, [r3]
    117e:	430a      	orrs	r2, r1
    1180:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1184:	2800      	cmp	r0, #0
    1186:	d1f8      	bne.n	117a <pm_system_suspend+0xf2>
	if (pm_state_set != NULL) {
    1188:	4b18      	ldr	r3, [pc, #96]	; (11ec <pm_system_suspend+0x164>)
    118a:	b14b      	cbz	r3, 11a0 <pm_system_suspend+0x118>
		pm_state_set(info->state, info->substate_id);
    118c:	4b12      	ldr	r3, [pc, #72]	; (11d8 <pm_system_suspend+0x150>)
    118e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    1192:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1196:	7849      	ldrb	r1, [r1, #1]
    1198:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    119c:	f7ff ff0a 	bl	fb4 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    11a0:	f7ff ff16 	bl	fd0 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    11a4:	f005 031f 	and.w	r3, r5, #31
    11a8:	2401      	movs	r4, #1
    11aa:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    11ae:	096d      	lsrs	r5, r5, #5
    11b0:	4a08      	ldr	r2, [pc, #32]	; (11d4 <pm_system_suspend+0x14c>)
    11b2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    11b6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    11b8:	e8d5 2fef 	ldaex	r2, [r5]
    11bc:	401a      	ands	r2, r3
    11be:	e8c5 2fe1 	stlex	r1, r2, [r5]
    11c2:	2900      	cmp	r1, #0
    11c4:	d1f8      	bne.n	11b8 <pm_system_suspend+0x130>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    11c6:	f003 fb45 	bl	4854 <k_sched_unlock>
	bool ret = true;
    11ca:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    11cc:	bd70      	pop	{r4, r5, r6, pc}
    11ce:	bf00      	nop
    11d0:	20000968 	.word	0x20000968
    11d4:	2000032c 	.word	0x2000032c
    11d8:	20000320 	.word	0x20000320
    11dc:	20000318 	.word	0x20000318
    11e0:	000f423f 	.word	0x000f423f
    11e4:	000f4240 	.word	0x000f4240
    11e8:	20000330 	.word	0x20000330
    11ec:	00000fb5 	.word	0x00000fb5

000011f0 <pm_policy_state_lock_is_active>:
	__ASSERT(cnt >= 1, "Unbalanced state lock get/put");
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
    11f0:	4b04      	ldr	r3, [pc, #16]	; (1204 <pm_policy_state_lock_is_active+0x14>)
    11f2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    11f6:	e8d3 0faf 	lda	r0, [r3]
}
    11fa:	3800      	subs	r0, #0
    11fc:	bf18      	it	ne
    11fe:	2001      	movne	r0, #1
    1200:	4770      	bx	lr
    1202:	bf00      	nop
    1204:	20000334 	.word	0x20000334

00001208 <pm_policy_next_state>:
{
    1208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    120c:	b082      	sub	sp, #8
    120e:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1210:	a901      	add	r1, sp, #4
    1212:	f000 f843 	bl	129c <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1216:	1e44      	subs	r4, r0, #1
    1218:	b224      	sxth	r4, r4
    121a:	e007      	b.n	122c <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    121c:	f1b6 3fff 	cmp.w	r6, #4294967295
    1220:	d032      	beq.n	1288 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    1222:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    1224:	42b0      	cmp	r0, r6
    1226:	d92f      	bls.n	1288 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1228:	3c01      	subs	r4, #1
    122a:	b224      	sxth	r4, r4
    122c:	2c00      	cmp	r4, #0
    122e:	db2a      	blt.n	1286 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    1230:	9b01      	ldr	r3, [sp, #4]
    1232:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1236:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    123a:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    123e:	f7ff ffd7 	bl	11f0 <pm_policy_state_lock_is_active>
    1242:	2800      	cmp	r0, #0
    1244:	d1f0      	bne.n	1228 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    1246:	6868      	ldr	r0, [r5, #4]
    1248:	0c41      	lsrs	r1, r0, #17
    124a:	03c0      	lsls	r0, r0, #15
    124c:	4f10      	ldr	r7, [pc, #64]	; (1290 <pm_policy_next_state+0x88>)
    124e:	19c0      	adds	r0, r0, r7
    1250:	4a10      	ldr	r2, [pc, #64]	; (1294 <pm_policy_next_state+0x8c>)
    1252:	f04f 0300 	mov.w	r3, #0
    1256:	f141 0100 	adc.w	r1, r1, #0
    125a:	f7fe ff7b 	bl	154 <__aeabi_uldivmod>
    125e:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    1260:	68ab      	ldr	r3, [r5, #8]
    1262:	0c59      	lsrs	r1, r3, #17
    1264:	03db      	lsls	r3, r3, #15
    1266:	19d8      	adds	r0, r3, r7
    1268:	4a0a      	ldr	r2, [pc, #40]	; (1294 <pm_policy_next_state+0x8c>)
    126a:	f04f 0300 	mov.w	r3, #0
    126e:	f141 0100 	adc.w	r1, r1, #0
    1272:	f7fe ff6f 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1276:	4b08      	ldr	r3, [pc, #32]	; (1298 <pm_policy_next_state+0x90>)
    1278:	681b      	ldr	r3, [r3, #0]
    127a:	f1b3 3fff 	cmp.w	r3, #4294967295
    127e:	d0cd      	beq.n	121c <pm_policy_next_state+0x14>
    1280:	4283      	cmp	r3, r0
    1282:	d8cb      	bhi.n	121c <pm_policy_next_state+0x14>
    1284:	e7d0      	b.n	1228 <pm_policy_next_state+0x20>
	return NULL;
    1286:	2500      	movs	r5, #0
}
    1288:	4628      	mov	r0, r5
    128a:	b002      	add	sp, #8
    128c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1290:	000f423f 	.word	0x000f423f
    1294:	000f4240 	.word	0x000f4240
    1298:	20000004 	.word	0x20000004

0000129c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    129c:	b908      	cbnz	r0, 12a2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    129e:	4b02      	ldr	r3, [pc, #8]	; (12a8 <pm_state_cpu_get_all+0xc>)
    12a0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    12a2:	2000      	movs	r0, #0
    12a4:	4770      	bx	lr
    12a6:	bf00      	nop
    12a8:	00006a6c 	.word	0x00006a6c

000012ac <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    12ac:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    12ae:	4802      	ldr	r0, [pc, #8]	; (12b8 <nrf_cc3xx_platform_abort_init+0xc>)
    12b0:	f003 fe0a 	bl	4ec8 <nrf_cc3xx_platform_set_abort>
}
    12b4:	bd08      	pop	{r3, pc}
    12b6:	bf00      	nop
    12b8:	00006a6c 	.word	0x00006a6c

000012bc <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    12bc:	b308      	cbz	r0, 1302 <mutex_unlock_platform+0x46>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12be:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    12c0:	6843      	ldr	r3, [r0, #4]
    12c2:	2b04      	cmp	r3, #4
    12c4:	d007      	beq.n	12d6 <mutex_unlock_platform+0x1a>
    12c6:	2b08      	cmp	r3, #8
    12c8:	d012      	beq.n	12f0 <mutex_unlock_platform+0x34>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    12ca:	b1fb      	cbz	r3, 130c <mutex_unlock_platform+0x50>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    12cc:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    12ce:	f002 ff95 	bl	41fc <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    12d2:	2000      	movs	r0, #0
    12d4:	e014      	b.n	1300 <mutex_unlock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    12d6:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    12d8:	2200      	movs	r2, #0
    12da:	e8d3 1fef 	ldaex	r1, [r3]
    12de:	2901      	cmp	r1, #1
    12e0:	d103      	bne.n	12ea <mutex_unlock_platform+0x2e>
    12e2:	e8c3 2fe0 	stlex	r0, r2, [r3]
    12e6:	2800      	cmp	r0, #0
    12e8:	d1f7      	bne.n	12da <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    12ea:	d10d      	bne.n	1308 <mutex_unlock_platform+0x4c>
    12ec:	4610      	mov	r0, r2
    12ee:	e007      	b.n	1300 <mutex_unlock_platform+0x44>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    12f0:	6803      	ldr	r3, [r0, #0]
    12f2:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    12f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    12f8:	2000      	movs	r0, #0
    12fa:	4a05      	ldr	r2, [pc, #20]	; (1310 <mutex_unlock_platform+0x54>)
    12fc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    1300:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1302:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1306:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1308:	4802      	ldr	r0, [pc, #8]	; (1314 <mutex_unlock_platform+0x58>)
    130a:	e7f9      	b.n	1300 <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    130c:	4802      	ldr	r0, [pc, #8]	; (1318 <mutex_unlock_platform+0x5c>)
    130e:	e7f7      	b.n	1300 <mutex_unlock_platform+0x44>
    1310:	50030000 	.word	0x50030000
    1314:	ffff8fe9 	.word	0xffff8fe9
    1318:	ffff8fea 	.word	0xffff8fea

0000131c <mutex_lock_platform>:
    if(mutex == NULL) {
    131c:	b370      	cbz	r0, 137c <mutex_lock_platform+0x60>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    131e:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    1320:	6843      	ldr	r3, [r0, #4]
    1322:	2b04      	cmp	r3, #4
    1324:	d004      	beq.n	1330 <mutex_lock_platform+0x14>
    1326:	2b08      	cmp	r3, #8
    1328:	d00f      	beq.n	134a <mutex_lock_platform+0x2e>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    132a:	b9c3      	cbnz	r3, 135e <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    132c:	4815      	ldr	r0, [pc, #84]	; (1384 <mutex_lock_platform+0x68>)
    132e:	e00b      	b.n	1348 <mutex_lock_platform+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    1330:	6803      	ldr	r3, [r0, #0]
    1332:	2201      	movs	r2, #1
    1334:	e8d3 1fef 	ldaex	r1, [r3]
    1338:	2900      	cmp	r1, #0
    133a:	d103      	bne.n	1344 <mutex_lock_platform+0x28>
    133c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1340:	2800      	cmp	r0, #0
    1342:	d1f7      	bne.n	1334 <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1344:	d116      	bne.n	1374 <mutex_lock_platform+0x58>
    1346:	2000      	movs	r0, #0
}
    1348:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    134a:	6803      	ldr	r3, [r0, #0]
    134c:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    134e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1352:	4a0d      	ldr	r2, [pc, #52]	; (1388 <mutex_lock_platform+0x6c>)
    1354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1358:	b973      	cbnz	r3, 1378 <mutex_lock_platform+0x5c>
    135a:	2000      	movs	r0, #0
    135c:	e7f4      	b.n	1348 <mutex_lock_platform+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    135e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1360:	f04f 32ff 	mov.w	r2, #4294967295
    1364:	f04f 33ff 	mov.w	r3, #4294967295
    1368:	f002 febe 	bl	40e8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    136c:	2800      	cmp	r0, #0
    136e:	d0eb      	beq.n	1348 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    1370:	4806      	ldr	r0, [pc, #24]	; (138c <mutex_lock_platform+0x70>)
    1372:	e7e9      	b.n	1348 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1374:	4805      	ldr	r0, [pc, #20]	; (138c <mutex_lock_platform+0x70>)
    1376:	e7e7      	b.n	1348 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1378:	4804      	ldr	r0, [pc, #16]	; (138c <mutex_lock_platform+0x70>)
    137a:	e7e5      	b.n	1348 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    137c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1380:	4770      	bx	lr
    1382:	bf00      	nop
    1384:	ffff8fea 	.word	0xffff8fea
    1388:	50030000 	.word	0x50030000
    138c:	ffff8fe9 	.word	0xffff8fe9

00001390 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1390:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1392:	4604      	mov	r4, r0
    1394:	b188      	cbz	r0, 13ba <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1396:	6863      	ldr	r3, [r4, #4]
    1398:	2b04      	cmp	r3, #4
    139a:	d00d      	beq.n	13b8 <mutex_free_platform+0x28>
    139c:	2b08      	cmp	r3, #8
    139e:	d00b      	beq.n	13b8 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    13a0:	b153      	cbz	r3, 13b8 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    13a2:	f013 0f02 	tst.w	r3, #2
    13a6:	d00d      	beq.n	13c4 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    13a8:	4621      	mov	r1, r4
    13aa:	4809      	ldr	r0, [pc, #36]	; (13d0 <mutex_free_platform+0x40>)
    13ac:	f004 ffa5 	bl	62fa <k_mem_slab_free>
        mutex->mutex = NULL;
    13b0:	2300      	movs	r3, #0
    13b2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    13b4:	2300      	movs	r3, #0
    13b6:	6063      	str	r3, [r4, #4]
}
    13b8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    13ba:	4b06      	ldr	r3, [pc, #24]	; (13d4 <mutex_free_platform+0x44>)
    13bc:	685b      	ldr	r3, [r3, #4]
    13be:	4806      	ldr	r0, [pc, #24]	; (13d8 <mutex_free_platform+0x48>)
    13c0:	4798      	blx	r3
    13c2:	e7e8      	b.n	1396 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    13c4:	2214      	movs	r2, #20
    13c6:	2100      	movs	r1, #0
    13c8:	6820      	ldr	r0, [r4, #0]
    13ca:	f004 f9c8 	bl	575e <memset>
    13ce:	e7f1      	b.n	13b4 <mutex_free_platform+0x24>
    13d0:	20000350 	.word	0x20000350
    13d4:	200000cc 	.word	0x200000cc
    13d8:	00006a74 	.word	0x00006a74

000013dc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    13dc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    13de:	4604      	mov	r4, r0
    13e0:	b178      	cbz	r0, 1402 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    13e2:	6863      	ldr	r3, [r4, #4]
    13e4:	2b04      	cmp	r3, #4
    13e6:	d00b      	beq.n	1400 <mutex_init_platform+0x24>
    13e8:	2b08      	cmp	r3, #8
    13ea:	d009      	beq.n	1400 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    13ec:	b90b      	cbnz	r3, 13f2 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    13ee:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    13f0:	b163      	cbz	r3, 140c <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    13f2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    13f4:	f004 ffea 	bl	63cc <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    13f8:	6863      	ldr	r3, [r4, #4]
    13fa:	f043 0301 	orr.w	r3, r3, #1
    13fe:	6063      	str	r3, [r4, #4]
}
    1400:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1402:	4b0f      	ldr	r3, [pc, #60]	; (1440 <mutex_init_platform+0x64>)
    1404:	685b      	ldr	r3, [r3, #4]
    1406:	480f      	ldr	r0, [pc, #60]	; (1444 <mutex_init_platform+0x68>)
    1408:	4798      	blx	r3
    140a:	e7ea      	b.n	13e2 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    140c:	f04f 32ff 	mov.w	r2, #4294967295
    1410:	f04f 33ff 	mov.w	r3, #4294967295
    1414:	4621      	mov	r1, r4
    1416:	480c      	ldr	r0, [pc, #48]	; (1448 <mutex_init_platform+0x6c>)
    1418:	f002 fd38 	bl	3e8c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    141c:	b908      	cbnz	r0, 1422 <mutex_init_platform+0x46>
    141e:	6823      	ldr	r3, [r4, #0]
    1420:	b91b      	cbnz	r3, 142a <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    1422:	4b07      	ldr	r3, [pc, #28]	; (1440 <mutex_init_platform+0x64>)
    1424:	685b      	ldr	r3, [r3, #4]
    1426:	4809      	ldr	r0, [pc, #36]	; (144c <mutex_init_platform+0x70>)
    1428:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    142a:	2214      	movs	r2, #20
    142c:	2100      	movs	r1, #0
    142e:	6820      	ldr	r0, [r4, #0]
    1430:	f004 f995 	bl	575e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1434:	6863      	ldr	r3, [r4, #4]
    1436:	f043 0302 	orr.w	r3, r3, #2
    143a:	6063      	str	r3, [r4, #4]
    143c:	e7d9      	b.n	13f2 <mutex_init_platform+0x16>
    143e:	bf00      	nop
    1440:	200000cc 	.word	0x200000cc
    1444:	00006a74 	.word	0x00006a74
    1448:	20000350 	.word	0x20000350
    144c:	00006a9c 	.word	0x00006a9c

00001450 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1450:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1452:	2340      	movs	r3, #64	; 0x40
    1454:	2214      	movs	r2, #20
    1456:	4904      	ldr	r1, [pc, #16]	; (1468 <nrf_cc3xx_platform_mutex_init+0x18>)
    1458:	4804      	ldr	r0, [pc, #16]	; (146c <nrf_cc3xx_platform_mutex_init+0x1c>)
    145a:	f004 ff40 	bl	62de <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    145e:	4904      	ldr	r1, [pc, #16]	; (1470 <nrf_cc3xx_platform_mutex_init+0x20>)
    1460:	4804      	ldr	r0, [pc, #16]	; (1474 <nrf_cc3xx_platform_mutex_init+0x24>)
    1462:	f003 fd93 	bl	4f8c <nrf_cc3xx_platform_set_mutexes>
}
    1466:	bd08      	pop	{r3, pc}
    1468:	2000036c 	.word	0x2000036c
    146c:	20000350 	.word	0x20000350
    1470:	00006adc 	.word	0x00006adc
    1474:	00006acc 	.word	0x00006acc

00001478 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1478:	4901      	ldr	r1, [pc, #4]	; (1480 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    147a:	2210      	movs	r2, #16
	str	r2, [r1]
    147c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    147e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1480:	e000ed10 	.word	0xe000ed10

00001484 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1484:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1486:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1488:	f380 8811 	msr	BASEPRI, r0
	isb
    148c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1490:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1494:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1496:	b662      	cpsie	i
	isb
    1498:	f3bf 8f6f 	isb	sy

	bx	lr
    149c:	4770      	bx	lr
    149e:	bf00      	nop

000014a0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    14a0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    14a2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    14a4:	f381 8811 	msr	BASEPRI, r1

	wfe
    14a8:	bf20      	wfe

	msr	BASEPRI, r0
    14aa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    14ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    14b0:	4770      	bx	lr
    14b2:	bf00      	nop

000014b4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    14b4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    14b6:	2800      	cmp	r0, #0
    14b8:	db07      	blt.n	14ca <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14ba:	f000 021f 	and.w	r2, r0, #31
    14be:	0940      	lsrs	r0, r0, #5
    14c0:	2301      	movs	r3, #1
    14c2:	4093      	lsls	r3, r2
    14c4:	4a01      	ldr	r2, [pc, #4]	; (14cc <arch_irq_enable+0x18>)
    14c6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    14ca:	4770      	bx	lr
    14cc:	e000e100 	.word	0xe000e100

000014d0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    14d0:	0942      	lsrs	r2, r0, #5
    14d2:	4b05      	ldr	r3, [pc, #20]	; (14e8 <arch_irq_is_enabled+0x18>)
    14d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    14d8:	f000 001f 	and.w	r0, r0, #31
    14dc:	2301      	movs	r3, #1
    14de:	fa03 f000 	lsl.w	r0, r3, r0
}
    14e2:	4010      	ands	r0, r2
    14e4:	4770      	bx	lr
    14e6:	bf00      	nop
    14e8:	e000e100 	.word	0xe000e100

000014ec <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    14ec:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    14ee:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    14f0:	2800      	cmp	r0, #0
    14f2:	db08      	blt.n	1506 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f4:	0149      	lsls	r1, r1, #5
    14f6:	b2c9      	uxtb	r1, r1
    14f8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    14fc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    1500:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    1504:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1506:	f000 000f 	and.w	r0, r0, #15
    150a:	0149      	lsls	r1, r1, #5
    150c:	b2c9      	uxtb	r1, r1
    150e:	4b01      	ldr	r3, [pc, #4]	; (1514 <z_arm_irq_priority_set+0x28>)
    1510:	5419      	strb	r1, [r3, r0]
}
    1512:	4770      	bx	lr
    1514:	e000ed14 	.word	0xe000ed14

00001518 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1518:	bf30      	wfi
    b z_SysNmiOnReset
    151a:	f7ff bffd 	b.w	1518 <z_SysNmiOnReset>
    151e:	bf00      	nop

00001520 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1520:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1522:	4b0b      	ldr	r3, [pc, #44]	; (1550 <z_arm_prep_c+0x30>)
    1524:	4a0b      	ldr	r2, [pc, #44]	; (1554 <z_arm_prep_c+0x34>)
    1526:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    152a:	609a      	str	r2, [r3, #8]
    152c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1530:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1534:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1538:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    153c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1540:	f002 fbf2 	bl	3d28 <z_bss_zero>
	z_data_copy();
    1544:	f003 faf2 	bl	4b2c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1548:	f000 f9dc 	bl	1904 <z_arm_interrupt_init>
	z_cstart();
    154c:	f002 fc48 	bl	3de0 <z_cstart>
    1550:	e000ed00 	.word	0xe000ed00
    1554:	00000000 	.word	0x00000000

00001558 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1558:	4a0a      	ldr	r2, [pc, #40]	; (1584 <arch_swap+0x2c>)
    155a:	6893      	ldr	r3, [r2, #8]
    155c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    1560:	4909      	ldr	r1, [pc, #36]	; (1588 <arch_swap+0x30>)
    1562:	6809      	ldr	r1, [r1, #0]
    1564:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1568:	4908      	ldr	r1, [pc, #32]	; (158c <arch_swap+0x34>)
    156a:	684b      	ldr	r3, [r1, #4]
    156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1570:	604b      	str	r3, [r1, #4]
    1572:	2300      	movs	r3, #0
    1574:	f383 8811 	msr	BASEPRI, r3
    1578:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    157c:	6893      	ldr	r3, [r2, #8]
}
    157e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    1582:	4770      	bx	lr
    1584:	20000968 	.word	0x20000968
    1588:	00006c38 	.word	0x00006c38
    158c:	e000ed00 	.word	0xe000ed00

00001590 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1590:	4914      	ldr	r1, [pc, #80]	; (15e4 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1592:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1594:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1598:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    159a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    159e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    15a2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    15a4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    15a8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    15ac:	4f0e      	ldr	r7, [pc, #56]	; (15e8 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    15ae:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    15b2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    15b4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    15b6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    15b8:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    15bc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    15be:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    15c2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    15c6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    15ca:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    15ce:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    15d2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    15d6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    15d8:	f003 ffea 	bl	55b0 <configure_builtin_stack_guard>
    pop {r2, lr}
    15dc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    15e0:	4770      	bx	lr
    15e2:	0000      	.short	0x0000
    ldr r1, =_kernel
    15e4:	20000968 	.word	0x20000968
    ldr v4, =_SCS_ICSR
    15e8:	e000ed04 	.word	0xe000ed04

000015ec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    15ec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    15f0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    15f2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    15f6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    15fa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    15fc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1600:	2902      	cmp	r1, #2
    beq _oops
    1602:	d0ff      	beq.n	1604 <_oops>

00001604 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1604:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1606:	f003 ffc1 	bl	558c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    160a:	bd01      	pop	{r0, pc}

0000160c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    160c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    160e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    1612:	490e      	ldr	r1, [pc, #56]	; (164c <arch_new_thread+0x40>)
    1614:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    1618:	f021 0101 	bic.w	r1, r1, #1
    161c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1620:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1624:	9b01      	ldr	r3, [sp, #4]
    1626:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    162a:	9b02      	ldr	r3, [sp, #8]
    162c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1630:	9b03      	ldr	r3, [sp, #12]
    1632:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1636:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    163a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    163e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1640:	2300      	movs	r3, #0
    1642:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1646:	bc10      	pop	{r4}
    1648:	4770      	bx	lr
    164a:	bf00      	nop
    164c:	0000542f 	.word	0x0000542f

00001650 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1650:	4b09      	ldr	r3, [pc, #36]	; (1678 <arch_switch_to_main_thread+0x28>)
    1652:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    1654:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1658:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    165c:	4610      	mov	r0, r2
    165e:	f381 8809 	msr	PSP, r1
    1662:	2100      	movs	r1, #0
    1664:	b663      	cpsie	if
    1666:	f381 8811 	msr	BASEPRI, r1
    166a:	f3bf 8f6f 	isb	sy
    166e:	2200      	movs	r2, #0
    1670:	2300      	movs	r3, #0
    1672:	f003 fedc 	bl	542e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1676:	bf00      	nop
    1678:	20000968 	.word	0x20000968

0000167c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    167c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    167e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1680:	4a0b      	ldr	r2, [pc, #44]	; (16b0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1682:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1684:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1686:	bf1e      	ittt	ne
	movne	r1, #0
    1688:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    168a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    168c:	f004 fe82 	blne	6394 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1690:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1692:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1696:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    169a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    169e:	4905      	ldr	r1, [pc, #20]	; (16b4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    16a0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    16a2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    16a4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    16a6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    16aa:	4903      	ldr	r1, [pc, #12]	; (16b8 <_isr_wrapper+0x3c>)
	bx r1
    16ac:	4708      	bx	r1
    16ae:	0000      	.short	0x0000
	ldr r2, =_kernel
    16b0:	20000968 	.word	0x20000968
	ldr r1, =_sw_isr_table
    16b4:	0000679c 	.word	0x0000679c
	ldr r1, =z_arm_int_exit
    16b8:	000016bd 	.word	0x000016bd

000016bc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    16bc:	4b04      	ldr	r3, [pc, #16]	; (16d0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    16be:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    16c0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    16c2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    16c4:	d003      	beq.n	16ce <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    16c6:	4903      	ldr	r1, [pc, #12]	; (16d4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    16c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    16cc:	600a      	str	r2, [r1, #0]

000016ce <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    16ce:	4770      	bx	lr
	ldr r3, =_kernel
    16d0:	20000968 	.word	0x20000968
	ldr r1, =_SCS_ICSR
    16d4:	e000ed04 	.word	0xe000ed04

000016d8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    16d8:	b510      	push	{r4, lr}
    16da:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    16dc:	4b18      	ldr	r3, [pc, #96]	; (1740 <mem_manage_fault+0x68>)
    16de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    16e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    16e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16e4:	f013 0f02 	tst.w	r3, #2
    16e8:	d00b      	beq.n	1702 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    16ea:	4b15      	ldr	r3, [pc, #84]	; (1740 <mem_manage_fault+0x68>)
    16ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    16ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16f0:	f013 0f80 	tst.w	r3, #128	; 0x80
    16f4:	d005      	beq.n	1702 <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    16f6:	b121      	cbz	r1, 1702 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    16f8:	4a11      	ldr	r2, [pc, #68]	; (1740 <mem_manage_fault+0x68>)
    16fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1700:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1702:	4b0f      	ldr	r3, [pc, #60]	; (1740 <mem_manage_fault+0x68>)
    1704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    170a:	f013 0f10 	tst.w	r3, #16
    170e:	d101      	bne.n	1714 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1710:	4b0b      	ldr	r3, [pc, #44]	; (1740 <mem_manage_fault+0x68>)
    1712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1714:	4b0a      	ldr	r3, [pc, #40]	; (1740 <mem_manage_fault+0x68>)
    1716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1718:	f013 0f20 	tst.w	r3, #32
    171c:	d004      	beq.n	1728 <mem_manage_fault+0x50>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    171e:	4a08      	ldr	r2, [pc, #32]	; (1740 <mem_manage_fault+0x68>)
    1720:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1726:	6253      	str	r3, [r2, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1728:	4a05      	ldr	r2, [pc, #20]	; (1740 <mem_manage_fault+0x68>)
    172a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    172c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1730:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1732:	2101      	movs	r1, #1
    1734:	f003 ff41 	bl	55ba <memory_fault_recoverable>
    1738:	7020      	strb	r0, [r4, #0]

	return reason;
}
    173a:	2000      	movs	r0, #0
    173c:	bd10      	pop	{r4, pc}
    173e:	bf00      	nop
    1740:	e000ed00 	.word	0xe000ed00

00001744 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1744:	b510      	push	{r4, lr}
    1746:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1748:	4b12      	ldr	r3, [pc, #72]	; (1794 <bus_fault+0x50>)
    174a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    174c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1750:	f413 7f00 	tst.w	r3, #512	; 0x200
    1754:	d00b      	beq.n	176e <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1756:	4b0f      	ldr	r3, [pc, #60]	; (1794 <bus_fault+0x50>)
    1758:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    175c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1760:	d005      	beq.n	176e <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1762:	b121      	cbz	r1, 176e <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1764:	4a0b      	ldr	r2, [pc, #44]	; (1794 <bus_fault+0x50>)
    1766:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1768:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    176c:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    176e:	4b09      	ldr	r3, [pc, #36]	; (1794 <bus_fault+0x50>)
    1770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1774:	f413 7f80 	tst.w	r3, #256	; 0x100
    1778:	d101      	bne.n	177e <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    177a:	4b06      	ldr	r3, [pc, #24]	; (1794 <bus_fault+0x50>)
    177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    177e:	4a05      	ldr	r2, [pc, #20]	; (1794 <bus_fault+0x50>)
    1780:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1782:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1786:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1788:	2101      	movs	r1, #1
    178a:	f003 ff16 	bl	55ba <memory_fault_recoverable>
    178e:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1790:	2000      	movs	r0, #0
    1792:	bd10      	pop	{r4, pc}
    1794:	e000ed00 	.word	0xe000ed00

00001798 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1798:	4b0a      	ldr	r3, [pc, #40]	; (17c4 <usage_fault+0x2c>)
    179a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    179c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    179e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    17a0:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    17a4:	d10b      	bne.n	17be <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    17a6:	4b07      	ldr	r3, [pc, #28]	; (17c4 <usage_fault+0x2c>)
    17a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    17aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    17ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    17ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    17b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17b2:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    17b6:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    17ba:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    17bc:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    17be:	2002      	movs	r0, #2
    17c0:	e7f1      	b.n	17a6 <usage_fault+0xe>
    17c2:	bf00      	nop
    17c4:	e000ed00 	.word	0xe000ed00

000017c8 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    17c8:	b508      	push	{r3, lr}
    17ca:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    17cc:	2300      	movs	r3, #0
    17ce:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    17d0:	4b1b      	ldr	r3, [pc, #108]	; (1840 <hard_fault+0x78>)
    17d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    17d4:	f010 0002 	ands.w	r0, r0, #2
    17d8:	d12e      	bne.n	1838 <hard_fault+0x70>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    17da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    17dc:	2b00      	cmp	r3, #0
    17de:	db2c      	blt.n	183a <hard_fault+0x72>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    17e0:	4b17      	ldr	r3, [pc, #92]	; (1840 <hard_fault+0x78>)
    17e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    17e4:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    17e8:	d028      	beq.n	183c <hard_fault+0x74>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    17ea:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    17ee:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    17f2:	f64d 7302 	movw	r3, #57090	; 0xdf02
    17f6:	429a      	cmp	r2, r3
    17f8:	d00f      	beq.n	181a <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    17fa:	4b11      	ldr	r3, [pc, #68]	; (1840 <hard_fault+0x78>)
    17fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    1800:	b973      	cbnz	r3, 1820 <hard_fault+0x58>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    1802:	4b0f      	ldr	r3, [pc, #60]	; (1840 <hard_fault+0x78>)
    1804:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    1808:	b983      	cbnz	r3, 182c <hard_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    180a:	4b0d      	ldr	r3, [pc, #52]	; (1840 <hard_fault+0x78>)
    180c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    180e:	b29b      	uxth	r3, r3
    1810:	b19b      	cbz	r3, 183a <hard_fault+0x72>
			reason = usage_fault(esf);
    1812:	4660      	mov	r0, ip
    1814:	f7ff ffc0 	bl	1798 <usage_fault>
    1818:	e00f      	b.n	183a <hard_fault+0x72>
			reason = esf->basic.r0;
    181a:	f8dc 0000 	ldr.w	r0, [ip]
    181e:	e00c      	b.n	183a <hard_fault+0x72>
			reason = mem_manage_fault(esf, 1, recoverable);
    1820:	460a      	mov	r2, r1
    1822:	2101      	movs	r1, #1
    1824:	4660      	mov	r0, ip
    1826:	f7ff ff57 	bl	16d8 <mem_manage_fault>
    182a:	e006      	b.n	183a <hard_fault+0x72>
			reason = bus_fault(esf, 1, recoverable);
    182c:	460a      	mov	r2, r1
    182e:	2101      	movs	r1, #1
    1830:	4660      	mov	r0, ip
    1832:	f7ff ff87 	bl	1744 <bus_fault>
    1836:	e000      	b.n	183a <hard_fault+0x72>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1838:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    183a:	bd08      	pop	{r3, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    183c:	4618      	mov	r0, r3
	return reason;
    183e:	e7fc      	b.n	183a <hard_fault+0x72>
    1840:	e000ed00 	.word	0xe000ed00

00001844 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1844:	b570      	push	{r4, r5, r6, lr}
    1846:	b08a      	sub	sp, #40	; 0x28
    1848:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    184a:	4b22      	ldr	r3, [pc, #136]	; (18d4 <z_arm_fault+0x90>)
    184c:	6859      	ldr	r1, [r3, #4]
    184e:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1852:	2300      	movs	r3, #0
    1854:	f383 8811 	msr	BASEPRI, r3
    1858:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    185c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1860:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1864:	d115      	bne.n	1892 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1866:	f002 030c 	and.w	r3, r2, #12
    186a:	2b08      	cmp	r3, #8
    186c:	d014      	beq.n	1898 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    186e:	f012 0f08 	tst.w	r2, #8
    1872:	d00b      	beq.n	188c <z_arm_fault+0x48>
	*nested_exc = false;
    1874:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    1876:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    187a:	4620      	mov	r0, r4
    187c:	f003 fea2 	bl	55c4 <fault_handle>
    1880:	4605      	mov	r5, r0
	if (recoverable) {
    1882:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    1886:	b153      	cbz	r3, 189e <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1888:	b00a      	add	sp, #40	; 0x28
    188a:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    188c:	4604      	mov	r4, r0
			*nested_exc = true;
    188e:	2601      	movs	r6, #1
    1890:	e7f1      	b.n	1876 <z_arm_fault+0x32>
	*nested_exc = false;
    1892:	2600      	movs	r6, #0
		return NULL;
    1894:	4634      	mov	r4, r6
    1896:	e7ee      	b.n	1876 <z_arm_fault+0x32>
	*nested_exc = false;
    1898:	2600      	movs	r6, #0
		return NULL;
    189a:	4634      	mov	r4, r6
    189c:	e7eb      	b.n	1876 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    189e:	2220      	movs	r2, #32
    18a0:	4621      	mov	r1, r4
    18a2:	a801      	add	r0, sp, #4
    18a4:	f003 ff2c 	bl	5700 <memcpy>
	if (nested_exc) {
    18a8:	b14e      	cbz	r6, 18be <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    18aa:	9b08      	ldr	r3, [sp, #32]
    18ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
    18b0:	b95a      	cbnz	r2, 18ca <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    18b2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    18b6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    18ba:	9308      	str	r3, [sp, #32]
    18bc:	e005      	b.n	18ca <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    18be:	9b08      	ldr	r3, [sp, #32]
    18c0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    18c4:	f023 0301 	bic.w	r3, r3, #1
    18c8:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    18ca:	a901      	add	r1, sp, #4
    18cc:	4628      	mov	r0, r5
    18ce:	f003 fe59 	bl	5584 <z_arm_fatal_error>
    18d2:	e7d9      	b.n	1888 <z_arm_fault+0x44>
    18d4:	e000ed00 	.word	0xe000ed00

000018d8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    18d8:	4b04      	ldr	r3, [pc, #16]	; (18ec <z_arm_fault_init+0x14>)
    18da:	695a      	ldr	r2, [r3, #20]
    18dc:	f042 0210 	orr.w	r2, r2, #16
    18e0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    18e2:	695a      	ldr	r2, [r3, #20]
    18e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    18e8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    18ea:	4770      	bx	lr
    18ec:	e000ed00 	.word	0xe000ed00

000018f0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    18f0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    18f4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    18f8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    18fa:	4672      	mov	r2, lr
	bl z_arm_fault
    18fc:	f7ff ffa2 	bl	1844 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1900:	bd01      	pop	{r0, pc}
    1902:	bf00      	nop

00001904 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1904:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1906:	e007      	b.n	1918 <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1908:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    190c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1910:	2120      	movs	r1, #32
    1912:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1916:	3201      	adds	r2, #1
    1918:	2a44      	cmp	r2, #68	; 0x44
    191a:	dc09      	bgt.n	1930 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    191c:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    191e:	2b00      	cmp	r3, #0
    1920:	daf2      	bge.n	1908 <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1922:	f002 010f 	and.w	r1, r2, #15
    1926:	4b03      	ldr	r3, [pc, #12]	; (1934 <z_arm_interrupt_init+0x30>)
    1928:	440b      	add	r3, r1
    192a:	2120      	movs	r1, #32
    192c:	7619      	strb	r1, [r3, #24]
    192e:	e7f2      	b.n	1916 <z_arm_interrupt_init+0x12>
	}
}
    1930:	4770      	bx	lr
    1932:	bf00      	nop
    1934:	e000ecfc 	.word	0xe000ecfc

00001938 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1938:	2000      	movs	r0, #0
    msr CONTROL, r0
    193a:	f380 8814 	msr	CONTROL, r0
    isb
    193e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1942:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1944:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1948:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    194c:	f004 fec8 	bl	66e0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1950:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1952:	490e      	ldr	r1, [pc, #56]	; (198c <__start+0x54>)
    str r0, [r1]
    1954:	6008      	str	r0, [r1, #0]
    dsb
    1956:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    195a:	480d      	ldr	r0, [pc, #52]	; (1990 <__start+0x58>)
    msr msp, r0
    195c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1960:	f000 f840 	bl	19e4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1964:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1966:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    196a:	480a      	ldr	r0, [pc, #40]	; (1994 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    196c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1970:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1972:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1976:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    197a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    197c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    197e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1982:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1986:	f7ff fdcb 	bl	1520 <z_arm_prep_c>
    198a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    198c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1990:	20000f80 	.word	0x20000f80
    ldr r0, =z_interrupt_stacks
    1994:	200010c0 	.word	0x200010c0

00001998 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1998:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    199c:	4905      	ldr	r1, [pc, #20]	; (19b4 <sys_arch_reboot+0x1c>)
    199e:	68ca      	ldr	r2, [r1, #12]
    19a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    19a4:	4b04      	ldr	r3, [pc, #16]	; (19b8 <sys_arch_reboot+0x20>)
    19a6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    19a8:	60cb      	str	r3, [r1, #12]
    19aa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    19ae:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    19b0:	e7fd      	b.n	19ae <sys_arch_reboot+0x16>
    19b2:	bf00      	nop
    19b4:	e000ed00 	.word	0xe000ed00
    19b8:	05fa0004 	.word	0x05fa0004

000019bc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    19bc:	4b08      	ldr	r3, [pc, #32]	; (19e0 <z_arm_clear_arm_mpu_config+0x24>)
    19be:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    19c2:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    19c6:	2300      	movs	r3, #0
    19c8:	e006      	b.n	19d8 <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    19ca:	4a05      	ldr	r2, [pc, #20]	; (19e0 <z_arm_clear_arm_mpu_config+0x24>)
    19cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    19d0:	2100      	movs	r1, #0
    19d2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    19d6:	3301      	adds	r3, #1
    19d8:	4283      	cmp	r3, r0
    19da:	dbf6      	blt.n	19ca <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    19dc:	4770      	bx	lr
    19de:	bf00      	nop
    19e0:	e000ed00 	.word	0xe000ed00

000019e4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    19e4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    19e6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    19e8:	2400      	movs	r4, #0
    19ea:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    19ee:	f7ff ffe5 	bl	19bc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    19f2:	4623      	mov	r3, r4
    19f4:	e008      	b.n	1a08 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    19f6:	f103 0120 	add.w	r1, r3, #32
    19fa:	4a0e      	ldr	r2, [pc, #56]	; (1a34 <z_arm_init_arch_hw_at_boot+0x50>)
    19fc:	f04f 30ff 	mov.w	r0, #4294967295
    1a00:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1a04:	3301      	adds	r3, #1
    1a06:	b2db      	uxtb	r3, r3
    1a08:	2b0f      	cmp	r3, #15
    1a0a:	d9f4      	bls.n	19f6 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1a0c:	2300      	movs	r3, #0
    1a0e:	e008      	b.n	1a22 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1a10:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1a14:	4a07      	ldr	r2, [pc, #28]	; (1a34 <z_arm_init_arch_hw_at_boot+0x50>)
    1a16:	f04f 30ff 	mov.w	r0, #4294967295
    1a1a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1a1e:	3301      	adds	r3, #1
    1a20:	b2db      	uxtb	r3, r3
    1a22:	2b0f      	cmp	r3, #15
    1a24:	d9f4      	bls.n	1a10 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1a26:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1a28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a2c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1a30:	bd10      	pop	{r4, pc}
    1a32:	bf00      	nop
    1a34:	e000e100 	.word	0xe000e100

00001a38 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1a38:	b508      	push	{r3, lr}
	if (_current == thread) {
    1a3a:	4b0a      	ldr	r3, [pc, #40]	; (1a64 <z_impl_k_thread_abort+0x2c>)
    1a3c:	689b      	ldr	r3, [r3, #8]
    1a3e:	4283      	cmp	r3, r0
    1a40:	d002      	beq.n	1a48 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    1a42:	f003 f84b 	bl	4adc <z_thread_abort>
}
    1a46:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1a48:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d0f8      	beq.n	1a42 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a50:	4b05      	ldr	r3, [pc, #20]	; (1a68 <z_impl_k_thread_abort+0x30>)
    1a52:	685a      	ldr	r2, [r3, #4]
    1a54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a58:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1a5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1a60:	625a      	str	r2, [r3, #36]	; 0x24
    1a62:	e7ee      	b.n	1a42 <z_impl_k_thread_abort+0xa>
    1a64:	20000968 	.word	0x20000968
    1a68:	e000ed00 	.word	0xe000ed00

00001a6c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1a6c:	b510      	push	{r4, lr}
    1a6e:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1a70:	4c0a      	ldr	r4, [pc, #40]	; (1a9c <z_arm_configure_static_mpu_regions+0x30>)
    1a72:	4623      	mov	r3, r4
    1a74:	4a0a      	ldr	r2, [pc, #40]	; (1aa0 <z_arm_configure_static_mpu_regions+0x34>)
    1a76:	2101      	movs	r1, #1
    1a78:	480a      	ldr	r0, [pc, #40]	; (1aa4 <z_arm_configure_static_mpu_regions+0x38>)
    1a7a:	f003 fe0c 	bl	5696 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1a7e:	2300      	movs	r3, #0
    1a80:	9301      	str	r3, [sp, #4]
    1a82:	9302      	str	r3, [sp, #8]
    1a84:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1a86:	4b08      	ldr	r3, [pc, #32]	; (1aa8 <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1a88:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1a8a:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1a8c:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1a8e:	2101      	movs	r1, #1
    1a90:	a801      	add	r0, sp, #4
    1a92:	f003 fe04 	bl	569e <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1a96:	b004      	add	sp, #16
    1a98:	bd10      	pop	{r4, pc}
    1a9a:	bf00      	nop
    1a9c:	20070000 	.word	0x20070000
    1aa0:	20000000 	.word	0x20000000
    1aa4:	00006af0 	.word	0x00006af0
    1aa8:	20000190 	.word	0x20000190

00001aac <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    1aac:	4b02      	ldr	r3, [pc, #8]	; (1ab8 <mpu_init+0xc>)
    1aae:	4a03      	ldr	r2, [pc, #12]	; (1abc <mpu_init+0x10>)
    1ab0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    1ab4:	4770      	bx	lr
    1ab6:	bf00      	nop
    1ab8:	e000ed00 	.word	0xe000ed00
    1abc:	0044ffaa 	.word	0x0044ffaa

00001ac0 <region_init>:
{
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1ac0:	680b      	ldr	r3, [r1, #0]
    1ac2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    1ac6:	f891 c008 	ldrb.w	ip, [r1, #8]
    1aca:	f00c 031f 	and.w	r3, ip, #31
    1ace:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1ad0:	68cb      	ldr	r3, [r1, #12]
    1ad2:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1ad6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    1ada:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1ade:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    1ae2:	4904      	ldr	r1, [pc, #16]	; (1af4 <region_init+0x34>)
    1ae4:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    1ae8:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    1aec:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1af0:	4770      	bx	lr
    1af2:	bf00      	nop
    1af4:	e000ed00 	.word	0xe000ed00

00001af8 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1afc:	b087      	sub	sp, #28
    1afe:	4681      	mov	r9, r0
    1b00:	9100      	str	r1, [sp, #0]
    1b02:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    1b04:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    1b06:	2700      	movs	r7, #0
    1b08:	e038      	b.n	1b7c <mpu_configure_regions_and_partition+0x84>
	return -EINVAL;
    1b0a:	f06f 0615 	mvn.w	r6, #21
    1b0e:	e058      	b.n	1bc2 <mpu_configure_regions_and_partition+0xca>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    1b10:	45d8      	cmp	r8, fp
    1b12:	d171      	bne.n	1bf8 <mpu_configure_regions_and_partition+0x100>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    1b14:	4629      	mov	r1, r5
    1b16:	b2f0      	uxtb	r0, r6
    1b18:	f003 fd9e 	bl	5658 <mpu_configure_region>
    1b1c:	e02d      	b.n	1b7a <mpu_configure_regions_and_partition+0x82>
	MPU->RNR = index;
    1b1e:	4b5f      	ldr	r3, [pc, #380]	; (1c9c <mpu_configure_regions_and_partition+0x1a4>)
    1b20:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1b24:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    1b28:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
    1b2c:	f022 021f 	bic.w	r2, r2, #31
    1b30:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1b32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1b36:	4629      	mov	r1, r5
    1b38:	b2e0      	uxtb	r0, r4
    1b3a:	f003 fd8d 	bl	5658 <mpu_configure_region>
    1b3e:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1b40:	f110 0f16 	cmn.w	r0, #22
    1b44:	f000 80a3 	beq.w	1c8e <mpu_configure_regions_and_partition+0x196>
				return reg_index;
			}

			reg_index++;
    1b48:	3401      	adds	r4, #1
    1b4a:	e016      	b.n	1b7a <mpu_configure_regions_and_partition+0x82>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1b4c:	3b01      	subs	r3, #1
	MPU->RNR = index;
    1b4e:	4953      	ldr	r1, [pc, #332]	; (1c9c <mpu_configure_regions_and_partition+0x1a4>)
    1b50:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1b54:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
    1b58:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1b5c:	f023 031f 	bic.w	r3, r3, #31
    1b60:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1b62:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1b66:	4629      	mov	r1, r5
    1b68:	b2e0      	uxtb	r0, r4
    1b6a:	f003 fd75 	bl	5658 <mpu_configure_region>
    1b6e:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1b70:	f110 0f16 	cmn.w	r0, #22
    1b74:	f000 808b 	beq.w	1c8e <mpu_configure_regions_and_partition+0x196>
				return reg_index;
			}

			reg_index++;
    1b78:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    1b7a:	3701      	adds	r7, #1
    1b7c:	9b00      	ldr	r3, [sp, #0]
    1b7e:	429f      	cmp	r7, r3
    1b80:	f280 8085 	bge.w	1c8e <mpu_configure_regions_and_partition+0x196>
		if (regions[i].size == 0U) {
    1b84:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    1b88:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    1b8c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    1b90:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1b94:	f1b8 0f00 	cmp.w	r8, #0
    1b98:	d0ef      	beq.n	1b7a <mpu_configure_regions_and_partition+0x82>
		if (do_sanity_check &&
    1b9a:	9b01      	ldr	r3, [sp, #4]
    1b9c:	b123      	cbz	r3, 1ba8 <mpu_configure_regions_and_partition+0xb0>
			(!mpu_partition_is_valid(&regions[i]))) {
    1b9e:	4628      	mov	r0, r5
    1ba0:	f003 fd3d 	bl	561e <mpu_partition_is_valid>
		if (do_sanity_check &&
    1ba4:	2800      	cmp	r0, #0
    1ba6:	d06e      	beq.n	1c86 <mpu_configure_regions_and_partition+0x18e>
			get_region_index(regions[i].start, regions[i].size);
    1ba8:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1bac:	4658      	mov	r0, fp
    1bae:	f003 fd2c 	bl	560a <arm_cmse_mpu_region_get>
    1bb2:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1bb4:	eb08 000b 	add.w	r0, r8, fp
    1bb8:	3801      	subs	r0, #1
    1bba:	f003 fd26 	bl	560a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1bbe:	4286      	cmp	r6, r0
    1bc0:	d1a3      	bne.n	1b0a <mpu_configure_regions_and_partition+0x12>
		if ((u_reg_index == -EINVAL) ||
    1bc2:	f116 0f16 	cmn.w	r6, #22
    1bc6:	d061      	beq.n	1c8c <mpu_configure_regions_and_partition+0x194>
    1bc8:	42b4      	cmp	r4, r6
    1bca:	dd64      	ble.n	1c96 <mpu_configure_regions_and_partition+0x19e>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    1bcc:	4630      	mov	r0, r6
	MPU->RNR = index;
    1bce:	4b33      	ldr	r3, [pc, #204]	; (1c9c <mpu_configure_regions_and_partition+0x1a4>)
    1bd0:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1bd4:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    1bd8:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
    1bdc:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1be0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    1be4:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1be8:	f859 300a 	ldr.w	r3, [r9, sl]
    1bec:	686a      	ldr	r2, [r5, #4]
    1bee:	441a      	add	r2, r3
    1bf0:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    1bf4:	4299      	cmp	r1, r3
    1bf6:	d08b      	beq.n	1b10 <mpu_configure_regions_and_partition+0x18>
		} else if (regions[i].start == u_reg_base) {
    1bf8:	4299      	cmp	r1, r3
    1bfa:	d090      	beq.n	1b1e <mpu_configure_regions_and_partition+0x26>
		} else if (reg_last == u_reg_last) {
    1bfc:	45d8      	cmp	r8, fp
    1bfe:	d0a5      	beq.n	1b4c <mpu_configure_regions_and_partition+0x54>
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1c00:	3b01      	subs	r3, #1
	MPU->RNR = index;
    1c02:	4926      	ldr	r1, [pc, #152]	; (1c9c <mpu_configure_regions_and_partition+0x1a4>)
    1c04:	4606      	mov	r6, r0
    1c06:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1c0a:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
    1c0e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1c12:	f023 031f 	bic.w	r3, r3, #31
    1c16:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1c18:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1c1c:	4629      	mov	r1, r5
    1c1e:	b2e0      	uxtb	r0, r4
    1c20:	f003 fd1a 	bl	5658 <mpu_configure_region>
    1c24:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1c26:	f110 0f16 	cmn.w	r0, #22
    1c2a:	d030      	beq.n	1c8e <mpu_configure_regions_and_partition+0x196>
				return reg_index;
			}
			reg_index++;
    1c2c:	3001      	adds	r0, #1
	MPU->RNR = index;
    1c2e:	4b1b      	ldr	r3, [pc, #108]	; (1c9c <mpu_configure_regions_and_partition+0x1a4>)
    1c30:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    1c34:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    1c38:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1c3c:	f361 0204 	bfi	r2, r1, #0, #5
    1c40:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1c44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    1c48:	f3c3 0342 	ubfx	r3, r3, #1, #3
    1c4c:	b2d2      	uxtb	r2, r2
    1c4e:	f363 1247 	bfi	r2, r3, #5, #3
    1c52:	f88d 2010 	strb.w	r2, [sp, #16]
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
				&fill_region.attr);
			fill_region.base = regions[i].start +
    1c56:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    1c5a:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    1c5c:	4413      	add	r3, r2
    1c5e:	9302      	str	r3, [sp, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
    1c60:	f023 031f 	bic.w	r3, r3, #31
    1c64:	eba8 080b 	sub.w	r8, r8, fp
    1c68:	4443      	add	r3, r8
    1c6a:	3b01      	subs	r3, #1
    1c6c:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    1c70:	9305      	str	r3, [sp, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
    1c72:	a902      	add	r1, sp, #8
    1c74:	b2c0      	uxtb	r0, r0
    1c76:	f003 fce4 	bl	5642 <region_allocate_and_init>
    1c7a:	4604      	mov	r4, r0
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
    1c7c:	f110 0f16 	cmn.w	r0, #22
    1c80:	d005      	beq.n	1c8e <mpu_configure_regions_and_partition+0x196>
				return reg_index;
			}

			reg_index++;
    1c82:	3401      	adds	r4, #1
    1c84:	e779      	b.n	1b7a <mpu_configure_regions_and_partition+0x82>
			return -EINVAL;
    1c86:	f06f 0415 	mvn.w	r4, #21
    1c8a:	e000      	b.n	1c8e <mpu_configure_regions_and_partition+0x196>
			return -EINVAL;
    1c8c:	4634      	mov	r4, r6
		}
	}

	return reg_index;
}
    1c8e:	4620      	mov	r0, r4
    1c90:	b007      	add	sp, #28
    1c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    1c96:	f06f 0415 	mvn.w	r4, #21
    1c9a:	e7f8      	b.n	1c8e <mpu_configure_regions_and_partition+0x196>
    1c9c:	e000ed00 	.word	0xe000ed00

00001ca0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1ca0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1ca2:	4c03      	ldr	r4, [pc, #12]	; (1cb0 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1ca4:	2301      	movs	r3, #1
    1ca6:	7822      	ldrb	r2, [r4, #0]
    1ca8:	f7ff ff26 	bl	1af8 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1cac:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1cae:	bd10      	pop	{r4, pc}
    1cb0:	20000b7c 	.word	0x20000b7c

00001cb4 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    1cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cb8:	4607      	mov	r7, r0
    1cba:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1cbc:	2400      	movs	r4, #0
    1cbe:	e003      	b.n	1cc8 <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
    1cc0:	f06f 0515 	mvn.w	r5, #21
    1cc4:	e017      	b.n	1cf6 <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1cc6:	3401      	adds	r4, #1
    1cc8:	45a0      	cmp	r8, r4
    1cca:	dd43      	ble.n	1d54 <mpu_mark_areas_for_dynamic_regions+0xa0>
		if (dyn_region_areas[i].size == 0U) {
    1ccc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1cd0:	009a      	lsls	r2, r3, #2
    1cd2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    1cd6:	685e      	ldr	r6, [r3, #4]
    1cd8:	2e00      	cmp	r6, #0
    1cda:	d0f4      	beq.n	1cc6 <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1cdc:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1ce0:	4648      	mov	r0, r9
    1ce2:	f003 fc92 	bl	560a <arm_cmse_mpu_region_get>
    1ce6:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1ce8:	eb06 0009 	add.w	r0, r6, r9
    1cec:	3801      	subs	r0, #1
    1cee:	f003 fc8c 	bl	560a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1cf2:	4285      	cmp	r5, r0
    1cf4:	d1e4      	bne.n	1cc0 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
    1cf6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1cfa:	4a1a      	ldr	r2, [pc, #104]	; (1d64 <mpu_mark_areas_for_dynamic_regions+0xb0>)
    1cfc:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1d00:	f115 0f16 	cmn.w	r5, #22
    1d04:	d027      	beq.n	1d56 <mpu_mark_areas_for_dynamic_regions+0xa2>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1d06:	4b18      	ldr	r3, [pc, #96]	; (1d68 <mpu_mark_areas_for_dynamic_regions+0xb4>)
    1d08:	781b      	ldrb	r3, [r3, #0]
    1d0a:	42ab      	cmp	r3, r5
    1d0c:	dd26      	ble.n	1d5c <mpu_mark_areas_for_dynamic_regions+0xa8>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    1d0e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1d12:	4b14      	ldr	r3, [pc, #80]	; (1d64 <mpu_mark_areas_for_dynamic_regions+0xb0>)
    1d14:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	MPU->RNR = index;
    1d18:	4b14      	ldr	r3, [pc, #80]	; (1d6c <mpu_mark_areas_for_dynamic_regions+0xb8>)
    1d1a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
	MPU->RNR = index;
    1d1e:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    1d22:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
    1d26:	7b10      	ldrb	r0, [r2, #12]
    1d28:	f365 0004 	bfi	r0, r5, #0, #5
    1d2c:	7310      	strb	r0, [r2, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1d2e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
    1d32:	f3c0 0042 	ubfx	r0, r0, #1, #3
    1d36:	7b15      	ldrb	r5, [r2, #12]
    1d38:	f360 1547 	bfi	r5, r0, #5, #3
    1d3c:	7315      	strb	r5, [r2, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1d3e:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    1d42:	f020 001f 	bic.w	r0, r0, #31
    1d46:	6050      	str	r0, [r2, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1d48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    1d4c:	f023 031f 	bic.w	r3, r3, #31
    1d50:	6113      	str	r3, [r2, #16]
}
    1d52:	e7b8      	b.n	1cc6 <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    1d54:	2500      	movs	r5, #0
}
    1d56:	4628      	mov	r0, r5
    1d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    1d5c:	f06f 0515 	mvn.w	r5, #21
    1d60:	e7f9      	b.n	1d56 <mpu_mark_areas_for_dynamic_regions+0xa2>
    1d62:	bf00      	nop
    1d64:	2000086c 	.word	0x2000086c
    1d68:	20000b7c 	.word	0x20000b7c
    1d6c:	e000ed00 	.word	0xe000ed00

00001d70 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1d70:	4b04      	ldr	r3, [pc, #16]	; (1d84 <arm_core_mpu_enable+0x14>)
    1d72:	2205      	movs	r2, #5
    1d74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1d78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d7c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1d80:	4770      	bx	lr
    1d82:	bf00      	nop
    1d84:	e000ed00 	.word	0xe000ed00

00001d88 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1d88:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1d8c:	4b02      	ldr	r3, [pc, #8]	; (1d98 <arm_core_mpu_disable+0x10>)
    1d8e:	2200      	movs	r2, #0
    1d90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1d94:	4770      	bx	lr
    1d96:	bf00      	nop
    1d98:	e000ed00 	.word	0xe000ed00

00001d9c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1d9c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1d9e:	4b0e      	ldr	r3, [pc, #56]	; (1dd8 <z_arm_mpu_init+0x3c>)
    1da0:	681d      	ldr	r5, [r3, #0]
    1da2:	2d08      	cmp	r5, #8
    1da4:	d815      	bhi.n	1dd2 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1da6:	f7ff ffef 	bl	1d88 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    1daa:	f7ff fe7f 	bl	1aac <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1dae:	2400      	movs	r4, #0
    1db0:	e007      	b.n	1dc2 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1db2:	4b09      	ldr	r3, [pc, #36]	; (1dd8 <z_arm_mpu_init+0x3c>)
    1db4:	6859      	ldr	r1, [r3, #4]
    1db6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1dba:	4620      	mov	r0, r4
    1dbc:	f7ff fe80 	bl	1ac0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1dc0:	3401      	adds	r4, #1
    1dc2:	42a5      	cmp	r5, r4
    1dc4:	d8f5      	bhi.n	1db2 <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1dc6:	4b05      	ldr	r3, [pc, #20]	; (1ddc <z_arm_mpu_init+0x40>)
    1dc8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1dca:	f7ff ffd1 	bl	1d70 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1dce:	2000      	movs	r0, #0
}
    1dd0:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1dd2:	f04f 30ff 	mov.w	r0, #4294967295
    1dd6:	e7fb      	b.n	1dd0 <z_arm_mpu_init+0x34>
    1dd8:	00006b0c 	.word	0x00006b0c
    1ddc:	20000b7c 	.word	0x20000b7c

00001de0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1de0:	4b01      	ldr	r3, [pc, #4]	; (1de8 <__stdout_hook_install+0x8>)
    1de2:	6018      	str	r0, [r3, #0]
}
    1de4:	4770      	bx	lr
    1de6:	bf00      	nop
    1de8:	20000028 	.word	0x20000028

00001dec <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1dec:	4800      	ldr	r0, [pc, #0]	; (1df0 <get_hf_flags+0x4>)
    1dee:	4770      	bx	lr
    1df0:	20000908 	.word	0x20000908

00001df4 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1df4:	4b03      	ldr	r3, [pc, #12]	; (1e04 <get_subsys+0x10>)
    1df6:	1ac0      	subs	r0, r0, r3
    1df8:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1dfa:	4b03      	ldr	r3, [pc, #12]	; (1e08 <get_subsys+0x14>)
    1dfc:	fb03 f000 	mul.w	r0, r3, r0
    1e00:	4770      	bx	lr
    1e02:	bf00      	nop
    1e04:	20000890 	.word	0x20000890
    1e08:	b6db6db7 	.word	0xb6db6db7

00001e0c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1e0c:	b538      	push	{r3, r4, r5, lr}
    1e0e:	4605      	mov	r5, r0
    1e10:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1e12:	f7ff ffef 	bl	1df4 <get_subsys>
    1e16:	4601      	mov	r1, r0
    1e18:	2240      	movs	r2, #64	; 0x40
    1e1a:	4803      	ldr	r0, [pc, #12]	; (1e28 <onoff_stop+0x1c>)
    1e1c:	f003 fd35 	bl	588a <stop>
    1e20:	4601      	mov	r1, r0
	notify(mgr, res);
    1e22:	4628      	mov	r0, r5
    1e24:	47a0      	blx	r4
}
    1e26:	bd38      	pop	{r3, r4, r5, pc}
    1e28:	0000673c 	.word	0x0000673c

00001e2c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1e2c:	b530      	push	{r4, r5, lr}
    1e2e:	b083      	sub	sp, #12
    1e30:	4605      	mov	r5, r0
    1e32:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1e34:	f7ff ffde 	bl	1df4 <get_subsys>
    1e38:	4601      	mov	r1, r0
    1e3a:	2340      	movs	r3, #64	; 0x40
    1e3c:	9300      	str	r3, [sp, #0]
    1e3e:	4623      	mov	r3, r4
    1e40:	4a05      	ldr	r2, [pc, #20]	; (1e58 <onoff_start+0x2c>)
    1e42:	4806      	ldr	r0, [pc, #24]	; (1e5c <onoff_start+0x30>)
    1e44:	f003 fd3b 	bl	58be <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1e48:	1e01      	subs	r1, r0, #0
    1e4a:	db01      	blt.n	1e50 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    1e4c:	b003      	add	sp, #12
    1e4e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    1e50:	4628      	mov	r0, r5
    1e52:	47a0      	blx	r4
}
    1e54:	e7fa      	b.n	1e4c <onoff_start+0x20>
    1e56:	bf00      	nop
    1e58:	00005907 	.word	0x00005907
    1e5c:	0000673c 	.word	0x0000673c

00001e60 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    1e60:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    1e62:	2805      	cmp	r0, #5
    1e64:	d815      	bhi.n	1e92 <clock_event_handler+0x32>
    1e66:	e8df f000 	tbb	[pc, r0]
    1e6a:	1a03      	.short	0x1a03
    1e6c:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1e70:	2100      	movs	r1, #0
    1e72:	480d      	ldr	r0, [pc, #52]	; (1ea8 <clock_event_handler+0x48>)
    1e74:	f003 fc94 	bl	57a0 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1e78:	6883      	ldr	r3, [r0, #8]
    1e7a:	f013 0f07 	tst.w	r3, #7
    1e7e:	d108      	bne.n	1e92 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1e80:	2100      	movs	r1, #0
    1e82:	4809      	ldr	r0, [pc, #36]	; (1ea8 <clock_event_handler+0x48>)
    1e84:	f003 fcef 	bl	5866 <clkstarted_handle>
    1e88:	e003      	b.n	1e92 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1e8a:	2102      	movs	r1, #2
    1e8c:	4806      	ldr	r0, [pc, #24]	; (1ea8 <clock_event_handler+0x48>)
    1e8e:	f003 fcea 	bl	5866 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    1e92:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1e94:	2103      	movs	r1, #3
    1e96:	4804      	ldr	r0, [pc, #16]	; (1ea8 <clock_event_handler+0x48>)
    1e98:	f003 fce5 	bl	5866 <clkstarted_handle>
		break;
    1e9c:	e7f9      	b.n	1e92 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1e9e:	2101      	movs	r1, #1
    1ea0:	4801      	ldr	r0, [pc, #4]	; (1ea8 <clock_event_handler+0x48>)
    1ea2:	f003 fce0 	bl	5866 <clkstarted_handle>
}
    1ea6:	e7f4      	b.n	1e92 <clock_event_handler+0x32>
    1ea8:	0000673c 	.word	0x0000673c

00001eac <generic_hfclk_start>:
{
    1eac:	b510      	push	{r4, lr}
	__asm__ volatile(
    1eae:	f04f 0320 	mov.w	r3, #32
    1eb2:	f3ef 8411 	mrs	r4, BASEPRI
    1eb6:	f383 8812 	msr	BASEPRI_MAX, r3
    1eba:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1ebe:	4a13      	ldr	r2, [pc, #76]	; (1f0c <generic_hfclk_start+0x60>)
    1ec0:	6813      	ldr	r3, [r2, #0]
    1ec2:	f043 0302 	orr.w	r3, r3, #2
    1ec6:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1ec8:	f013 0f01 	tst.w	r3, #1
    1ecc:	d108      	bne.n	1ee0 <generic_hfclk_start+0x34>
	bool already_started = false;
    1ece:	2300      	movs	r3, #0
	__asm__ volatile(
    1ed0:	f384 8811 	msr	BASEPRI, r4
    1ed4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1ed8:	b99b      	cbnz	r3, 1f02 <generic_hfclk_start+0x56>
	hfclk_start();
    1eda:	f003 fd1c 	bl	5916 <hfclk_start>
}
    1ede:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1ee0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1ee4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1ee8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1eec:	f012 0f01 	tst.w	r2, #1
    1ef0:	d101      	bne.n	1ef6 <generic_hfclk_start+0x4a>
	bool already_started = false;
    1ef2:	2300      	movs	r3, #0
    1ef4:	e7ec      	b.n	1ed0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    1ef6:	f7ff ff79 	bl	1dec <get_hf_flags>
    1efa:	f003 fca1 	bl	5840 <set_on_state>
			already_started = true;
    1efe:	2301      	movs	r3, #1
    1f00:	e7e6      	b.n	1ed0 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    1f02:	2100      	movs	r1, #0
    1f04:	4802      	ldr	r0, [pc, #8]	; (1f10 <generic_hfclk_start+0x64>)
    1f06:	f003 fcae 	bl	5866 <clkstarted_handle>
		return;
    1f0a:	e7e8      	b.n	1ede <generic_hfclk_start+0x32>
    1f0c:	20000930 	.word	0x20000930
    1f10:	0000673c 	.word	0x0000673c

00001f14 <generic_hfclk_stop>:
{
    1f14:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1f16:	4b08      	ldr	r3, [pc, #32]	; (1f38 <generic_hfclk_stop+0x24>)
    1f18:	e8d3 2fef 	ldaex	r2, [r3]
    1f1c:	f022 0102 	bic.w	r1, r2, #2
    1f20:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1f24:	2800      	cmp	r0, #0
    1f26:	d1f7      	bne.n	1f18 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1f28:	f012 0f01 	tst.w	r2, #1
    1f2c:	d000      	beq.n	1f30 <generic_hfclk_stop+0x1c>
}
    1f2e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1f30:	f003 fd05 	bl	593e <hfclk_stop>
    1f34:	e7fb      	b.n	1f2e <generic_hfclk_stop+0x1a>
    1f36:	bf00      	nop
    1f38:	20000930 	.word	0x20000930

00001f3c <api_blocking_start>:
{
    1f3c:	b500      	push	{lr}
    1f3e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1f40:	f8cd d000 	str.w	sp, [sp]
    1f44:	f8cd d004 	str.w	sp, [sp, #4]
    1f48:	2300      	movs	r3, #0
    1f4a:	9302      	str	r3, [sp, #8]
    1f4c:	2301      	movs	r3, #1
    1f4e:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f50:	466b      	mov	r3, sp
    1f52:	4a07      	ldr	r2, [pc, #28]	; (1f70 <api_blocking_start+0x34>)
    1f54:	f003 fccf 	bl	58f6 <api_start>
	if (err < 0) {
    1f58:	2800      	cmp	r0, #0
    1f5a:	db05      	blt.n	1f68 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1f5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1f60:	2300      	movs	r3, #0
    1f62:	4668      	mov	r0, sp
    1f64:	f002 f9b2 	bl	42cc <z_impl_k_sem_take>
}
    1f68:	b005      	add	sp, #20
    1f6a:	f85d fb04 	ldr.w	pc, [sp], #4
    1f6e:	bf00      	nop
    1f70:	00005967 	.word	0x00005967

00001f74 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1f74:	b570      	push	{r4, r5, r6, lr}
    1f76:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f78:	2200      	movs	r2, #0
    1f7a:	2101      	movs	r1, #1
    1f7c:	2005      	movs	r0, #5
    1f7e:	f7ff fab5 	bl	14ec <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1f82:	4811      	ldr	r0, [pc, #68]	; (1fc8 <clk_init+0x54>)
    1f84:	f001 f8e8 	bl	3158 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1f88:	4b10      	ldr	r3, [pc, #64]	; (1fcc <clk_init+0x58>)
    1f8a:	4298      	cmp	r0, r3
    1f8c:	d119      	bne.n	1fc2 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1f8e:	f004 f8b5 	bl	60fc <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1f92:	2400      	movs	r4, #0
    1f94:	2c03      	cmp	r4, #3
    1f96:	d812      	bhi.n	1fbe <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1f98:	4621      	mov	r1, r4
    1f9a:	4630      	mov	r0, r6
    1f9c:	f003 fc00 	bl	57a0 <get_sub_data>
    1fa0:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1fa2:	4621      	mov	r1, r4
    1fa4:	4630      	mov	r0, r6
    1fa6:	f003 fc06 	bl	57b6 <get_onoff_manager>
    1faa:	4909      	ldr	r1, [pc, #36]	; (1fd0 <clk_init+0x5c>)
    1fac:	f003 f9c6 	bl	533c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1fb0:	2800      	cmp	r0, #0
    1fb2:	db05      	blt.n	1fc0 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1fb4:	2301      	movs	r3, #1
    1fb6:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1fb8:	441c      	add	r4, r3
    1fba:	b2e4      	uxtb	r4, r4
    1fbc:	e7ea      	b.n	1f94 <clk_init+0x20>
	}

	return 0;
    1fbe:	2000      	movs	r0, #0
}
    1fc0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1fc2:	f06f 0004 	mvn.w	r0, #4
    1fc6:	e7fb      	b.n	1fc0 <clk_init+0x4c>
    1fc8:	00001e61 	.word	0x00001e61
    1fcc:	0bad0000 	.word	0x0bad0000
    1fd0:	00006b74 	.word	0x00006b74

00001fd4 <lfclk_spinwait>:
{
    1fd4:	b570      	push	{r4, r5, r6, lr}
    1fd6:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1fd8:	2801      	cmp	r0, #1
    1fda:	d107      	bne.n	1fec <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1fdc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1fe0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1fe4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1fe8:	2b02      	cmp	r3, #2
    1fea:	d03f      	beq.n	206c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1fec:	f004 f9bd 	bl	636a <k_is_in_isr>
    1ff0:	b920      	cbnz	r0, 1ffc <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    1ff2:	4b31      	ldr	r3, [pc, #196]	; (20b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb8>)
    1ff4:	781b      	ldrb	r3, [r3, #0]
    1ff6:	b19b      	cbz	r3, 2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
    1ff8:	2300      	movs	r3, #0
    1ffa:	e000      	b.n	1ffe <lfclk_spinwait+0x2a>
    1ffc:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    1ffe:	461c      	mov	r4, r3
    2000:	b183      	cbz	r3, 2024 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24>
	__asm__ volatile(
    2002:	f04f 0320 	mov.w	r3, #32
    2006:	f3ef 8611 	mrs	r6, BASEPRI
    200a:	f383 8812 	msr	BASEPRI_MAX, r3
    200e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    2012:	b9a4      	cbnz	r4, 203e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3e>
    p_reg->INTENCLR = mask;
    2014:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2018:	2202      	movs	r2, #2
    201a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    201e:	e00e      	b.n	203e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2020:	2301      	movs	r3, #1
    2022:	e7ec      	b.n	1ffe <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    2024:	2600      	movs	r6, #0
    2026:	e7f4      	b.n	2012 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x12>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2028:	b30c      	cbz	r4, 206e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    202a:	4630      	mov	r0, r6
    202c:	f7ff fa38 	bl	14a0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2030:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2034:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2038:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    203a:	2b01      	cmp	r3, #1
    203c:	d01c      	beq.n	2078 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x78>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    203e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2042:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    2046:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    204a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    204e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    2052:	d128      	bne.n	20a6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa6>
    return false;
    2054:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2056:	2a00      	cmp	r2, #0
    2058:	d0e6      	beq.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
    205a:	2b02      	cmp	r3, #2
    205c:	d001      	beq.n	2062 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x62>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    205e:	2d01      	cmp	r5, #1
    2060:	d1e2      	bne.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
	if (isr_mode) {
    2062:	b314      	cbz	r4, 20aa <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xaa>
	__asm__ volatile(
    2064:	f386 8811 	msr	BASEPRI, r6
    2068:	f3bf 8f6f 	isb	sy
}
    206c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    206e:	2021      	movs	r0, #33	; 0x21
    2070:	2100      	movs	r1, #0
    2072:	f002 fd01 	bl	4a78 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2076:	e7db      	b.n	2030 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2078:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    207c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2080:	2b00      	cmp	r3, #0
    2082:	d0dc      	beq.n	203e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2084:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2088:	2200      	movs	r2, #0
    208a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    208e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2092:	2202      	movs	r2, #2
    2094:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2098:	4a08      	ldr	r2, [pc, #32]	; (20bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbc>)
    209a:	2120      	movs	r1, #32
    209c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20a0:	2201      	movs	r2, #1
    20a2:	609a      	str	r2, [r3, #8]
}
    20a4:	e7cb      	b.n	203e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3e>
                return true;
    20a6:	2201      	movs	r2, #1
    20a8:	e7d5      	b.n	2056 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x56>
    p_reg->INTENSET = mask;
    20aa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    20ae:	2202      	movs	r2, #2
    20b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    20b4:	e7da      	b.n	206c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6c>
    20b6:	bf00      	nop
    20b8:	20000b7d 	.word	0x20000b7d
    20bc:	e000e100 	.word	0xe000e100

000020c0 <z_nrf_clock_control_lf_on>:
{
    20c0:	b510      	push	{r4, lr}
    20c2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    20c4:	4b0e      	ldr	r3, [pc, #56]	; (2100 <z_nrf_clock_control_lf_on+0x40>)
    20c6:	2101      	movs	r1, #1
    20c8:	e8d3 2fef 	ldaex	r2, [r3]
    20cc:	e8c3 1fe0 	stlex	r0, r1, [r3]
    20d0:	2800      	cmp	r0, #0
    20d2:	d1f9      	bne.n	20c8 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    20d4:	b11a      	cbz	r2, 20de <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    20d6:	1e63      	subs	r3, r4, #1
    20d8:	2b01      	cmp	r3, #1
    20da:	d90d      	bls.n	20f8 <z_nrf_clock_control_lf_on+0x38>
}
    20dc:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    20de:	4809      	ldr	r0, [pc, #36]	; (2104 <z_nrf_clock_control_lf_on+0x44>)
    20e0:	f003 fb69 	bl	57b6 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    20e4:	4908      	ldr	r1, [pc, #32]	; (2108 <z_nrf_clock_control_lf_on+0x48>)
    20e6:	2300      	movs	r3, #0
    20e8:	604b      	str	r3, [r1, #4]
    20ea:	608b      	str	r3, [r1, #8]
    20ec:	60cb      	str	r3, [r1, #12]
    20ee:	2301      	movs	r3, #1
    20f0:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    20f2:	f003 f940 	bl	5376 <onoff_request>
    20f6:	e7ee      	b.n	20d6 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    20f8:	4620      	mov	r0, r4
    20fa:	f7ff ff6b 	bl	1fd4 <lfclk_spinwait>
		break;
    20fe:	e7ed      	b.n	20dc <z_nrf_clock_control_lf_on+0x1c>
    2100:	20000934 	.word	0x20000934
    2104:	0000673c 	.word	0x0000673c
    2108:	20000880 	.word	0x20000880

0000210c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    210c:	b510      	push	{r4, lr}
    210e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    2110:	280a      	cmp	r0, #10
    2112:	d007      	beq.n	2124 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    2114:	4b07      	ldr	r3, [pc, #28]	; (2134 <console_out+0x28>)
    2116:	6818      	ldr	r0, [r3, #0]
    2118:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    211a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    211c:	685b      	ldr	r3, [r3, #4]
    211e:	4798      	blx	r3

	return c;
}
    2120:	4620      	mov	r0, r4
    2122:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    2124:	4b03      	ldr	r3, [pc, #12]	; (2134 <console_out+0x28>)
    2126:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2128:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    212a:	685b      	ldr	r3, [r3, #4]
    212c:	210d      	movs	r1, #13
    212e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    2130:	e7f0      	b.n	2114 <console_out+0x8>
    2132:	bf00      	nop
    2134:	20000938 	.word	0x20000938

00002138 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    2138:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    213a:	4c04      	ldr	r4, [pc, #16]	; (214c <uart_console_hook_install+0x14>)
    213c:	4620      	mov	r0, r4
    213e:	f7ff fe4f 	bl	1de0 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    2142:	4620      	mov	r0, r4
    2144:	f7fe f9a2 	bl	48c <__printk_hook_install>
#endif
}
    2148:	bd10      	pop	{r4, pc}
    214a:	bf00      	nop
    214c:	0000210d 	.word	0x0000210d

00002150 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2150:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2152:	4806      	ldr	r0, [pc, #24]	; (216c <uart_console_init+0x1c>)
    2154:	4b06      	ldr	r3, [pc, #24]	; (2170 <uart_console_init+0x20>)
    2156:	6018      	str	r0, [r3, #0]
    2158:	f004 f87b 	bl	6252 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    215c:	b118      	cbz	r0, 2166 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    215e:	f7ff ffeb 	bl	2138 <uart_console_hook_install>

	return 0;
    2162:	2000      	movs	r0, #0
}
    2164:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2166:	f06f 0012 	mvn.w	r0, #18
    216a:	e7fb      	b.n	2164 <uart_console_init+0x14>
    216c:	00006784 	.word	0x00006784
    2170:	20000938 	.word	0x20000938

00002174 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2174:	b128      	cbz	r0, 2182 <get_dev+0xe>
    2176:	2801      	cmp	r0, #1
    2178:	d101      	bne.n	217e <get_dev+0xa>
    217a:	4803      	ldr	r0, [pc, #12]	; (2188 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    217c:	4770      	bx	lr
	const struct device *dev = NULL;
    217e:	2000      	movs	r0, #0
    2180:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2182:	4802      	ldr	r0, [pc, #8]	; (218c <get_dev+0x18>)
    2184:	4770      	bx	lr
    2186:	bf00      	nop
    2188:	00006754 	.word	0x00006754
    218c:	0000676c 	.word	0x0000676c

00002190 <gpio_nrfx_pin_interrupt_configure>:
{
    2190:	b5f0      	push	{r4, r5, r6, r7, lr}
    2192:	b085      	sub	sp, #20
    2194:	460e      	mov	r6, r1
    2196:	4619      	mov	r1, r3
	return port->config;
    2198:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    219a:	7b1b      	ldrb	r3, [r3, #12]
    219c:	f006 051f 	and.w	r5, r6, #31
    21a0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    21a4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    21a8:	d022      	beq.n	21f0 <gpio_nrfx_pin_interrupt_configure+0x60>
    21aa:	4607      	mov	r7, r0
    21ac:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    21ae:	2300      	movs	r3, #0
    21b0:	9302      	str	r3, [sp, #8]
    21b2:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    21b4:	4610      	mov	r0, r2
    21b6:	f003 fc4d 	bl	5a54 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    21ba:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    21be:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    21c0:	6899      	ldr	r1, [r3, #8]
    21c2:	40f1      	lsrs	r1, r6
    21c4:	f011 0f01 	tst.w	r1, #1
    21c8:	d102      	bne.n	21d0 <gpio_nrfx_pin_interrupt_configure+0x40>
    21ca:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    21ce:	d014      	beq.n	21fa <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    21d0:	2300      	movs	r3, #0
    21d2:	aa02      	add	r2, sp, #8
    21d4:	4619      	mov	r1, r3
    21d6:	4628      	mov	r0, r5
    21d8:	f001 fa52 	bl	3680 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    21dc:	4b1a      	ldr	r3, [pc, #104]	; (2248 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    21de:	4298      	cmp	r0, r3
    21e0:	d12f      	bne.n	2242 <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    21e2:	2101      	movs	r1, #1
    21e4:	4628      	mov	r0, r5
    21e6:	f001 fc2d 	bl	3a44 <nrfx_gpiote_trigger_enable>
	return 0;
    21ea:	2000      	movs	r0, #0
}
    21ec:	b005      	add	sp, #20
    21ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    21f0:	4628      	mov	r0, r5
    21f2:	f001 fc89 	bl	3b08 <nrfx_gpiote_trigger_disable>
		return 0;
    21f6:	2000      	movs	r0, #0
    21f8:	e7f8      	b.n	21ec <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    21fa:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    21fe:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2200:	2a01      	cmp	r2, #1
    2202:	d012      	beq.n	222a <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    2204:	4a11      	ldr	r2, [pc, #68]	; (224c <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2206:	3380      	adds	r3, #128	; 0x80
    2208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    220c:	f013 0f01 	tst.w	r3, #1
    2210:	d1de      	bne.n	21d0 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2212:	f10d 0107 	add.w	r1, sp, #7
    2216:	4628      	mov	r0, r5
    2218:	f001 fbb8 	bl	398c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    221c:	4b0c      	ldr	r3, [pc, #48]	; (2250 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    221e:	4298      	cmp	r0, r3
    2220:	d005      	beq.n	222e <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    2222:	f10d 0307 	add.w	r3, sp, #7
    2226:	9303      	str	r3, [sp, #12]
    2228:	e7d2      	b.n	21d0 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    222a:	4a0a      	ldr	r2, [pc, #40]	; (2254 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    222c:	e7eb      	b.n	2206 <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    222e:	f10d 0007 	add.w	r0, sp, #7
    2232:	f001 fbff 	bl	3a34 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2236:	4b04      	ldr	r3, [pc, #16]	; (2248 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    2238:	4298      	cmp	r0, r3
    223a:	d0f2      	beq.n	2222 <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    223c:	f06f 000b 	mvn.w	r0, #11
    2240:	e7d4      	b.n	21ec <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    2242:	f06f 0004 	mvn.w	r0, #4
    2246:	e7d1      	b.n	21ec <gpio_nrfx_pin_interrupt_configure+0x5c>
    2248:	0bad0000 	.word	0x0bad0000
    224c:	50842500 	.word	0x50842500
    2250:	0bad0004 	.word	0x0bad0004
    2254:	50842800 	.word	0x50842800

00002258 <pin_uninit>:
{
    2258:	b530      	push	{r4, r5, lr}
    225a:	b083      	sub	sp, #12
    225c:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    225e:	f10d 0107 	add.w	r1, sp, #7
    2262:	f001 fb93 	bl	398c <nrfx_gpiote_channel_get>
    2266:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2268:	4620      	mov	r0, r4
    226a:	f001 fc7d 	bl	3b68 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    226e:	4b0b      	ldr	r3, [pc, #44]	; (229c <pin_uninit+0x44>)
    2270:	4298      	cmp	r0, r3
    2272:	d10f      	bne.n	2294 <pin_uninit+0x3c>
	if (free_ch) {
    2274:	429d      	cmp	r5, r3
    2276:	d005      	beq.n	2284 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2278:	4b08      	ldr	r3, [pc, #32]	; (229c <pin_uninit+0x44>)
    227a:	4298      	cmp	r0, r3
    227c:	d107      	bne.n	228e <pin_uninit+0x36>
    227e:	2000      	movs	r0, #0
}
    2280:	b003      	add	sp, #12
    2282:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    2284:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2288:	f001 fbcc 	bl	3a24 <nrfx_gpiote_channel_free>
    228c:	e7f4      	b.n	2278 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    228e:	f06f 0004 	mvn.w	r0, #4
    2292:	e7f5      	b.n	2280 <pin_uninit+0x28>
		return -EIO;
    2294:	f06f 0004 	mvn.w	r0, #4
    2298:	e7f2      	b.n	2280 <pin_uninit+0x28>
    229a:	bf00      	nop
    229c:	0bad0000 	.word	0x0bad0000

000022a0 <gpio_nrfx_pin_configure>:
{
    22a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    22a4:	b087      	sub	sp, #28
	return port->config;
    22a6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    22aa:	f898 300c 	ldrb.w	r3, [r8, #12]
    22ae:	f001 051f 	and.w	r5, r1, #31
    22b2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    22b6:	2a00      	cmp	r2, #0
    22b8:	d043      	beq.n	2342 <gpio_nrfx_pin_configure+0xa2>
    22ba:	460c      	mov	r4, r1
    22bc:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    22be:	2600      	movs	r6, #0
    22c0:	9603      	str	r6, [sp, #12]
    22c2:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    22c4:	f10d 0117 	add.w	r1, sp, #23
    22c8:	4620      	mov	r0, r4
    22ca:	f001 fb5f 	bl	398c <nrfx_gpiote_channel_get>
    22ce:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    22d0:	4633      	mov	r3, r6
    22d2:	aa03      	add	r2, sp, #12
    22d4:	4631      	mov	r1, r6
    22d6:	4628      	mov	r0, r5
    22d8:	f001 f9d2 	bl	3680 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    22dc:	4b2f      	ldr	r3, [pc, #188]	; (239c <gpio_nrfx_pin_configure+0xfc>)
    22de:	4298      	cmp	r0, r3
    22e0:	d159      	bne.n	2396 <gpio_nrfx_pin_configure+0xf6>
	if (free_ch) {
    22e2:	4599      	cmp	r9, r3
    22e4:	d035      	beq.n	2352 <gpio_nrfx_pin_configure+0xb2>
	if (flags & GPIO_OUTPUT) {
    22e6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    22ea:	d041      	beq.n	2370 <gpio_nrfx_pin_configure+0xd0>
		int rv = get_drive(flags, &drive);
    22ec:	f10d 0103 	add.w	r1, sp, #3
    22f0:	4638      	mov	r0, r7
    22f2:	f003 fb3d 	bl	5970 <get_drive>
		if (rv != 0) {
    22f6:	4606      	mov	r6, r0
    22f8:	bb38      	cbnz	r0, 234a <gpio_nrfx_pin_configure+0xaa>
		nrfx_gpiote_output_config_t output_config = {
    22fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    22fe:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2302:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    2306:	bf0c      	ite	eq
    2308:	2301      	moveq	r3, #1
    230a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    230c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2310:	4638      	mov	r0, r7
    2312:	f003 fb73 	bl	59fc <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    2316:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    231a:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    231e:	d01d      	beq.n	235c <gpio_nrfx_pin_configure+0xbc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2320:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2324:	2101      	movs	r1, #1
    2326:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    232a:	609c      	str	r4, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    232c:	2200      	movs	r2, #0
    232e:	a901      	add	r1, sp, #4
    2330:	4628      	mov	r0, r5
    2332:	f001 fa5f 	bl	37f4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2336:	4b19      	ldr	r3, [pc, #100]	; (239c <gpio_nrfx_pin_configure+0xfc>)
    2338:	4298      	cmp	r0, r3
    233a:	d006      	beq.n	234a <gpio_nrfx_pin_configure+0xaa>
    233c:	f06f 0615 	mvn.w	r6, #21
    2340:	e003      	b.n	234a <gpio_nrfx_pin_configure+0xaa>
		return pin_uninit(abs_pin);
    2342:	4628      	mov	r0, r5
    2344:	f7ff ff88 	bl	2258 <pin_uninit>
    2348:	4606      	mov	r6, r0
}
    234a:	4630      	mov	r0, r6
    234c:	b007      	add	sp, #28
    234e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    2352:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2356:	f001 fb65 	bl	3a24 <nrfx_gpiote_channel_free>
    235a:	e7c4      	b.n	22e6 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    235c:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    2360:	d0e4      	beq.n	232c <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2362:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2366:	2301      	movs	r3, #1
    2368:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    236c:	60d4      	str	r4, [r2, #12]
}
    236e:	e7dd      	b.n	232c <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    2370:	4638      	mov	r0, r7
    2372:	f003 fb43 	bl	59fc <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    2376:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    237a:	2300      	movs	r3, #0
    237c:	461a      	mov	r2, r3
    237e:	a902      	add	r1, sp, #8
    2380:	4628      	mov	r0, r5
    2382:	f001 f97d 	bl	3680 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2386:	4b05      	ldr	r3, [pc, #20]	; (239c <gpio_nrfx_pin_configure+0xfc>)
    2388:	4298      	cmp	r0, r3
    238a:	d101      	bne.n	2390 <gpio_nrfx_pin_configure+0xf0>
    238c:	2600      	movs	r6, #0
    238e:	e7dc      	b.n	234a <gpio_nrfx_pin_configure+0xaa>
    2390:	f06f 0615 	mvn.w	r6, #21
    2394:	e7d9      	b.n	234a <gpio_nrfx_pin_configure+0xaa>
		return -EINVAL;
    2396:	f06f 0615 	mvn.w	r6, #21
    239a:	e7d6      	b.n	234a <gpio_nrfx_pin_configure+0xaa>
    239c:	0bad0000 	.word	0x0bad0000

000023a0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    23a0:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    23a2:	f001 fb35 	bl	3a10 <nrfx_gpiote_is_init>
    23a6:	b108      	cbz	r0, 23ac <gpio_nrfx_init+0xc>
		return 0;
    23a8:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    23aa:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    23ac:	f001 fb06 	bl	39bc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    23b0:	4b08      	ldr	r3, [pc, #32]	; (23d4 <gpio_nrfx_init+0x34>)
    23b2:	4298      	cmp	r0, r3
    23b4:	d10a      	bne.n	23cc <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    23b6:	2100      	movs	r1, #0
    23b8:	4807      	ldr	r0, [pc, #28]	; (23d8 <gpio_nrfx_init+0x38>)
    23ba:	f001 fae1 	bl	3980 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    23be:	2200      	movs	r2, #0
    23c0:	2105      	movs	r1, #5
    23c2:	200d      	movs	r0, #13
    23c4:	f7ff f892 	bl	14ec <z_arm_irq_priority_set>
	return 0;
    23c8:	2000      	movs	r0, #0
    23ca:	e7ee      	b.n	23aa <gpio_nrfx_init+0xa>
		return -EIO;
    23cc:	f06f 0004 	mvn.w	r0, #4
    23d0:	e7eb      	b.n	23aa <gpio_nrfx_init+0xa>
    23d2:	bf00      	nop
    23d4:	0bad0000 	.word	0x0bad0000
    23d8:	00005af3 	.word	0x00005af3

000023dc <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    23dc:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    23de:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    23e0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    23e4:	d06f      	beq.n	24c6 <baudrate_set+0xea>
    23e6:	d83a      	bhi.n	245e <baudrate_set+0x82>
    23e8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    23ec:	d06e      	beq.n	24cc <baudrate_set+0xf0>
    23ee:	d90a      	bls.n	2406 <baudrate_set+0x2a>
    23f0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    23f4:	d075      	beq.n	24e2 <baudrate_set+0x106>
    23f6:	d924      	bls.n	2442 <baudrate_set+0x66>
    23f8:	f647 2312 	movw	r3, #31250	; 0x7a12
    23fc:	4299      	cmp	r1, r3
    23fe:	d12b      	bne.n	2458 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2400:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2404:	e013      	b.n	242e <baudrate_set+0x52>
	switch (baudrate) {
    2406:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    240a:	d061      	beq.n	24d0 <baudrate_set+0xf4>
    240c:	d907      	bls.n	241e <baudrate_set+0x42>
    240e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2412:	d063      	beq.n	24dc <baudrate_set+0x100>
    2414:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2418:	d110      	bne.n	243c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    241a:	4b3c      	ldr	r3, [pc, #240]	; (250c <baudrate_set+0x130>)
    241c:	e007      	b.n	242e <baudrate_set+0x52>
	switch (baudrate) {
    241e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2422:	d058      	beq.n	24d6 <baudrate_set+0xfa>
    2424:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2428:	d105      	bne.n	2436 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    242a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    242e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2432:	2000      	movs	r0, #0
    2434:	4770      	bx	lr
	switch (baudrate) {
    2436:	f06f 0015 	mvn.w	r0, #21
    243a:	4770      	bx	lr
    243c:	f06f 0015 	mvn.w	r0, #21
    2440:	4770      	bx	lr
    2442:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2446:	d04e      	beq.n	24e6 <baudrate_set+0x10a>
    2448:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    244c:	d101      	bne.n	2452 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    244e:	4b30      	ldr	r3, [pc, #192]	; (2510 <baudrate_set+0x134>)
    2450:	e7ed      	b.n	242e <baudrate_set+0x52>
	switch (baudrate) {
    2452:	f06f 0015 	mvn.w	r0, #21
    2456:	4770      	bx	lr
    2458:	f06f 0015 	mvn.w	r0, #21
    245c:	4770      	bx	lr
    245e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2462:	d042      	beq.n	24ea <baudrate_set+0x10e>
    2464:	d909      	bls.n	247a <baudrate_set+0x9e>
    2466:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    246a:	d046      	beq.n	24fa <baudrate_set+0x11e>
    246c:	d91f      	bls.n	24ae <baudrate_set+0xd2>
    246e:	4b29      	ldr	r3, [pc, #164]	; (2514 <baudrate_set+0x138>)
    2470:	4299      	cmp	r1, r3
    2472:	d148      	bne.n	2506 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2474:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2478:	e7d9      	b.n	242e <baudrate_set+0x52>
	switch (baudrate) {
    247a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    247e:	d037      	beq.n	24f0 <baudrate_set+0x114>
    2480:	d905      	bls.n	248e <baudrate_set+0xb2>
    2482:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2486:	d10f      	bne.n	24a8 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2488:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    248c:	e7cf      	b.n	242e <baudrate_set+0x52>
	switch (baudrate) {
    248e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    2492:	4299      	cmp	r1, r3
    2494:	d02e      	beq.n	24f4 <baudrate_set+0x118>
    2496:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    249a:	d102      	bne.n	24a2 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    249c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    24a0:	e7c5      	b.n	242e <baudrate_set+0x52>
	switch (baudrate) {
    24a2:	f06f 0015 	mvn.w	r0, #21
    24a6:	4770      	bx	lr
    24a8:	f06f 0015 	mvn.w	r0, #21
    24ac:	4770      	bx	lr
    24ae:	4b1a      	ldr	r3, [pc, #104]	; (2518 <baudrate_set+0x13c>)
    24b0:	4299      	cmp	r1, r3
    24b2:	d025      	beq.n	2500 <baudrate_set+0x124>
    24b4:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    24b8:	d102      	bne.n	24c0 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    24ba:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    24be:	e7b6      	b.n	242e <baudrate_set+0x52>
	switch (baudrate) {
    24c0:	f06f 0015 	mvn.w	r0, #21
    24c4:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    24c6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    24ca:	e7b0      	b.n	242e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    24cc:	4b13      	ldr	r3, [pc, #76]	; (251c <baudrate_set+0x140>)
    24ce:	e7ae      	b.n	242e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    24d0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    24d4:	e7ab      	b.n	242e <baudrate_set+0x52>
	switch (baudrate) {
    24d6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    24da:	e7a8      	b.n	242e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    24dc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    24e0:	e7a5      	b.n	242e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    24e2:	4b0f      	ldr	r3, [pc, #60]	; (2520 <baudrate_set+0x144>)
    24e4:	e7a3      	b.n	242e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    24e6:	4b0f      	ldr	r3, [pc, #60]	; (2524 <baudrate_set+0x148>)
    24e8:	e7a1      	b.n	242e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    24ea:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    24ee:	e79e      	b.n	242e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    24f0:	4b0d      	ldr	r3, [pc, #52]	; (2528 <baudrate_set+0x14c>)
    24f2:	e79c      	b.n	242e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    24f4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    24f8:	e799      	b.n	242e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    24fa:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    24fe:	e796      	b.n	242e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2500:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2504:	e793      	b.n	242e <baudrate_set+0x52>
	switch (baudrate) {
    2506:	f06f 0015 	mvn.w	r0, #21
}
    250a:	4770      	bx	lr
    250c:	0013b000 	.word	0x0013b000
    2510:	004ea000 	.word	0x004ea000
    2514:	000f4240 	.word	0x000f4240
    2518:	0003d090 	.word	0x0003d090
    251c:	00275000 	.word	0x00275000
    2520:	0075c000 	.word	0x0075c000
    2524:	003af000 	.word	0x003af000
    2528:	013a9000 	.word	0x013a9000

0000252c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    252c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2530:	4605      	mov	r5, r0
    2532:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    2534:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2538:	f003 ff17 	bl	636a <k_is_in_isr>
    253c:	b920      	cbnz	r0, 2548 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    253e:	4b16      	ldr	r3, [pc, #88]	; (2598 <uarte_nrfx_poll_out+0x6c>)
    2540:	781b      	ldrb	r3, [r3, #0]
    2542:	b143      	cbz	r3, 2556 <uarte_nrfx_poll_out+0x2a>
    2544:	2300      	movs	r3, #0
    2546:	e000      	b.n	254a <uarte_nrfx_poll_out+0x1e>
    2548:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    254a:	b953      	cbnz	r3, 2562 <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    254c:	4628      	mov	r0, r5
    254e:	f003 fbf6 	bl	5d3e <wait_tx_ready>
    2552:	4606      	mov	r6, r0
    2554:	e013      	b.n	257e <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2556:	2301      	movs	r3, #1
    2558:	e7f7      	b.n	254a <uarte_nrfx_poll_out+0x1e>
    255a:	f384 8811 	msr	BASEPRI, r4
    255e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2562:	f04f 0320 	mov.w	r3, #32
    2566:	f3ef 8411 	mrs	r4, BASEPRI
    256a:	f383 8812 	msr	BASEPRI_MAX, r3
    256e:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    2572:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    2574:	4628      	mov	r0, r5
    2576:	f003 fb94 	bl	5ca2 <is_tx_ready>
    257a:	2800      	cmp	r0, #0
    257c:	d0ed      	beq.n	255a <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    257e:	4641      	mov	r1, r8
    2580:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    2584:	2201      	movs	r2, #1
    2586:	4628      	mov	r0, r5
    2588:	f003 fba5 	bl	5cd6 <tx_start>
	__asm__ volatile(
    258c:	f386 8811 	msr	BASEPRI, r6
    2590:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2598:	20000b7d 	.word	0x20000b7d

0000259c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    259c:	b538      	push	{r3, r4, r5, lr}
    259e:	4605      	mov	r5, r0
    25a0:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    25a2:	f101 0012 	add.w	r0, r1, #18
    25a6:	f000 fe4d 	bl	3244 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    25aa:	4b0a      	ldr	r3, [pc, #40]	; (25d4 <endtx_stoptx_ppi_init+0x38>)
    25ac:	4298      	cmp	r0, r3
    25ae:	d10e      	bne.n	25ce <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    25b0:	7ca3      	ldrb	r3, [r4, #18]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    25b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    25b6:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    25ba:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    25be:	7ca2      	ldrb	r2, [r4, #18]
    25c0:	2301      	movs	r3, #1
    25c2:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    25c4:	4a04      	ldr	r2, [pc, #16]	; (25d8 <endtx_stoptx_ppi_init+0x3c>)
    25c6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    25ca:	2000      	movs	r0, #0
}
    25cc:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    25ce:	f06f 0004 	mvn.w	r0, #4
    25d2:	e7fb      	b.n	25cc <endtx_stoptx_ppi_init+0x30>
    25d4:	0bad0000 	.word	0x0bad0000
    25d8:	50017000 	.word	0x50017000

000025dc <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    25dc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    25e0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    25e4:	4b01      	ldr	r3, [pc, #4]	; (25ec <set_comparator+0x10>)
    25e6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    25ea:	4770      	bx	lr
    25ec:	50015000 	.word	0x50015000

000025f0 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    25f0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    25f4:	4b01      	ldr	r3, [pc, #4]	; (25fc <get_comparator+0xc>)
    25f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    25fa:	4770      	bx	lr
    25fc:	50015000 	.word	0x50015000

00002600 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2604:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2606:	4a02      	ldr	r2, [pc, #8]	; (2610 <event_enable+0x10>)
    2608:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    260c:	4770      	bx	lr
    260e:	bf00      	nop
    2610:	50015000 	.word	0x50015000

00002614 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2618:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    261a:	4a02      	ldr	r2, [pc, #8]	; (2624 <event_disable+0x10>)
    261c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    2620:	4770      	bx	lr
    2622:	bf00      	nop
    2624:	50015000 	.word	0x50015000

00002628 <counter>:
     return p_reg->COUNTER;
    2628:	4b01      	ldr	r3, [pc, #4]	; (2630 <counter+0x8>)
    262a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    262e:	4770      	bx	lr
    2630:	50015000 	.word	0x50015000

00002634 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2634:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2636:	2301      	movs	r3, #1
    2638:	4083      	lsls	r3, r0
    263a:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    263e:	4a0d      	ldr	r2, [pc, #52]	; (2674 <compare_int_lock+0x40>)
    2640:	e8d2 1fef 	ldaex	r1, [r2]
    2644:	ea01 0e0c 	and.w	lr, r1, ip
    2648:	e8c2 efe4 	stlex	r4, lr, [r2]
    264c:	2c00      	cmp	r4, #0
    264e:	d1f7      	bne.n	2640 <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2650:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2654:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    2658:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    265c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2660:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2664:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2668:	420b      	tst	r3, r1
}
    266a:	bf14      	ite	ne
    266c:	2001      	movne	r0, #1
    266e:	2000      	moveq	r0, #0
    2670:	bd10      	pop	{r4, pc}
    2672:	bf00      	nop
    2674:	20000958 	.word	0x20000958

00002678 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    2678:	b570      	push	{r4, r5, r6, lr}
    267a:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    267c:	f003 fc0a 	bl	5e94 <full_int_lock>
    2680:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2686:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    2688:	4a15      	ldr	r2, [pc, #84]	; (26e0 <channel_processing_check_and_clear+0x68>)
    268a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    268e:	4213      	tst	r3, r2
    2690:	d105      	bne.n	269e <channel_processing_check_and_clear+0x26>
	bool result = false;
    2692:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    2694:	4628      	mov	r0, r5
    2696:	f003 fc06 	bl	5ea6 <full_int_unlock>

	return result;
}
    269a:	4630      	mov	r0, r6
    269c:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    269e:	2301      	movs	r3, #1
    26a0:	40a3      	lsls	r3, r4
    26a2:	43db      	mvns	r3, r3
    26a4:	4a0f      	ldr	r2, [pc, #60]	; (26e4 <channel_processing_check_and_clear+0x6c>)
    26a6:	e8d2 1fef 	ldaex	r1, [r2]
    26aa:	ea01 0003 	and.w	r0, r1, r3
    26ae:	e8c2 0fe6 	stlex	r6, r0, [r2]
    26b2:	2e00      	cmp	r6, #0
    26b4:	d1f7      	bne.n	26a6 <channel_processing_check_and_clear+0x2e>
    26b6:	b959      	cbnz	r1, 26d0 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    26b8:	f104 0350 	add.w	r3, r4, #80	; 0x50
    26bc:	009b      	lsls	r3, r3, #2
    26be:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    26c0:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    26c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    26c8:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    26ca:	b113      	cbz	r3, 26d2 <channel_processing_check_and_clear+0x5a>
    26cc:	2301      	movs	r3, #1
    26ce:	e000      	b.n	26d2 <channel_processing_check_and_clear+0x5a>
    26d0:	2301      	movs	r3, #1
		if (result) {
    26d2:	461e      	mov	r6, r3
    26d4:	2b00      	cmp	r3, #0
    26d6:	d0dd      	beq.n	2694 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    26d8:	4620      	mov	r0, r4
    26da:	f003 fbcc 	bl	5e76 <event_clear>
    26de:	e7d9      	b.n	2694 <channel_processing_check_and_clear+0x1c>
    26e0:	50015000 	.word	0x50015000
    26e4:	20000954 	.word	0x20000954

000026e8 <compare_int_unlock>:
	if (key) {
    26e8:	b901      	cbnz	r1, 26ec <compare_int_unlock+0x4>
}
    26ea:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    26ec:	2301      	movs	r3, #1
    26ee:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    26f0:	4a0e      	ldr	r2, [pc, #56]	; (272c <compare_int_unlock+0x44>)
    26f2:	e8d2 1fef 	ldaex	r1, [r2]
    26f6:	4319      	orrs	r1, r3
    26f8:	e8c2 1fec 	stlex	ip, r1, [r2]
    26fc:	f1bc 0f00 	cmp.w	ip, #0
    2700:	d1f7      	bne.n	26f2 <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2706:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    2708:	4a09      	ldr	r2, [pc, #36]	; (2730 <compare_int_unlock+0x48>)
    270a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    270e:	4b09      	ldr	r3, [pc, #36]	; (2734 <compare_int_unlock+0x4c>)
    2710:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2714:	fa23 f000 	lsr.w	r0, r3, r0
    2718:	f010 0f01 	tst.w	r0, #1
    271c:	d0e5      	beq.n	26ea <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    271e:	4b06      	ldr	r3, [pc, #24]	; (2738 <compare_int_unlock+0x50>)
    2720:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2724:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2728:	e7df      	b.n	26ea <compare_int_unlock+0x2>
    272a:	bf00      	nop
    272c:	20000958 	.word	0x20000958
    2730:	50015000 	.word	0x50015000
    2734:	20000954 	.word	0x20000954
    2738:	e000e100 	.word	0xe000e100

0000273c <sys_clock_timeout_handler>:
{
    273c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2740:	4607      	mov	r7, r0
    2742:	4614      	mov	r4, r2
    2744:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    2746:	4610      	mov	r0, r2
    2748:	4619      	mov	r1, r3
    274a:	f003 fba0 	bl	5e8e <absolute_time_to_cc>
    274e:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2750:	4b15      	ldr	r3, [pc, #84]	; (27a8 <sys_clock_timeout_handler+0x6c>)
    2752:	681a      	ldr	r2, [r3, #0]
    2754:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    2756:	601c      	str	r4, [r3, #0]
    2758:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    275a:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    275e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2762:	d309      	bcc.n	2778 <sys_clock_timeout_handler+0x3c>
	return false;
    2764:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2766:	f002 facf 	bl	4d08 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    276a:	4638      	mov	r0, r7
    276c:	f7ff ff40 	bl	25f0 <get_comparator>
    2770:	42a8      	cmp	r0, r5
    2772:	d00e      	beq.n	2792 <sys_clock_timeout_handler+0x56>
}
    2774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2778:	4b0c      	ldr	r3, [pc, #48]	; (27ac <sys_clock_timeout_handler+0x70>)
    277a:	681b      	ldr	r3, [r3, #0]
    277c:	0a1a      	lsrs	r2, r3, #8
    277e:	061b      	lsls	r3, r3, #24
    2780:	eb15 0803 	adds.w	r8, r5, r3
    2784:	f142 0900 	adc.w	r9, r2, #0
    2788:	4b09      	ldr	r3, [pc, #36]	; (27b0 <sys_clock_timeout_handler+0x74>)
    278a:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    278e:	2401      	movs	r4, #1
    2790:	e7e9      	b.n	2766 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    2792:	b11c      	cbz	r4, 279c <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    2794:	4638      	mov	r0, r7
    2796:	f7ff ff33 	bl	2600 <event_enable>
}
    279a:	e7eb      	b.n	2774 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    279c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    27a0:	4638      	mov	r0, r7
    27a2:	f7ff ff1b 	bl	25dc <set_comparator>
    27a6:	e7f5      	b.n	2794 <sys_clock_timeout_handler+0x58>
    27a8:	200001a8 	.word	0x200001a8
    27ac:	2000095c 	.word	0x2000095c
    27b0:	20000190 	.word	0x20000190

000027b4 <z_nrf_rtc_timer_read>:
{
    27b4:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    27b6:	4b0d      	ldr	r3, [pc, #52]	; (27ec <z_nrf_rtc_timer_read+0x38>)
    27b8:	681c      	ldr	r4, [r3, #0]
    27ba:	0a25      	lsrs	r5, r4, #8
    27bc:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    27be:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    27c2:	f7ff ff31 	bl	2628 <counter>
    27c6:	4603      	mov	r3, r0
	val += cntr;
    27c8:	1900      	adds	r0, r0, r4
    27ca:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    27ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    27d2:	d20a      	bcs.n	27ea <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    27d4:	4b06      	ldr	r3, [pc, #24]	; (27f0 <z_nrf_rtc_timer_read+0x3c>)
    27d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    27da:	4290      	cmp	r0, r2
    27dc:	eb71 0303 	sbcs.w	r3, r1, r3
    27e0:	d203      	bcs.n	27ea <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    27e2:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    27e6:	f141 0100 	adc.w	r1, r1, #0
}
    27ea:	bd38      	pop	{r3, r4, r5, pc}
    27ec:	2000095c 	.word	0x2000095c
    27f0:	20000190 	.word	0x20000190

000027f4 <compare_set_nolocks>:
{
    27f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27f6:	4606      	mov	r6, r0
    27f8:	4614      	mov	r4, r2
    27fa:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    27fc:	4610      	mov	r0, r2
    27fe:	4619      	mov	r1, r3
    2800:	f003 fb45 	bl	5e8e <absolute_time_to_cc>
    2804:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2806:	f7ff ffd5 	bl	27b4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    280a:	42a0      	cmp	r0, r4
    280c:	eb71 0305 	sbcs.w	r3, r1, r5
    2810:	d21d      	bcs.n	284e <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    2812:	1a23      	subs	r3, r4, r0
    2814:	eb65 0101 	sbc.w	r1, r5, r1
    2818:	4a19      	ldr	r2, [pc, #100]	; (2880 <compare_set_nolocks+0x8c>)
    281a:	4293      	cmp	r3, r2
    281c:	f171 0300 	sbcs.w	r3, r1, #0
    2820:	d22b      	bcs.n	287a <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
    2822:	4b18      	ldr	r3, [pc, #96]	; (2884 <compare_set_nolocks+0x90>)
    2824:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2828:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    282c:	42ab      	cmp	r3, r5
    282e:	bf08      	it	eq
    2830:	42a2      	cmpeq	r2, r4
    2832:	d016      	beq.n	2862 <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2834:	4639      	mov	r1, r7
    2836:	4630      	mov	r0, r6
    2838:	f003 fb3a 	bl	5eb0 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    283c:	4639      	mov	r1, r7
    283e:	f003 fb16 	bl	5e6e <counter_sub>
    2842:	1900      	adds	r0, r0, r4
    2844:	f145 0300 	adc.w	r3, r5, #0
    2848:	4604      	mov	r4, r0
    284a:	461d      	mov	r5, r3
    284c:	e009      	b.n	2862 <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
    284e:	2301      	movs	r3, #1
    2850:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2852:	4a0d      	ldr	r2, [pc, #52]	; (2888 <compare_set_nolocks+0x94>)
    2854:	e8d2 1fef 	ldaex	r1, [r2]
    2858:	4319      	orrs	r1, r3
    285a:	e8c2 1fe0 	stlex	r0, r1, [r2]
    285e:	2800      	cmp	r0, #0
    2860:	d1f8      	bne.n	2854 <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
    2862:	4b08      	ldr	r3, [pc, #32]	; (2884 <compare_set_nolocks+0x90>)
    2864:	0132      	lsls	r2, r6, #4
    2866:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    286a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    286e:	9906      	ldr	r1, [sp, #24]
    2870:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    2872:	9b07      	ldr	r3, [sp, #28]
    2874:	6073      	str	r3, [r6, #4]
	return ret;
    2876:	2000      	movs	r0, #0
}
    2878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    287a:	f06f 0015 	mvn.w	r0, #21
    287e:	e7fb      	b.n	2878 <compare_set_nolocks+0x84>
    2880:	01000001 	.word	0x01000001
    2884:	20000198 	.word	0x20000198
    2888:	20000954 	.word	0x20000954

0000288c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    288c:	b530      	push	{r4, r5, lr}
    288e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    2890:	2300      	movs	r3, #0
    2892:	4a1d      	ldr	r2, [pc, #116]	; (2908 <sys_clock_driver_init+0x7c>)
    2894:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2898:	2b00      	cmp	r3, #0
    289a:	dd24      	ble.n	28e6 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    289c:	4c1a      	ldr	r4, [pc, #104]	; (2908 <sys_clock_driver_init+0x7c>)
    289e:	2502      	movs	r5, #2
    28a0:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28a4:	4b19      	ldr	r3, [pc, #100]	; (290c <sys_clock_driver_init+0x80>)
    28a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    28aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    28ae:	2200      	movs	r2, #0
    28b0:	2101      	movs	r1, #1
    28b2:	2015      	movs	r0, #21
    28b4:	f7fe fe1a 	bl	14ec <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    28b8:	2015      	movs	r0, #21
    28ba:	f7fe fdfb 	bl	14b4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    28be:	2301      	movs	r3, #1
    28c0:	60a3      	str	r3, [r4, #8]
    28c2:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    28c4:	4a12      	ldr	r2, [pc, #72]	; (2910 <sys_clock_driver_init+0x84>)
    28c6:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    28c8:	2400      	movs	r4, #0
    28ca:	9401      	str	r4, [sp, #4]
    28cc:	4b11      	ldr	r3, [pc, #68]	; (2914 <sys_clock_driver_init+0x88>)
    28ce:	9300      	str	r3, [sp, #0]
    28d0:	4a11      	ldr	r2, [pc, #68]	; (2918 <sys_clock_driver_init+0x8c>)
    28d2:	2300      	movs	r3, #0
    28d4:	4620      	mov	r0, r4
    28d6:	f003 fb26 	bl	5f26 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    28da:	4628      	mov	r0, r5
    28dc:	f7ff fbf0 	bl	20c0 <z_nrf_clock_control_lf_on>

	return 0;
}
    28e0:	4620      	mov	r0, r4
    28e2:	b003      	add	sp, #12
    28e4:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    28e6:	4a0d      	ldr	r2, [pc, #52]	; (291c <sys_clock_driver_init+0x90>)
    28e8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    28ec:	f04f 30ff 	mov.w	r0, #4294967295
    28f0:	f04f 31ff 	mov.w	r1, #4294967295
    28f4:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    28f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    28fc:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    28fe:	4902      	ldr	r1, [pc, #8]	; (2908 <sys_clock_driver_init+0x7c>)
    2900:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2904:	3301      	adds	r3, #1
    2906:	e7c7      	b.n	2898 <sys_clock_driver_init+0xc>
    2908:	50015000 	.word	0x50015000
    290c:	e000e100 	.word	0xe000e100
    2910:	20000958 	.word	0x20000958
    2914:	0000273d 	.word	0x0000273d
    2918:	007fffff 	.word	0x007fffff
    291c:	20000198 	.word	0x20000198

00002920 <process_channel>:
{
    2920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2924:	b082      	sub	sp, #8
    2926:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2928:	f7ff fea6 	bl	2678 <channel_processing_check_and_clear>
    292c:	b910      	cbnz	r0, 2934 <process_channel+0x14>
}
    292e:	b002      	add	sp, #8
    2930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2934:	f7ff ff3e 	bl	27b4 <z_nrf_rtc_timer_read>
    2938:	4682      	mov	sl, r0
    293a:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    293c:	f003 faaa 	bl	5e94 <full_int_lock>
    2940:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    2942:	4b13      	ldr	r3, [pc, #76]	; (2990 <process_channel+0x70>)
    2944:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2948:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    294c:	45c2      	cmp	sl, r8
    294e:	eb76 0309 	sbcs.w	r3, r6, r9
    2952:	d20b      	bcs.n	296c <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2954:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    2956:	4628      	mov	r0, r5
    2958:	f003 faa5 	bl	5ea6 <full_int_unlock>
		if (handler) {
    295c:	2e00      	cmp	r6, #0
    295e:	d0e6      	beq.n	292e <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2960:	9700      	str	r7, [sp, #0]
    2962:	4642      	mov	r2, r8
    2964:	464b      	mov	r3, r9
    2966:	4620      	mov	r0, r4
    2968:	47b0      	blx	r6
}
    296a:	e7e0      	b.n	292e <process_channel+0xe>
			handler = cc_data[chan].callback;
    296c:	4a08      	ldr	r2, [pc, #32]	; (2990 <process_channel+0x70>)
    296e:	0123      	lsls	r3, r4, #4
    2970:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2974:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    2976:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    2978:	2000      	movs	r0, #0
    297a:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    297c:	f04f 32ff 	mov.w	r2, #4294967295
    2980:	f04f 33ff 	mov.w	r3, #4294967295
    2984:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2988:	4620      	mov	r0, r4
    298a:	f7ff fe43 	bl	2614 <event_disable>
    298e:	e7e2      	b.n	2956 <process_channel+0x36>
    2990:	20000198 	.word	0x20000198

00002994 <rtc_nrf_isr>:
{
    2994:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    2996:	4b0e      	ldr	r3, [pc, #56]	; (29d0 <rtc_nrf_isr+0x3c>)
    2998:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    299c:	f013 0f02 	tst.w	r3, #2
    29a0:	d00d      	beq.n	29be <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29a2:	4b0b      	ldr	r3, [pc, #44]	; (29d0 <rtc_nrf_isr+0x3c>)
    29a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    29a8:	b14b      	cbz	r3, 29be <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    29aa:	4b09      	ldr	r3, [pc, #36]	; (29d0 <rtc_nrf_isr+0x3c>)
    29ac:	2200      	movs	r2, #0
    29ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    29b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    29b6:	4a07      	ldr	r2, [pc, #28]	; (29d4 <rtc_nrf_isr+0x40>)
    29b8:	6813      	ldr	r3, [r2, #0]
    29ba:	3301      	adds	r3, #1
    29bc:	6013      	str	r3, [r2, #0]
{
    29be:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    29c0:	2c00      	cmp	r4, #0
    29c2:	dd00      	ble.n	29c6 <rtc_nrf_isr+0x32>
}
    29c4:	bd10      	pop	{r4, pc}
		process_channel(chan);
    29c6:	4620      	mov	r0, r4
    29c8:	f7ff ffaa 	bl	2920 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    29cc:	3401      	adds	r4, #1
    29ce:	e7f7      	b.n	29c0 <rtc_nrf_isr+0x2c>
    29d0:	50015000 	.word	0x50015000
    29d4:	2000095c 	.word	0x2000095c

000029d8 <sys_clock_set_timeout>:
{
    29d8:	b510      	push	{r4, lr}
    29da:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    29dc:	f1b0 3fff 	cmp.w	r0, #4294967295
    29e0:	d006      	beq.n	29f0 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    29e2:	2801      	cmp	r0, #1
    29e4:	dd06      	ble.n	29f4 <sys_clock_set_timeout+0x1c>
    29e6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    29ea:	da05      	bge.n	29f8 <sys_clock_set_timeout+0x20>
    29ec:	1e44      	subs	r4, r0, #1
    29ee:	e004      	b.n	29fa <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    29f0:	480f      	ldr	r0, [pc, #60]	; (2a30 <sys_clock_set_timeout+0x58>)
    29f2:	e7f8      	b.n	29e6 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    29f4:	2400      	movs	r4, #0
    29f6:	e000      	b.n	29fa <sys_clock_set_timeout+0x22>
    29f8:	4c0d      	ldr	r4, [pc, #52]	; (2a30 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    29fa:	f7ff fedb 	bl	27b4 <z_nrf_rtc_timer_read>
    29fe:	4b0d      	ldr	r3, [pc, #52]	; (2a34 <sys_clock_set_timeout+0x5c>)
    2a00:	6819      	ldr	r1, [r3, #0]
    2a02:	685b      	ldr	r3, [r3, #4]
    2a04:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    2a06:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2a0a:	d300      	bcc.n	2a0e <sys_clock_set_timeout+0x36>
		ticks = 0;
    2a0c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2a0e:	4420      	add	r0, r4
    2a10:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    2a12:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    2a16:	d300      	bcc.n	2a1a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    2a18:	4a05      	ldr	r2, [pc, #20]	; (2a30 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    2a1a:	2000      	movs	r0, #0
    2a1c:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2a1e:	9001      	str	r0, [sp, #4]
    2a20:	4905      	ldr	r1, [pc, #20]	; (2a38 <sys_clock_set_timeout+0x60>)
    2a22:	9100      	str	r1, [sp, #0]
    2a24:	f143 0300 	adc.w	r3, r3, #0
    2a28:	f003 fa7d 	bl	5f26 <compare_set>
}
    2a2c:	b002      	add	sp, #8
    2a2e:	bd10      	pop	{r4, pc}
    2a30:	007fffff 	.word	0x007fffff
    2a34:	200001a8 	.word	0x200001a8
    2a38:	0000273d 	.word	0x0000273d

00002a3c <sys_clock_elapsed>:
{
    2a3c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2a3e:	f7ff feb9 	bl	27b4 <z_nrf_rtc_timer_read>
    2a42:	4b02      	ldr	r3, [pc, #8]	; (2a4c <sys_clock_elapsed+0x10>)
    2a44:	681b      	ldr	r3, [r3, #0]
}
    2a46:	1ac0      	subs	r0, r0, r3
    2a48:	bd08      	pop	{r3, pc}
    2a4a:	bf00      	nop
    2a4c:	200001a8 	.word	0x200001a8

00002a50 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
    2a50:	b510      	push	{r4, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    2a52:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    2a56:	d001      	beq.n	2a5c <nrf_pin_configure+0xc>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2a58:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    2a5a:	2100      	movs	r1, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    2a5c:	f3c0 1e81 	ubfx	lr, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    2a60:	f3c0 2c03 	ubfx	ip, r0, #8, #4
    *p_pin = pin_number & 0x1F;
    2a64:	f000 031f 	and.w	r3, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2a68:	f010 0f20 	tst.w	r0, #32
    2a6c:	d110      	bne.n	2a90 <nrf_pin_configure+0x40>
        case 0: return NRF_P0;
    2a6e:	4c09      	ldr	r4, [pc, #36]	; (2a94 <nrf_pin_configure+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2a70:	f103 0080 	add.w	r0, r3, #128	; 0x80
    2a74:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
    2a78:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2a7c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    2a80:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2a84:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2a88:	4319      	orrs	r1, r3
    reg->PIN_CNF[pin_number] = cnf;
    2a8a:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
}
    2a8e:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    2a90:	4c01      	ldr	r4, [pc, #4]	; (2a98 <nrf_pin_configure+0x48>)
    2a92:	e7ed      	b.n	2a70 <nrf_pin_configure+0x20>
    2a94:	50842500 	.word	0x50842500
    2a98:	50842800 	.word	0x50842800

00002a9c <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    2a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aa0:	4606      	mov	r6, r0
    2aa2:	460f      	mov	r7, r1
    2aa4:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2aa6:	2400      	movs	r4, #0
    2aa8:	e015      	b.n	2ad6 <pinctrl_configure_pins+0x3a>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    2aaa:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2aae:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    2ab2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    2ab6:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2aba:	f011 0f20 	tst.w	r1, #32
    2abe:	d15f      	bne.n	2b80 <pinctrl_configure_pins+0xe4>
        case 0: return NRF_P0;
    2ac0:	4dbb      	ldr	r5, [pc, #748]	; (2db0 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2ac2:	2101      	movs	r1, #1
    2ac4:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    2ac8:	60aa      	str	r2, [r5, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2aca:	460a      	mov	r2, r1
    2acc:	5830      	ldr	r0, [r6, r0]
    2ace:	f7ff ffbf 	bl	2a50 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2ad2:	3401      	adds	r4, #1
    2ad4:	b2e4      	uxtb	r4, r4
    2ad6:	42bc      	cmp	r4, r7
    2ad8:	f080 81b0 	bcs.w	2e3c <pinctrl_configure_pins+0x3a0>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2adc:	00a0      	lsls	r0, r4, #2
    2ade:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
    2ae2:	f3c5 2303 	ubfx	r3, r5, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    2ae6:	0c2a      	lsrs	r2, r5, #16
    2ae8:	2a22      	cmp	r2, #34	; 0x22
    2aea:	f200 81a9 	bhi.w	2e40 <pinctrl_configure_pins+0x3a4>
    2aee:	a101      	add	r1, pc, #4	; (adr r1, 2af4 <pinctrl_configure_pins+0x58>)
    2af0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    2af4:	00002aab 	.word	0x00002aab
    2af8:	00002b85 	.word	0x00002b85
    2afc:	00002b9b 	.word	0x00002b9b
    2b00:	00002bc9 	.word	0x00002bc9
    2b04:	00002bdf 	.word	0x00002bdf
    2b08:	00002c0d 	.word	0x00002c0d
    2b0c:	00002c3b 	.word	0x00002c3b
    2b10:	00002e41 	.word	0x00002e41
    2b14:	00002e41 	.word	0x00002e41
    2b18:	00002e41 	.word	0x00002e41
    2b1c:	00002e41 	.word	0x00002e41
    2b20:	00002c51 	.word	0x00002c51
    2b24:	00002c69 	.word	0x00002c69
    2b28:	00002e41 	.word	0x00002e41
    2b2c:	00002e41 	.word	0x00002e41
    2b30:	00002e41 	.word	0x00002e41
    2b34:	00002e41 	.word	0x00002e41
    2b38:	00002e41 	.word	0x00002e41
    2b3c:	00002e41 	.word	0x00002e41
    2b40:	00002e41 	.word	0x00002e41
    2b44:	00002e41 	.word	0x00002e41
    2b48:	00002e41 	.word	0x00002e41
    2b4c:	00002c81 	.word	0x00002c81
    2b50:	00002ccd 	.word	0x00002ccd
    2b54:	00002d19 	.word	0x00002d19
    2b58:	00002d65 	.word	0x00002d65
    2b5c:	00002e41 	.word	0x00002e41
    2b60:	00002e41 	.word	0x00002e41
    2b64:	00002e41 	.word	0x00002e41
    2b68:	00002db9 	.word	0x00002db9
    2b6c:	00002dcf 	.word	0x00002dcf
    2b70:	00002de5 	.word	0x00002de5
    2b74:	00002dfb 	.word	0x00002dfb
    2b78:	00002e11 	.word	0x00002e11
    2b7c:	00002e27 	.word	0x00002e27
        case 1: return NRF_P1;
    2b80:	4d8c      	ldr	r5, [pc, #560]	; (2db4 <pinctrl_configure_pins+0x318>)
    2b82:	e79e      	b.n	2ac2 <pinctrl_configure_pins+0x26>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    2b84:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2b88:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2b8c:	2200      	movs	r2, #0
    2b8e:	4611      	mov	r1, r2
    2b90:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2b94:	f7ff ff5c 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2b98:	e79b      	b.n	2ad2 <pinctrl_configure_pins+0x36>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    2b9a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2b9e:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    2ba2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    2ba6:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2baa:	f011 0f20 	tst.w	r1, #32
    2bae:	d109      	bne.n	2bc4 <pinctrl_configure_pins+0x128>
        case 0: return NRF_P0;
    2bb0:	4d7f      	ldr	r5, [pc, #508]	; (2db0 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2bb2:	2101      	movs	r1, #1
    2bb4:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    2bb8:	60aa      	str	r2, [r5, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2bba:	460a      	mov	r2, r1
    2bbc:	5830      	ldr	r0, [r6, r0]
    2bbe:	f7ff ff47 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2bc2:	e786      	b.n	2ad2 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
    2bc4:	4d7b      	ldr	r5, [pc, #492]	; (2db4 <pinctrl_configure_pins+0x318>)
    2bc6:	e7f4      	b.n	2bb2 <pinctrl_configure_pins+0x116>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    2bc8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2bcc:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2bd0:	2200      	movs	r2, #0
    2bd2:	4611      	mov	r1, r2
    2bd4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2bd8:	f7ff ff3a 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2bdc:	e779      	b.n	2ad2 <pinctrl_configure_pins+0x36>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    2bde:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2be2:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    2be6:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    2bea:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2bee:	f011 0f20 	tst.w	r1, #32
    2bf2:	d109      	bne.n	2c08 <pinctrl_configure_pins+0x16c>
        case 0: return NRF_P0;
    2bf4:	4d6e      	ldr	r5, [pc, #440]	; (2db0 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2bf6:	2101      	movs	r1, #1
    2bf8:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
    2bfc:	60ea      	str	r2, [r5, #12]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2bfe:	2200      	movs	r2, #0
    2c00:	5830      	ldr	r0, [r6, r0]
    2c02:	f7ff ff25 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2c06:	e764      	b.n	2ad2 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
    2c08:	4d6a      	ldr	r5, [pc, #424]	; (2db4 <pinctrl_configure_pins+0x318>)
    2c0a:	e7f4      	b.n	2bf6 <pinctrl_configure_pins+0x15a>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    2c0c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2c10:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    2c14:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    2c18:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c1c:	f011 0f20 	tst.w	r1, #32
    2c20:	d109      	bne.n	2c36 <pinctrl_configure_pins+0x19a>
        case 0: return NRF_P0;
    2c22:	4d63      	ldr	r5, [pc, #396]	; (2db0 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2c24:	2101      	movs	r1, #1
    2c26:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
    2c2a:	60ea      	str	r2, [r5, #12]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2c2c:	460a      	mov	r2, r1
    2c2e:	5830      	ldr	r0, [r6, r0]
    2c30:	f7ff ff0e 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2c34:	e74d      	b.n	2ad2 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
    2c36:	4d5f      	ldr	r5, [pc, #380]	; (2db4 <pinctrl_configure_pins+0x318>)
    2c38:	e7f4      	b.n	2c24 <pinctrl_configure_pins+0x188>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    2c3a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2c3e:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2c42:	2200      	movs	r2, #0
    2c44:	4611      	mov	r1, r2
    2c46:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2c4a:	f7ff ff01 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2c4e:	e740      	b.n	2ad2 <pinctrl_configure_pins+0x36>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    2c50:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2c54:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2c58:	b903      	cbnz	r3, 2c5c <pinctrl_configure_pins+0x1c0>
				 * suitable for TWI/TWIM peripherals (S0D1).
				 * This drive cannot be used always so that
				 * users are able to select e.g. H0D1 or E0E1
				 * in devicetree.
				 */
				drive = NRF_DRIVE_S0D1;
    2c5a:	2306      	movs	r3, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2c5c:	2200      	movs	r2, #0
    2c5e:	4611      	mov	r1, r2
    2c60:	5830      	ldr	r0, [r6, r0]
    2c62:	f7ff fef5 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2c66:	e734      	b.n	2ad2 <pinctrl_configure_pins+0x36>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    2c68:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2c6c:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2c70:	b903      	cbnz	r3, 2c74 <pinctrl_configure_pins+0x1d8>
				drive = NRF_DRIVE_S0D1;
    2c72:	2306      	movs	r3, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2c74:	2200      	movs	r2, #0
    2c76:	4611      	mov	r1, r2
    2c78:	5830      	ldr	r0, [r6, r0]
    2c7a:	f7ff fee9 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2c7e:	e728      	b.n	2ad2 <pinctrl_configure_pins+0x36>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    2c80:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2c84:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    2c88:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    2c8c:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
    2c90:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    2c94:	d10f      	bne.n	2cb6 <pinctrl_configure_pins+0x21a>
    *p_pin = pin_number & 0x1F;
    2c96:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c9a:	094a      	lsrs	r2, r1, #5
    2c9c:	d109      	bne.n	2cb2 <pinctrl_configure_pins+0x216>
        case 0: return NRF_P0;
    2c9e:	4944      	ldr	r1, [pc, #272]	; (2db0 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2ca0:	2201      	movs	r2, #1
    2ca2:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
    2ca4:	60ca      	str	r2, [r1, #12]
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2ca6:	2201      	movs	r2, #1
    2ca8:	4611      	mov	r1, r2
    2caa:	5830      	ldr	r0, [r6, r0]
    2cac:	f7ff fed0 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2cb0:	e70f      	b.n	2ad2 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
    2cb2:	4940      	ldr	r1, [pc, #256]	; (2db4 <pinctrl_configure_pins+0x318>)
    2cb4:	e7f4      	b.n	2ca0 <pinctrl_configure_pins+0x204>
    *p_pin = pin_number & 0x1F;
    2cb6:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2cba:	094a      	lsrs	r2, r1, #5
    2cbc:	d104      	bne.n	2cc8 <pinctrl_configure_pins+0x22c>
        case 0: return NRF_P0;
    2cbe:	493c      	ldr	r1, [pc, #240]	; (2db0 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2cc0:	2201      	movs	r2, #1
    2cc2:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
    2cc4:	608a      	str	r2, [r1, #8]
}
    2cc6:	e7ee      	b.n	2ca6 <pinctrl_configure_pins+0x20a>
        case 1: return NRF_P1;
    2cc8:	493a      	ldr	r1, [pc, #232]	; (2db4 <pinctrl_configure_pins+0x318>)
    2cca:	e7f9      	b.n	2cc0 <pinctrl_configure_pins+0x224>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    2ccc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2cd0:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    2cd4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    2cd8:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
    2cdc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    2ce0:	d10f      	bne.n	2d02 <pinctrl_configure_pins+0x266>
    *p_pin = pin_number & 0x1F;
    2ce2:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ce6:	094a      	lsrs	r2, r1, #5
    2ce8:	d109      	bne.n	2cfe <pinctrl_configure_pins+0x262>
        case 0: return NRF_P0;
    2cea:	4931      	ldr	r1, [pc, #196]	; (2db0 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2cec:	2201      	movs	r2, #1
    2cee:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
    2cf0:	60ca      	str	r2, [r1, #12]
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2cf2:	2201      	movs	r2, #1
    2cf4:	4611      	mov	r1, r2
    2cf6:	5830      	ldr	r0, [r6, r0]
    2cf8:	f7ff feaa 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2cfc:	e6e9      	b.n	2ad2 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
    2cfe:	492d      	ldr	r1, [pc, #180]	; (2db4 <pinctrl_configure_pins+0x318>)
    2d00:	e7f4      	b.n	2cec <pinctrl_configure_pins+0x250>
    *p_pin = pin_number & 0x1F;
    2d02:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2d06:	094a      	lsrs	r2, r1, #5
    2d08:	d104      	bne.n	2d14 <pinctrl_configure_pins+0x278>
        case 0: return NRF_P0;
    2d0a:	4929      	ldr	r1, [pc, #164]	; (2db0 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2d0c:	2201      	movs	r2, #1
    2d0e:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
    2d10:	608a      	str	r2, [r1, #8]
}
    2d12:	e7ee      	b.n	2cf2 <pinctrl_configure_pins+0x256>
        case 1: return NRF_P1;
    2d14:	4927      	ldr	r1, [pc, #156]	; (2db4 <pinctrl_configure_pins+0x318>)
    2d16:	e7f9      	b.n	2d0c <pinctrl_configure_pins+0x270>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    2d18:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2d1c:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    2d20:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    2d24:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
    2d28:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    2d2c:	d10f      	bne.n	2d4e <pinctrl_configure_pins+0x2b2>
    *p_pin = pin_number & 0x1F;
    2d2e:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2d32:	094a      	lsrs	r2, r1, #5
    2d34:	d109      	bne.n	2d4a <pinctrl_configure_pins+0x2ae>
        case 0: return NRF_P0;
    2d36:	491e      	ldr	r1, [pc, #120]	; (2db0 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2d38:	2201      	movs	r2, #1
    2d3a:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
    2d3c:	60ca      	str	r2, [r1, #12]
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2d3e:	2201      	movs	r2, #1
    2d40:	4611      	mov	r1, r2
    2d42:	5830      	ldr	r0, [r6, r0]
    2d44:	f7ff fe84 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2d48:	e6c3      	b.n	2ad2 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
    2d4a:	491a      	ldr	r1, [pc, #104]	; (2db4 <pinctrl_configure_pins+0x318>)
    2d4c:	e7f4      	b.n	2d38 <pinctrl_configure_pins+0x29c>
    *p_pin = pin_number & 0x1F;
    2d4e:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2d52:	094a      	lsrs	r2, r1, #5
    2d54:	d104      	bne.n	2d60 <pinctrl_configure_pins+0x2c4>
        case 0: return NRF_P0;
    2d56:	4916      	ldr	r1, [pc, #88]	; (2db0 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2d58:	2201      	movs	r2, #1
    2d5a:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
    2d5c:	608a      	str	r2, [r1, #8]
}
    2d5e:	e7ee      	b.n	2d3e <pinctrl_configure_pins+0x2a2>
        case 1: return NRF_P1;
    2d60:	4914      	ldr	r1, [pc, #80]	; (2db4 <pinctrl_configure_pins+0x318>)
    2d62:	e7f9      	b.n	2d58 <pinctrl_configure_pins+0x2bc>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    2d64:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2d68:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    2d6c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    2d70:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
    2d74:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    2d78:	d10f      	bne.n	2d9a <pinctrl_configure_pins+0x2fe>
    *p_pin = pin_number & 0x1F;
    2d7a:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2d7e:	094a      	lsrs	r2, r1, #5
    2d80:	d109      	bne.n	2d96 <pinctrl_configure_pins+0x2fa>
        case 0: return NRF_P0;
    2d82:	490b      	ldr	r1, [pc, #44]	; (2db0 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2d84:	2201      	movs	r2, #1
    2d86:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
    2d88:	60ca      	str	r2, [r1, #12]
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2d8a:	2201      	movs	r2, #1
    2d8c:	4611      	mov	r1, r2
    2d8e:	5830      	ldr	r0, [r6, r0]
    2d90:	f7ff fe5e 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2d94:	e69d      	b.n	2ad2 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
    2d96:	4907      	ldr	r1, [pc, #28]	; (2db4 <pinctrl_configure_pins+0x318>)
    2d98:	e7f4      	b.n	2d84 <pinctrl_configure_pins+0x2e8>
    *p_pin = pin_number & 0x1F;
    2d9a:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2d9e:	094a      	lsrs	r2, r1, #5
    2da0:	d104      	bne.n	2dac <pinctrl_configure_pins+0x310>
        case 0: return NRF_P0;
    2da2:	4903      	ldr	r1, [pc, #12]	; (2db0 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2da4:	2201      	movs	r2, #1
    2da6:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
    2da8:	608a      	str	r2, [r1, #8]
}
    2daa:	e7ee      	b.n	2d8a <pinctrl_configure_pins+0x2ee>
        case 1: return NRF_P1;
    2dac:	4901      	ldr	r1, [pc, #4]	; (2db4 <pinctrl_configure_pins+0x318>)
    2dae:	e7f9      	b.n	2da4 <pinctrl_configure_pins+0x308>
    2db0:	50842500 	.word	0x50842500
    2db4:	50842800 	.word	0x50842800
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    2db8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2dbc:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2dc0:	2201      	movs	r2, #1
    2dc2:	2100      	movs	r1, #0
    2dc4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2dc8:	f7ff fe42 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2dcc:	e681      	b.n	2ad2 <pinctrl_configure_pins+0x36>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    2dce:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2dd2:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2dd6:	2201      	movs	r2, #1
    2dd8:	2100      	movs	r1, #0
    2dda:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2dde:	f7ff fe37 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2de2:	e676      	b.n	2ad2 <pinctrl_configure_pins+0x36>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    2de4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2de8:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2dec:	2201      	movs	r2, #1
    2dee:	2100      	movs	r1, #0
    2df0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2df4:	f7ff fe2c 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2df8:	e66b      	b.n	2ad2 <pinctrl_configure_pins+0x36>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    2dfa:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2dfe:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2e02:	2201      	movs	r2, #1
    2e04:	2100      	movs	r1, #0
    2e06:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2e0a:	f7ff fe21 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2e0e:	e660      	b.n	2ad2 <pinctrl_configure_pins+0x36>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    2e10:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2e14:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2e18:	2201      	movs	r2, #1
    2e1a:	2100      	movs	r1, #0
    2e1c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2e20:	f7ff fe16 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2e24:	e655      	b.n	2ad2 <pinctrl_configure_pins+0x36>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    2e26:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2e2a:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2e2e:	2201      	movs	r2, #1
    2e30:	2100      	movs	r1, #0
    2e32:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2e36:	f7ff fe0b 	bl	2a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2e3a:	e64a      	b.n	2ad2 <pinctrl_configure_pins+0x36>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    2e3c:	2000      	movs	r0, #0
    2e3e:	e001      	b.n	2e44 <pinctrl_configure_pins+0x3a8>
		switch (NRF_GET_FUN(pins[i])) {
    2e40:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002e48 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2e48:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e4c:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    2e50:	f002 0203 	and.w	r2, r2, #3
    2e54:	4b02      	ldr	r3, [pc, #8]	; (2e60 <SystemCoreClockUpdate+0x18>)
    2e56:	40d3      	lsrs	r3, r2
    2e58:	4a02      	ldr	r2, [pc, #8]	; (2e64 <SystemCoreClockUpdate+0x1c>)
    2e5a:	6013      	str	r3, [r2, #0]
#endif
}
    2e5c:	4770      	bx	lr
    2e5e:	bf00      	nop
    2e60:	07a12000 	.word	0x07a12000
    2e64:	20000040 	.word	0x20000040

00002e68 <SystemInit>:

void SystemInit(void)
{
    2e68:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2e6a:	f003 f915 	bl	6098 <nrf53_errata_97>
    2e6e:	b168      	cbz	r0, 2e8c <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2e70:	4b3e      	ldr	r3, [pc, #248]	; (2f6c <SystemInit+0x104>)
    2e72:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
    2e76:	b94b      	cbnz	r3, 2e8c <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2e78:	4b3c      	ldr	r3, [pc, #240]	; (2f6c <SystemInit+0x104>)
    2e7a:	220d      	movs	r2, #13
    2e7c:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    2e80:	2201      	movs	r2, #1
    2e82:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2e86:	2200      	movs	r2, #0
    2e88:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    2e8c:	2200      	movs	r2, #0
    2e8e:	e00b      	b.n	2ea8 <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2e90:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2e94:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2e98:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    2e9c:	00db      	lsls	r3, r3, #3
    2e9e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    2ea2:	685b      	ldr	r3, [r3, #4]
    2ea4:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2ea6:	3201      	adds	r2, #1
    2ea8:	2a1f      	cmp	r2, #31
    2eaa:	d808      	bhi.n	2ebe <SystemInit+0x56>
    2eac:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2eb0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2eb4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    2eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
    2ebc:	d1e8      	bne.n	2e90 <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2ebe:	f003 f8c3 	bl	6048 <nrf53_errata_64>
    2ec2:	b130      	cbz	r0, 2ed2 <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2ec4:	4b29      	ldr	r3, [pc, #164]	; (2f6c <SystemInit+0x104>)
    2ec6:	2229      	movs	r2, #41	; 0x29
    2ec8:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2ecc:	2203      	movs	r2, #3
    2ece:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2ed2:	f003 f86d 	bl	5fb0 <nrf53_errata_42>
    2ed6:	b140      	cbz	r0, 2eea <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2ed8:	4b25      	ldr	r3, [pc, #148]	; (2f70 <SystemInit+0x108>)
    2eda:	4a26      	ldr	r2, [pc, #152]	; (2f74 <SystemInit+0x10c>)
    2edc:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2ee0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ee4:	2201      	movs	r2, #1
    2ee6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    2eea:	f003 f875 	bl	5fd8 <nrf53_errata_46>
    2eee:	b118      	cbz	r0, 2ef8 <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2ef0:	4b21      	ldr	r3, [pc, #132]	; (2f78 <SystemInit+0x110>)
    2ef2:	2200      	movs	r2, #0
    2ef4:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2ef8:	f003 f886 	bl	6008 <nrf53_errata_49>
    2efc:	b168      	cbz	r0, 2f1a <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2efe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2f06:	f013 0f01 	tst.w	r3, #1
    2f0a:	d006      	beq.n	2f1a <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2f0c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f10:	2200      	movs	r2, #0
    2f12:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2f16:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    2f1a:	f003 f889 	bl	6030 <nrf53_errata_55>
    2f1e:	b160      	cbz	r0, 2f3a <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2f20:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f24:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2f28:	f013 0f01 	tst.w	r3, #1
    2f2c:	d005      	beq.n	2f3a <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2f2e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f32:	f06f 0201 	mvn.w	r2, #1
    2f36:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2f3a:	f003 f899 	bl	6070 <nrf53_errata_69>
    2f3e:	b118      	cbz	r0, 2f48 <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2f40:	4b0a      	ldr	r3, [pc, #40]	; (2f6c <SystemInit+0x104>)
    2f42:	2265      	movs	r2, #101	; 0x65
    2f44:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2f48:	4a0c      	ldr	r2, [pc, #48]	; (2f7c <SystemInit+0x114>)
    2f4a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2f4e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2f52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2f56:	4a0a      	ldr	r2, [pc, #40]	; (2f80 <SystemInit+0x118>)
    2f58:	6811      	ldr	r1, [r2, #0]
    2f5a:	4b0a      	ldr	r3, [pc, #40]	; (2f84 <SystemInit+0x11c>)
    2f5c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2f60:	69d2      	ldr	r2, [r2, #28]
    2f62:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    2f66:	f7ff ff6f 	bl	2e48 <SystemCoreClockUpdate>
}
    2f6a:	bd08      	pop	{r3, pc}
    2f6c:	50004000 	.word	0x50004000
    2f70:	50039000 	.word	0x50039000
    2f74:	beef0044 	.word	0xbeef0044
    2f78:	50032000 	.word	0x50032000
    2f7c:	e000ed00 	.word	0xe000ed00
    2f80:	00ff8000 	.word	0x00ff8000
    2f84:	50006000 	.word	0x50006000

00002f88 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2f88:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    2f8a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2f8c:	fab4 f384 	clz	r3, r4
    2f90:	f1c3 031f 	rsb	r3, r3, #31
    2f94:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    2f98:	2b00      	cmp	r3, #0
    2f9a:	db12      	blt.n	2fc2 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2f9c:	2201      	movs	r2, #1
    2f9e:	fa02 f303 	lsl.w	r3, r2, r3
    2fa2:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2fa6:	e8d0 2fef 	ldaex	r2, [r0]
    2faa:	42a2      	cmp	r2, r4
    2fac:	d104      	bne.n	2fb8 <nrfx_flag32_alloc+0x30>
    2fae:	e8c0 3fee 	stlex	lr, r3, [r0]
    2fb2:	f1be 0f00 	cmp.w	lr, #0
    2fb6:	d1f6      	bne.n	2fa6 <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2fb8:	d1e7      	bne.n	2f8a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    2fba:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    2fbe:	4802      	ldr	r0, [pc, #8]	; (2fc8 <nrfx_flag32_alloc+0x40>)
}
    2fc0:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    2fc2:	4802      	ldr	r0, [pc, #8]	; (2fcc <nrfx_flag32_alloc+0x44>)
    2fc4:	e7fc      	b.n	2fc0 <nrfx_flag32_alloc+0x38>
    2fc6:	bf00      	nop
    2fc8:	0bad0000 	.word	0x0bad0000
    2fcc:	0bad0002 	.word	0x0bad0002

00002fd0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2fd0:	6803      	ldr	r3, [r0, #0]
    2fd2:	40cb      	lsrs	r3, r1
    2fd4:	f013 0f01 	tst.w	r3, #1
    2fd8:	d111      	bne.n	2ffe <nrfx_flag32_free+0x2e>
{
    2fda:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    2fdc:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2fde:	2301      	movs	r3, #1
    2fe0:	408b      	lsls	r3, r1
    2fe2:	4313      	orrs	r3, r2
    2fe4:	e8d0 cfef 	ldaex	ip, [r0]
    2fe8:	4594      	cmp	ip, r2
    2fea:	d104      	bne.n	2ff6 <nrfx_flag32_free+0x26>
    2fec:	e8c0 3fee 	stlex	lr, r3, [r0]
    2ff0:	f1be 0f00 	cmp.w	lr, #0
    2ff4:	d1f6      	bne.n	2fe4 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2ff6:	d1f1      	bne.n	2fdc <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    2ff8:	4802      	ldr	r0, [pc, #8]	; (3004 <nrfx_flag32_free+0x34>)
}
    2ffa:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    2ffe:	4802      	ldr	r0, [pc, #8]	; (3008 <nrfx_flag32_free+0x38>)
}
    3000:	4770      	bx	lr
    3002:	bf00      	nop
    3004:	0bad0000 	.word	0x0bad0000
    3008:	0bad0004 	.word	0x0bad0004

0000300c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    300c:	b570      	push	{r4, r5, r6, lr}
    300e:	b082      	sub	sp, #8
    3010:	4605      	mov	r5, r0
    switch (domain)
    3012:	2803      	cmp	r0, #3
    3014:	f200 809e 	bhi.w	3154 <clock_stop+0x148>
    3018:	e8df f000 	tbb	[pc, r0]
    301c:	31231702 	.word	0x31231702
    p_reg->INTENCLR = mask;
    3020:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3024:	2202      	movs	r2, #2
    3026:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    302a:	2200      	movs	r2, #0
    302c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3030:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3034:	2201      	movs	r2, #1
    3036:	60da      	str	r2, [r3, #12]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3038:	2301      	movs	r3, #1
    303a:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    303e:	429d      	cmp	r5, r3
    3040:	d02b      	beq.n	309a <clock_stop+0x8e>
    3042:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3044:	f242 7410 	movw	r4, #10000	; 0x2710
    3048:	e06e      	b.n	3128 <clock_stop+0x11c>
    p_reg->INTENCLR = mask;
    304a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    304e:	2201      	movs	r2, #1
    3050:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3054:	2100      	movs	r1, #0
    3056:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    305a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    305e:	605a      	str	r2, [r3, #4]
}
    3060:	e7ea      	b.n	3038 <clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    3062:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3066:	f44f 7200 	mov.w	r2, #512	; 0x200
    306a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    306e:	2200      	movs	r2, #0
    3070:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    3074:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3078:	2201      	movs	r2, #1
    307a:	625a      	str	r2, [r3, #36]	; 0x24
}
    307c:	e7dc      	b.n	3038 <clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    307e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3082:	f44f 7280 	mov.w	r2, #256	; 0x100
    3086:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    308a:	2200      	movs	r2, #0
    308c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3090:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3094:	2201      	movs	r2, #1
    3096:	61da      	str	r2, [r3, #28]
}
    3098:	e7ce      	b.n	3038 <clock_stop+0x2c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    309a:	f10d 0607 	add.w	r6, sp, #7
    309e:	e7d1      	b.n	3044 <clock_stop+0x38>
            if (p_clk_src != NULL)
    30a0:	b136      	cbz	r6, 30b0 <clock_stop+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    30a2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30a6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    30aa:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    30ae:	7033      	strb	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    30b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30b4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    30b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    30bc:	d144      	bne.n	3148 <clock_stop+0x13c>
    return false;
    30be:	2300      	movs	r3, #0
    30c0:	e027      	b.n	3112 <clock_stop+0x106>
            if (p_clk_src != NULL)
    30c2:	b136      	cbz	r6, 30d2 <clock_stop+0xc6>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    30c4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30c8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    30cc:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    30d0:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    30d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30d6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    30da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    30de:	d135      	bne.n	314c <clock_stop+0x140>
    return false;
    30e0:	2300      	movs	r3, #0
    30e2:	e016      	b.n	3112 <clock_stop+0x106>
            if (p_clk_src != NULL)
    30e4:	b136      	cbz	r6, 30f4 <clock_stop+0xe8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    30e6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30ea:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    30ee:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    30f2:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    30f4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30f8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    30fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3100:	d126      	bne.n	3150 <clock_stop+0x144>
    return false;
    3102:	2300      	movs	r3, #0
    3104:	e005      	b.n	3112 <clock_stop+0x106>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    3106:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    310a:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    310e:	f3c3 4300 	ubfx	r3, r3, #16, #1
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3112:	b1fb      	cbz	r3, 3154 <clock_stop+0x148>
    3114:	b11e      	cbz	r6, 311e <clock_stop+0x112>
    3116:	f89d 3007 	ldrb.w	r3, [sp, #7]
    311a:	2b01      	cmp	r3, #1
    311c:	d11a      	bne.n	3154 <clock_stop+0x148>
    311e:	2001      	movs	r0, #1
    3120:	f002 ffd1 	bl	60c6 <nrfx_busy_wait>
    3124:	3c01      	subs	r4, #1
    3126:	d015      	beq.n	3154 <clock_stop+0x148>
    switch (domain)
    3128:	2d03      	cmp	r5, #3
    312a:	d80b      	bhi.n	3144 <clock_stop+0x138>
    312c:	a301      	add	r3, pc, #4	; (adr r3, 3134 <clock_stop+0x128>)
    312e:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    3132:	bf00      	nop
    3134:	000030a1 	.word	0x000030a1
    3138:	000030c3 	.word	0x000030c3
    313c:	000030e5 	.word	0x000030e5
    3140:	00003107 	.word	0x00003107
    3144:	2300      	movs	r3, #0
    3146:	e7e4      	b.n	3112 <clock_stop+0x106>
                return true;
    3148:	2301      	movs	r3, #1
    314a:	e7e2      	b.n	3112 <clock_stop+0x106>
                return true;
    314c:	2301      	movs	r3, #1
    314e:	e7e0      	b.n	3112 <clock_stop+0x106>
                return true;
    3150:	2301      	movs	r3, #1
    3152:	e7de      	b.n	3112 <clock_stop+0x106>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3154:	b002      	add	sp, #8
    3156:	bd70      	pop	{r4, r5, r6, pc}

00003158 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3158:	4b05      	ldr	r3, [pc, #20]	; (3170 <nrfx_clock_init+0x18>)
    315a:	791b      	ldrb	r3, [r3, #4]
    315c:	b92b      	cbnz	r3, 316a <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    315e:	4b04      	ldr	r3, [pc, #16]	; (3170 <nrfx_clock_init+0x18>)
    3160:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3162:	2201      	movs	r2, #1
    3164:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3166:	4803      	ldr	r0, [pc, #12]	; (3174 <nrfx_clock_init+0x1c>)
    3168:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    316a:	4803      	ldr	r0, [pc, #12]	; (3178 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    316c:	4770      	bx	lr
    316e:	bf00      	nop
    3170:	20000960 	.word	0x20000960
    3174:	0bad0000 	.word	0x0bad0000
    3178:	0bad000c 	.word	0x0bad000c

0000317c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    317c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    317e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3182:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3186:	b163      	cbz	r3, 31a2 <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3188:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    318c:	2000      	movs	r0, #0
    318e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    3192:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3196:	2201      	movs	r2, #1
    3198:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    319c:	4b28      	ldr	r3, [pc, #160]	; (3240 <nrfx_power_clock_irq_handler+0xc4>)
    319e:	681b      	ldr	r3, [r3, #0]
    31a0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    31a2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31a6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    31aa:	b1bb      	cbz	r3, 31dc <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31b0:	2200      	movs	r2, #0
    31b2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    31b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    31ba:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    31be:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    31c2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    31c6:	2a01      	cmp	r2, #1
    31c8:	d031      	beq.n	322e <nrfx_power_clock_irq_handler+0xb2>
    p_reg->INTENCLR = mask;
    31ca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31ce:	2202      	movs	r2, #2
    31d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    31d4:	4b1a      	ldr	r3, [pc, #104]	; (3240 <nrfx_power_clock_irq_handler+0xc4>)
    31d6:	681b      	ldr	r3, [r3, #0]
    31d8:	2001      	movs	r0, #1
    31da:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    31dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31e0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    31e4:	b173      	cbz	r3, 3204 <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31e6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31ea:	2200      	movs	r2, #0
    31ec:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    31f0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    31f4:	f44f 7280 	mov.w	r2, #256	; 0x100
    31f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    31fc:	4b10      	ldr	r3, [pc, #64]	; (3240 <nrfx_power_clock_irq_handler+0xc4>)
    31fe:	681b      	ldr	r3, [r3, #0]
    3200:	2004      	movs	r0, #4
    3202:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3204:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3208:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    320c:	b173      	cbz	r3, 322c <nrfx_power_clock_irq_handler+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    320e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3212:	2200      	movs	r2, #0
    3214:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    3218:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    321c:	f44f 7200 	mov.w	r2, #512	; 0x200
    3220:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    3224:	4b06      	ldr	r3, [pc, #24]	; (3240 <nrfx_power_clock_irq_handler+0xc4>)
    3226:	681b      	ldr	r3, [r3, #0]
    3228:	2005      	movs	r0, #5
    322a:	4798      	blx	r3
    }
#endif
}
    322c:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    322e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3232:	2202      	movs	r2, #2
    3234:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3238:	2201      	movs	r2, #1
    323a:	609a      	str	r2, [r3, #8]
}
    323c:	e7ce      	b.n	31dc <nrfx_power_clock_irq_handler+0x60>
    323e:	bf00      	nop
    3240:	20000960 	.word	0x20000960

00003244 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    3244:	b508      	push	{r3, lr}
    3246:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    3248:	4801      	ldr	r0, [pc, #4]	; (3250 <nrfx_dppi_channel_alloc+0xc>)
    324a:	f7ff fe9d 	bl	2f88 <nrfx_flag32_alloc>
}
    324e:	bd08      	pop	{r3, pc}
    3250:	20000044 	.word	0x20000044

00003254 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3254:	3008      	adds	r0, #8
    3256:	4b03      	ldr	r3, [pc, #12]	; (3264 <pin_in_use+0x10>)
    3258:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    325c:	f000 0001 	and.w	r0, r0, #1
    3260:	4770      	bx	lr
    3262:	bf00      	nop
    3264:	20000048 	.word	0x20000048

00003268 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3268:	3008      	adds	r0, #8
    326a:	4b03      	ldr	r3, [pc, #12]	; (3278 <pin_in_use_by_te+0x10>)
    326c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3270:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3274:	4770      	bx	lr
    3276:	bf00      	nop
    3278:	20000048 	.word	0x20000048

0000327c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    327c:	3008      	adds	r0, #8
    327e:	4b04      	ldr	r3, [pc, #16]	; (3290 <pin_has_trigger+0x14>)
    3280:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3284:	f010 001c 	ands.w	r0, r0, #28
    3288:	bf18      	it	ne
    328a:	2001      	movne	r0, #1
    328c:	4770      	bx	lr
    328e:	bf00      	nop
    3290:	20000048 	.word	0x20000048

00003294 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3294:	3008      	adds	r0, #8
    3296:	4b03      	ldr	r3, [pc, #12]	; (32a4 <pin_is_output+0x10>)
    3298:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    329c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    32a0:	4770      	bx	lr
    32a2:	bf00      	nop
    32a4:	20000048 	.word	0x20000048

000032a8 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    32a8:	3008      	adds	r0, #8
    32aa:	4b02      	ldr	r3, [pc, #8]	; (32b4 <pin_te_get+0xc>)
    32ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    32b0:	0b40      	lsrs	r0, r0, #13
    32b2:	4770      	bx	lr
    32b4:	20000048 	.word	0x20000048

000032b8 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    32b8:	2200      	movs	r2, #0
    32ba:	e004      	b.n	32c6 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    32bc:	f04f 33ff 	mov.w	r3, #4294967295
    32c0:	4283      	cmp	r3, r0
    32c2:	d00f      	beq.n	32e4 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    32c4:	3201      	adds	r2, #1
    32c6:	2a2f      	cmp	r2, #47	; 0x2f
    32c8:	d80a      	bhi.n	32e0 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    32ca:	f102 0308 	add.w	r3, r2, #8
    32ce:	4906      	ldr	r1, [pc, #24]	; (32e8 <handler_in_use+0x30>)
    32d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    32d4:	f413 7f80 	tst.w	r3, #256	; 0x100
    32d8:	d0f0      	beq.n	32bc <handler_in_use+0x4>
    32da:	f3c3 2343 	ubfx	r3, r3, #9, #4
    32de:	e7ef      	b.n	32c0 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    32e0:	2000      	movs	r0, #0
    32e2:	4770      	bx	lr
            return true;
    32e4:	2001      	movs	r0, #1
}
    32e6:	4770      	bx	lr
    32e8:	20000048 	.word	0x20000048

000032ec <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    32ec:	2300      	movs	r3, #0
    32ee:	b113      	cbz	r3, 32f6 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    32f0:	f04f 30ff 	mov.w	r0, #4294967295
}
    32f4:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    32f6:	4a07      	ldr	r2, [pc, #28]	; (3314 <find_handler+0x28>)
    32f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    32fc:	4282      	cmp	r2, r0
    32fe:	d001      	beq.n	3304 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3300:	3301      	adds	r3, #1
    3302:	e7f4      	b.n	32ee <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3304:	4a03      	ldr	r2, [pc, #12]	; (3314 <find_handler+0x28>)
    3306:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    330a:	6852      	ldr	r2, [r2, #4]
    330c:	428a      	cmp	r2, r1
    330e:	d1f7      	bne.n	3300 <find_handler+0x14>
            return i;
    3310:	4618      	mov	r0, r3
    3312:	4770      	bx	lr
    3314:	20000048 	.word	0x20000048

00003318 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3318:	3008      	adds	r0, #8
    331a:	4b06      	ldr	r3, [pc, #24]	; (3334 <channel_handler_get+0x1c>)
    331c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3320:	f410 7f80 	tst.w	r0, #256	; 0x100
    3324:	d004      	beq.n	3330 <channel_handler_get+0x18>
    3326:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    332a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    332e:	4770      	bx	lr
        return NULL;
    3330:	2000      	movs	r0, #0
}
    3332:	4770      	bx	lr
    3334:	20000048 	.word	0x20000048

00003338 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3338:	b570      	push	{r4, r5, r6, lr}
    333a:	4604      	mov	r4, r0
    333c:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    333e:	f7ff ffeb 	bl	3318 <channel_handler_get>

    if (handler)
    3342:	b120      	cbz	r0, 334e <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    3344:	6806      	ldr	r6, [r0, #0]
    3346:	6842      	ldr	r2, [r0, #4]
    3348:	4629      	mov	r1, r5
    334a:	4620      	mov	r0, r4
    334c:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    334e:	4b04      	ldr	r3, [pc, #16]	; (3360 <call_handler+0x28>)
    3350:	689b      	ldr	r3, [r3, #8]
    3352:	b123      	cbz	r3, 335e <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3354:	4a02      	ldr	r2, [pc, #8]	; (3360 <call_handler+0x28>)
    3356:	68d2      	ldr	r2, [r2, #12]
    3358:	4629      	mov	r1, r5
    335a:	4620      	mov	r0, r4
    335c:	4798      	blx	r3
    }
}
    335e:	bd70      	pop	{r4, r5, r6, pc}
    3360:	20000048 	.word	0x20000048

00003364 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3364:	f100 0208 	add.w	r2, r0, #8
    3368:	4b0e      	ldr	r3, [pc, #56]	; (33a4 <release_handler+0x40>)
    336a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    336e:	f413 7f80 	tst.w	r3, #256	; 0x100
    3372:	d016      	beq.n	33a2 <release_handler+0x3e>
{
    3374:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3376:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    337a:	4610      	mov	r0, r2
    337c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3380:	4a08      	ldr	r2, [pc, #32]	; (33a4 <release_handler+0x40>)
    3382:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    3386:	4620      	mov	r0, r4
    3388:	f7ff ff96 	bl	32b8 <handler_in_use>
    338c:	b100      	cbz	r0, 3390 <release_handler+0x2c>
}
    338e:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    3390:	4804      	ldr	r0, [pc, #16]	; (33a4 <release_handler+0x40>)
    3392:	2300      	movs	r3, #0
    3394:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3398:	4621      	mov	r1, r4
    339a:	3074      	adds	r0, #116	; 0x74
    339c:	f7ff fe18 	bl	2fd0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    33a0:	e7f5      	b.n	338e <release_handler+0x2a>
    33a2:	4770      	bx	lr
    33a4:	20000048 	.word	0x20000048

000033a8 <pin_handler_trigger_uninit>:
{
    33a8:	b510      	push	{r4, lr}
    33aa:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    33ac:	f7ff ff5c 	bl	3268 <pin_in_use_by_te>
    33b0:	b150      	cbz	r0, 33c8 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    33b2:	4620      	mov	r0, r4
    33b4:	f7ff ff78 	bl	32a8 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    33b8:	4b08      	ldr	r3, [pc, #32]	; (33dc <pin_handler_trigger_uninit+0x34>)
    33ba:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    33be:	2200      	movs	r2, #0
    33c0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    33c4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    33c8:	4620      	mov	r0, r4
    33ca:	f7ff ffcb 	bl	3364 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    33ce:	3408      	adds	r4, #8
    33d0:	4b03      	ldr	r3, [pc, #12]	; (33e0 <pin_handler_trigger_uninit+0x38>)
    33d2:	2200      	movs	r2, #0
    33d4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    33d8:	bd10      	pop	{r4, pc}
    33da:	bf00      	nop
    33dc:	5000d000 	.word	0x5000d000
    33e0:	20000048 	.word	0x20000048

000033e4 <pin_handler_set>:
{
    33e4:	b570      	push	{r4, r5, r6, lr}
    33e6:	b082      	sub	sp, #8
    33e8:	4606      	mov	r6, r0
    33ea:	460c      	mov	r4, r1
    33ec:	4615      	mov	r5, r2
    release_handler(pin);
    33ee:	f7ff ffb9 	bl	3364 <release_handler>
    if (!handler)
    33f2:	b324      	cbz	r4, 343e <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    33f4:	4629      	mov	r1, r5
    33f6:	4620      	mov	r0, r4
    33f8:	f7ff ff78 	bl	32ec <find_handler>
    if (handler_id < 0)
    33fc:	1e03      	subs	r3, r0, #0
    33fe:	db13      	blt.n	3428 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    3400:	4a10      	ldr	r2, [pc, #64]	; (3444 <pin_handler_set+0x60>)
    3402:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3406:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    340a:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    340c:	025b      	lsls	r3, r3, #9
    340e:	b29b      	uxth	r3, r3
    3410:	f106 0008 	add.w	r0, r6, #8
    3414:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    3418:	430b      	orrs	r3, r1
    341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    341e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    3422:	4809      	ldr	r0, [pc, #36]	; (3448 <pin_handler_set+0x64>)
}
    3424:	b002      	add	sp, #8
    3426:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3428:	f10d 0107 	add.w	r1, sp, #7
    342c:	4807      	ldr	r0, [pc, #28]	; (344c <pin_handler_set+0x68>)
    342e:	f7ff fdab 	bl	2f88 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3432:	4b05      	ldr	r3, [pc, #20]	; (3448 <pin_handler_set+0x64>)
    3434:	4298      	cmp	r0, r3
    3436:	d1f5      	bne.n	3424 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    3438:	f89d 3007 	ldrb.w	r3, [sp, #7]
    343c:	e7e0      	b.n	3400 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    343e:	4802      	ldr	r0, [pc, #8]	; (3448 <pin_handler_set+0x64>)
    3440:	e7f0      	b.n	3424 <pin_handler_set+0x40>
    3442:	bf00      	nop
    3444:	20000048 	.word	0x20000048
    3448:	0bad0000 	.word	0x0bad0000
    344c:	200000bc 	.word	0x200000bc

00003450 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    3450:	b538      	push	{r3, r4, r5, lr}
    3452:	4604      	mov	r4, r0
    while (mask)
    3454:	e018      	b.n	3488 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    3456:	fa94 f3a4 	rbit	r3, r4
    345a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    345e:	2201      	movs	r2, #1
    3460:	409a      	lsls	r2, r3
    3462:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3466:	4a0a      	ldr	r2, [pc, #40]	; (3490 <gpiote_evt_handle+0x40>)
    3468:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    346c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    3470:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3474:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3478:	f3c0 4001 	ubfx	r0, r0, #16, #2
    347c:	f002 fee2 	bl	6244 <gpiote_polarity_to_trigger>
    3480:	4601      	mov	r1, r0
    3482:	4628      	mov	r0, r5
    3484:	f7ff ff58 	bl	3338 <call_handler>
    while (mask)
    3488:	2c00      	cmp	r4, #0
    348a:	d1e4      	bne.n	3456 <gpiote_evt_handle+0x6>
    }
}
    348c:	bd38      	pop	{r3, r4, r5, pc}
    348e:	bf00      	nop
    3490:	5000d000 	.word	0x5000d000

00003494 <latch_pending_read_and_check>:
{
    3494:	b082      	sub	sp, #8
    3496:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    3498:	4b10      	ldr	r3, [pc, #64]	; (34dc <latch_pending_read_and_check+0x48>)
    349a:	e893 0003 	ldmia.w	r3, {r0, r1}
    349e:	ab02      	add	r3, sp, #8
    34a0:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    34a4:	4660      	mov	r0, ip
    34a6:	2300      	movs	r3, #0
    34a8:	e009      	b.n	34be <latch_pending_read_and_check+0x2a>
        *p_masks = gpio_regs[i]->LATCH;
    34aa:	aa02      	add	r2, sp, #8
    34ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    34b0:	f852 2c08 	ldr.w	r2, [r2, #-8]
    34b4:	6a11      	ldr	r1, [r2, #32]
    34b6:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    34ba:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
    34bc:	3301      	adds	r3, #1
    34be:	2b01      	cmp	r3, #1
    34c0:	d9f3      	bls.n	34aa <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    34c2:	2300      	movs	r3, #0
    34c4:	2b01      	cmp	r3, #1
    34c6:	d804      	bhi.n	34d2 <latch_pending_read_and_check+0x3e>
        if (latch[port_idx])
    34c8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    34cc:	b922      	cbnz	r2, 34d8 <latch_pending_read_and_check+0x44>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    34ce:	3301      	adds	r3, #1
    34d0:	e7f8      	b.n	34c4 <latch_pending_read_and_check+0x30>
    return false;
    34d2:	2000      	movs	r0, #0
}
    34d4:	b002      	add	sp, #8
    34d6:	4770      	bx	lr
            return true;
    34d8:	2001      	movs	r0, #1
    34da:	e7fb      	b.n	34d4 <latch_pending_read_and_check+0x40>
    34dc:	00006a20 	.word	0x00006a20

000034e0 <next_sense_cond_call_handler>:
{
    34e0:	b570      	push	{r4, r5, r6, lr}
    34e2:	4604      	mov	r4, r0
    34e4:	460d      	mov	r5, r1
    34e6:	4616      	mov	r6, r2
    if (is_level(trigger))
    34e8:	4608      	mov	r0, r1
    34ea:	f002 fead 	bl	6248 <is_level>
    34ee:	b9c0      	cbnz	r0, 3522 <next_sense_cond_call_handler+0x42>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    34f0:	2e02      	cmp	r6, #2
    34f2:	d04a      	beq.n	358a <next_sense_cond_call_handler+0xaa>
    34f4:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    34f6:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    34fa:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    34fc:	2901      	cmp	r1, #1
    34fe:	d046      	beq.n	358e <next_sense_cond_call_handler+0xae>
        case 0: return NRF_P0;
    3500:	4929      	ldr	r1, [pc, #164]	; (35a8 <next_sense_cond_call_handler+0xc8>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3502:	3280      	adds	r2, #128	; 0x80
    3504:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    3508:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    350c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3510:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3514:	2d03      	cmp	r5, #3
    3516:	d03e      	beq.n	3596 <next_sense_cond_call_handler+0xb6>
    3518:	2e02      	cmp	r6, #2
    351a:	d03a      	beq.n	3592 <next_sense_cond_call_handler+0xb2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    351c:	2e03      	cmp	r6, #3
    351e:	d03f      	beq.n	35a0 <next_sense_cond_call_handler+0xc0>
}
    3520:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    3522:	4629      	mov	r1, r5
    3524:	4620      	mov	r0, r4
    3526:	f7ff ff07 	bl	3338 <call_handler>
    *p_pin = pin_number & 0x1F;
    352a:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    352e:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3530:	2a01      	cmp	r2, #1
    3532:	d024      	beq.n	357e <next_sense_cond_call_handler+0x9e>
        case 0: return NRF_P0;
    3534:	4a1c      	ldr	r2, [pc, #112]	; (35a8 <next_sense_cond_call_handler+0xc8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3536:	3380      	adds	r3, #128	; 0x80
    3538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    353c:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3540:	429e      	cmp	r6, r3
    3542:	d1ed      	bne.n	3520 <next_sense_cond_call_handler+0x40>
    *p_pin = pin_number & 0x1F;
    3544:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    3548:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    354a:	2a01      	cmp	r2, #1
    354c:	d019      	beq.n	3582 <next_sense_cond_call_handler+0xa2>
        case 0: return NRF_P0;
    354e:	4916      	ldr	r1, [pc, #88]	; (35a8 <next_sense_cond_call_handler+0xc8>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3550:	3380      	adds	r3, #128	; 0x80
    3552:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    3556:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    355a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    355e:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    3562:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3564:	2c01      	cmp	r4, #1
    3566:	d00e      	beq.n	3586 <next_sense_cond_call_handler+0xa6>
        case 0: return NRF_P0;
    3568:	490f      	ldr	r1, [pc, #60]	; (35a8 <next_sense_cond_call_handler+0xc8>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    356a:	3380      	adds	r3, #128	; 0x80
    356c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    3570:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3574:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3578:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    357c:	e7d0      	b.n	3520 <next_sense_cond_call_handler+0x40>
        case 1: return NRF_P1;
    357e:	4a0b      	ldr	r2, [pc, #44]	; (35ac <next_sense_cond_call_handler+0xcc>)
    3580:	e7d9      	b.n	3536 <next_sense_cond_call_handler+0x56>
    3582:	490a      	ldr	r1, [pc, #40]	; (35ac <next_sense_cond_call_handler+0xcc>)
    3584:	e7e4      	b.n	3550 <next_sense_cond_call_handler+0x70>
    3586:	4909      	ldr	r1, [pc, #36]	; (35ac <next_sense_cond_call_handler+0xcc>)
    3588:	e7ef      	b.n	356a <next_sense_cond_call_handler+0x8a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    358a:	2003      	movs	r0, #3
    358c:	e7b3      	b.n	34f6 <next_sense_cond_call_handler+0x16>
    358e:	4907      	ldr	r1, [pc, #28]	; (35ac <next_sense_cond_call_handler+0xcc>)
    3590:	e7b7      	b.n	3502 <next_sense_cond_call_handler+0x22>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3592:	2d01      	cmp	r5, #1
    3594:	d1c2      	bne.n	351c <next_sense_cond_call_handler+0x3c>
            call_handler(pin, trigger);
    3596:	4629      	mov	r1, r5
    3598:	4620      	mov	r0, r4
    359a:	f7ff fecd 	bl	3338 <call_handler>
}
    359e:	e7bf      	b.n	3520 <next_sense_cond_call_handler+0x40>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    35a0:	2d02      	cmp	r5, #2
    35a2:	d1bd      	bne.n	3520 <next_sense_cond_call_handler+0x40>
    35a4:	e7f7      	b.n	3596 <next_sense_cond_call_handler+0xb6>
    35a6:	bf00      	nop
    35a8:	50842500 	.word	0x50842500
    35ac:	50842800 	.word	0x50842800

000035b0 <port_event_handle>:
{
    35b0:	b570      	push	{r4, r5, r6, lr}
    35b2:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    35b4:	4a2d      	ldr	r2, [pc, #180]	; (366c <port_event_handle+0xbc>)
    35b6:	466b      	mov	r3, sp
    35b8:	e892 0003 	ldmia.w	r2, {r0, r1}
    35bc:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    35c0:	2300      	movs	r3, #0
    35c2:	a802      	add	r0, sp, #8
    35c4:	e009      	b.n	35da <port_event_handle+0x2a>
        *p_masks = gpio_regs[i]->LATCH;
    35c6:	aa04      	add	r2, sp, #16
    35c8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    35cc:	f852 2c10 	ldr.w	r2, [r2, #-16]
    35d0:	6a11      	ldr	r1, [r2, #32]
    35d2:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    35d6:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
    35d8:	3301      	adds	r3, #1
    35da:	2b01      	cmp	r3, #1
    35dc:	d9f3      	bls.n	35c6 <port_event_handle+0x16>
    35de:	e040      	b.n	3662 <port_event_handle+0xb2>
        case 1: return NRF_P1;
    35e0:	4e23      	ldr	r6, [pc, #140]	; (3670 <port_event_handle+0xc0>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    35e2:	f105 0380 	add.w	r3, r5, #128	; 0x80
    35e6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    35ea:	f3c2 4201 	ubfx	r2, r2, #16, #2
    35ee:	f7ff ff77 	bl	34e0 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    35f2:	2301      	movs	r3, #1
    35f4:	40ab      	lsls	r3, r5
    35f6:	6233      	str	r3, [r6, #32]
            while (latch[i])
    35f8:	ab04      	add	r3, sp, #16
    35fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    35fe:	f853 0c08 	ldr.w	r0, [r3, #-8]
    3602:	b308      	cbz	r0, 3648 <port_event_handle+0x98>
                uint32_t pin = NRF_CTZ(latch[i]);
    3604:	fa90 f0a0 	rbit	r0, r0
    3608:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    360c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3610:	f100 0208 	add.w	r2, r0, #8
    3614:	4b17      	ldr	r3, [pc, #92]	; (3674 <port_event_handle+0xc4>)
    3616:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    361a:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    361e:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    3620:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3624:	f10d 0c08 	add.w	ip, sp, #8
    3628:	2301      	movs	r3, #1
    362a:	fa03 f202 	lsl.w	r2, r3, r2
    362e:	f81c 3005 	ldrb.w	r3, [ip, r5]
    3632:	ea23 0302 	bic.w	r3, r3, r2
    3636:	f80c 3005 	strb.w	r3, [ip, r5]
    *p_pin = pin_number & 0x1F;
    363a:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    363e:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3640:	2b01      	cmp	r3, #1
    3642:	d0cd      	beq.n	35e0 <port_event_handle+0x30>
        case 0: return NRF_P0;
    3644:	4e0c      	ldr	r6, [pc, #48]	; (3678 <port_event_handle+0xc8>)
    3646:	e7cc      	b.n	35e2 <port_event_handle+0x32>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3648:	3401      	adds	r4, #1
    364a:	2c01      	cmp	r4, #1
    364c:	d9d4      	bls.n	35f8 <port_event_handle+0x48>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    364e:	4b0b      	ldr	r3, [pc, #44]	; (367c <port_event_handle+0xcc>)
    3650:	2200      	movs	r2, #0
    3652:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3656:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    365a:	a802      	add	r0, sp, #8
    365c:	f7ff ff1a 	bl	3494 <latch_pending_read_and_check>
    3660:	b108      	cbz	r0, 3666 <port_event_handle+0xb6>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3662:	2400      	movs	r4, #0
    3664:	e7f1      	b.n	364a <port_event_handle+0x9a>
}
    3666:	b004      	add	sp, #16
    3668:	bd70      	pop	{r4, r5, r6, pc}
    366a:	bf00      	nop
    366c:	00006a20 	.word	0x00006a20
    3670:	50842800 	.word	0x50842800
    3674:	20000048 	.word	0x20000048
    3678:	50842500 	.word	0x50842500
    367c:	5000d000 	.word	0x5000d000

00003680 <nrfx_gpiote_input_configure>:
{
    3680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3684:	4604      	mov	r4, r0
    3686:	4615      	mov	r5, r2
    3688:	461e      	mov	r6, r3
    if (p_input_config)
    368a:	b361      	cbz	r1, 36e6 <nrfx_gpiote_input_configure+0x66>
    368c:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    368e:	f002 fdc3 	bl	6218 <pin_is_task_output>
    3692:	2800      	cmp	r0, #0
    3694:	f040 8099 	bne.w	37ca <nrfx_gpiote_input_configure+0x14a>
    *p_pin = pin_number & 0x1F;
    3698:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    369c:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    369e:	2b01      	cmp	r3, #1
    36a0:	d043      	beq.n	372a <nrfx_gpiote_input_configure+0xaa>
        case 0: return NRF_P0;
    36a2:	484e      	ldr	r0, [pc, #312]	; (37dc <nrfx_gpiote_input_configure+0x15c>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    36a4:	f102 0380 	add.w	r3, r2, #128	; 0x80
    36a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    36ac:	2f00      	cmp	r7, #0
    36ae:	d03e      	beq.n	372e <nrfx_gpiote_input_configure+0xae>
    36b0:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    36b2:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    36b6:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    36ba:	2f00      	cmp	r7, #0
    36bc:	d039      	beq.n	3732 <nrfx_gpiote_input_configure+0xb2>
    36be:	7839      	ldrb	r1, [r7, #0]
    36c0:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    36c2:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    36c4:	3280      	adds	r2, #128	; 0x80
    36c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    36ca:	4a45      	ldr	r2, [pc, #276]	; (37e0 <nrfx_gpiote_input_configure+0x160>)
    36cc:	f104 0108 	add.w	r1, r4, #8
    36d0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    36d4:	f023 0302 	bic.w	r3, r3, #2
    36d8:	b29b      	uxth	r3, r3
    36da:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    36de:	f043 0301 	orr.w	r3, r3, #1
    36e2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    36e6:	b1bd      	cbz	r5, 3718 <nrfx_gpiote_input_configure+0x98>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    36e8:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    36ea:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    36ee:	4620      	mov	r0, r4
    36f0:	f7ff fdd0 	bl	3294 <pin_is_output>
    36f4:	b1f8      	cbz	r0, 3736 <nrfx_gpiote_input_configure+0xb6>
            if (use_evt)
    36f6:	f1b8 0f00 	cmp.w	r8, #0
    36fa:	d168      	bne.n	37ce <nrfx_gpiote_input_configure+0x14e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    36fc:	4a38      	ldr	r2, [pc, #224]	; (37e0 <nrfx_gpiote_input_configure+0x160>)
    36fe:	f104 0108 	add.w	r1, r4, #8
    3702:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3706:	f023 031c 	bic.w	r3, r3, #28
    370a:	b29b      	uxth	r3, r3
    370c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3710:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    3714:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    3718:	2e00      	cmp	r6, #0
    371a:	d05c      	beq.n	37d6 <nrfx_gpiote_input_configure+0x156>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    371c:	6872      	ldr	r2, [r6, #4]
    371e:	6831      	ldr	r1, [r6, #0]
    3720:	4620      	mov	r0, r4
    3722:	f7ff fe5f 	bl	33e4 <pin_handler_set>
}
    3726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
    372a:	482e      	ldr	r0, [pc, #184]	; (37e4 <nrfx_gpiote_input_configure+0x164>)
    372c:	e7ba      	b.n	36a4 <nrfx_gpiote_input_configure+0x24>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    372e:	2100      	movs	r1, #0
    3730:	e7bf      	b.n	36b2 <nrfx_gpiote_input_configure+0x32>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3732:	2100      	movs	r1, #0
    3734:	e7c5      	b.n	36c2 <nrfx_gpiote_input_configure+0x42>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3736:	4a2a      	ldr	r2, [pc, #168]	; (37e0 <nrfx_gpiote_input_configure+0x160>)
    3738:	f104 0108 	add.w	r1, r4, #8
    373c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3740:	f023 0320 	bic.w	r3, r3, #32
    3744:	04db      	lsls	r3, r3, #19
    3746:	0cdb      	lsrs	r3, r3, #19
    3748:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    374c:	f1b8 0f00 	cmp.w	r8, #0
    3750:	d0d4      	beq.n	36fc <nrfx_gpiote_input_configure+0x7c>
                if (!edge)
    3752:	2f03      	cmp	r7, #3
    3754:	d83d      	bhi.n	37d2 <nrfx_gpiote_input_configure+0x152>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3756:	686b      	ldr	r3, [r5, #4]
    3758:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    375a:	b947      	cbnz	r7, 376e <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    375c:	4b22      	ldr	r3, [pc, #136]	; (37e8 <nrfx_gpiote_input_configure+0x168>)
    375e:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    3762:	2200      	movs	r2, #0
    3764:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    3768:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    376c:	e7c6      	b.n	36fc <nrfx_gpiote_input_configure+0x7c>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    376e:	4638      	mov	r0, r7
    3770:	f002 fd69 	bl	6246 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3774:	4b1c      	ldr	r3, [pc, #112]	; (37e8 <nrfx_gpiote_input_configure+0x168>)
    3776:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    377a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    377e:	f021 0103 	bic.w	r1, r1, #3
    3782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3786:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    378a:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    378e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    3792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3796:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    379a:	0221      	lsls	r1, r4, #8
    379c:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    37a0:	0400      	lsls	r0, r0, #16
    37a2:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    37a6:	4301      	orrs	r1, r0
    37a8:	ea4c 0101 	orr.w	r1, ip, r1
    37ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    37b0:	036b      	lsls	r3, r5, #13
    37b2:	b29b      	uxth	r3, r3
    37b4:	4a0a      	ldr	r2, [pc, #40]	; (37e0 <nrfx_gpiote_input_configure+0x160>)
    37b6:	f104 0108 	add.w	r1, r4, #8
    37ba:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    37be:	4303      	orrs	r3, r0
    37c0:	f043 0320 	orr.w	r3, r3, #32
    37c4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    37c8:	e798      	b.n	36fc <nrfx_gpiote_input_configure+0x7c>
            return NRFX_ERROR_INVALID_PARAM;
    37ca:	4808      	ldr	r0, [pc, #32]	; (37ec <nrfx_gpiote_input_configure+0x16c>)
    37cc:	e7ab      	b.n	3726 <nrfx_gpiote_input_configure+0xa6>
                return NRFX_ERROR_INVALID_PARAM;
    37ce:	4807      	ldr	r0, [pc, #28]	; (37ec <nrfx_gpiote_input_configure+0x16c>)
    37d0:	e7a9      	b.n	3726 <nrfx_gpiote_input_configure+0xa6>
                    return NRFX_ERROR_INVALID_PARAM;
    37d2:	4806      	ldr	r0, [pc, #24]	; (37ec <nrfx_gpiote_input_configure+0x16c>)
    37d4:	e7a7      	b.n	3726 <nrfx_gpiote_input_configure+0xa6>
        err = NRFX_SUCCESS;
    37d6:	4806      	ldr	r0, [pc, #24]	; (37f0 <nrfx_gpiote_input_configure+0x170>)
    37d8:	e7a5      	b.n	3726 <nrfx_gpiote_input_configure+0xa6>
    37da:	bf00      	nop
    37dc:	50842500 	.word	0x50842500
    37e0:	20000048 	.word	0x20000048
    37e4:	50842800 	.word	0x50842800
    37e8:	5000d000 	.word	0x5000d000
    37ec:	0bad0004 	.word	0x0bad0004
    37f0:	0bad0000 	.word	0x0bad0000

000037f4 <nrfx_gpiote_output_configure>:
{
    37f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37f6:	4604      	mov	r4, r0
    37f8:	4615      	mov	r5, r2
    if (p_config)
    37fa:	2900      	cmp	r1, #0
    37fc:	d053      	beq.n	38a6 <nrfx_gpiote_output_configure+0xb2>
    37fe:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3800:	f002 fd19 	bl	6236 <pin_is_input>
    3804:	b128      	cbz	r0, 3812 <nrfx_gpiote_output_configure+0x1e>
    3806:	4620      	mov	r0, r4
    3808:	f7ff fd2e 	bl	3268 <pin_in_use_by_te>
    380c:	2800      	cmp	r0, #0
    380e:	f040 80a2 	bne.w	3956 <nrfx_gpiote_output_configure+0x162>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3812:	4620      	mov	r0, r4
    3814:	f7ff fd32 	bl	327c <pin_has_trigger>
    3818:	b118      	cbz	r0, 3822 <nrfx_gpiote_output_configure+0x2e>
    381a:	7873      	ldrb	r3, [r6, #1]
    381c:	2b01      	cmp	r3, #1
    381e:	f000 809c 	beq.w	395a <nrfx_gpiote_output_configure+0x166>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3822:	f106 0c01 	add.w	ip, r6, #1
    3826:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    3828:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    382c:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    382e:	2b01      	cmp	r3, #1
    3830:	d057      	beq.n	38e2 <nrfx_gpiote_output_configure+0xee>
        case 0: return NRF_P0;
    3832:	494d      	ldr	r1, [pc, #308]	; (3968 <nrfx_gpiote_output_configure+0x174>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3834:	f102 0380 	add.w	r3, r2, #128	; 0x80
    3838:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    383c:	f1bc 0f00 	cmp.w	ip, #0
    3840:	d051      	beq.n	38e6 <nrfx_gpiote_output_configure+0xf2>
    3842:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    3844:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3848:	2f00      	cmp	r7, #0
    384a:	d04e      	beq.n	38ea <nrfx_gpiote_output_configure+0xf6>
    384c:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3850:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3854:	2e00      	cmp	r6, #0
    3856:	d04b      	beq.n	38f0 <nrfx_gpiote_output_configure+0xfc>
    3858:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    385c:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    3860:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3864:	f1bc 0f00 	cmp.w	ip, #0
    3868:	d045      	beq.n	38f6 <nrfx_gpiote_output_configure+0x102>
    386a:	7873      	ldrb	r3, [r6, #1]
    386c:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    386e:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3872:	2f00      	cmp	r7, #0
    3874:	d041      	beq.n	38fa <nrfx_gpiote_output_configure+0x106>
    3876:	f896 c002 	ldrb.w	ip, [r6, #2]
    387a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    387e:	ea43 030c 	orr.w	r3, r3, ip
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3882:	2e00      	cmp	r6, #0
    3884:	d03c      	beq.n	3900 <nrfx_gpiote_output_configure+0x10c>
    3886:	7836      	ldrb	r6, [r6, #0]
    3888:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    388a:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    388c:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    388e:	3280      	adds	r2, #128	; 0x80
    3890:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3894:	4a35      	ldr	r2, [pc, #212]	; (396c <nrfx_gpiote_output_configure+0x178>)
    3896:	f104 0108 	add.w	r1, r4, #8
    389a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    389e:	f043 0303 	orr.w	r3, r3, #3
    38a2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    38a6:	2d00      	cmp	r5, #0
    38a8:	d059      	beq.n	395e <nrfx_gpiote_output_configure+0x16a>
        if (pin_is_input(pin))
    38aa:	4620      	mov	r0, r4
    38ac:	f002 fcc3 	bl	6236 <pin_is_input>
    38b0:	2800      	cmp	r0, #0
    38b2:	d156      	bne.n	3962 <nrfx_gpiote_output_configure+0x16e>
        uint32_t ch = p_task_config->task_ch;
    38b4:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    38b6:	4a2e      	ldr	r2, [pc, #184]	; (3970 <nrfx_gpiote_output_configure+0x17c>)
    38b8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    38bc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    p_reg->CONFIG[idx] = 0;
    38c0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    38c4:	4929      	ldr	r1, [pc, #164]	; (396c <nrfx_gpiote_output_configure+0x178>)
    38c6:	f104 0008 	add.w	r0, r4, #8
    38ca:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    38ce:	f022 0220 	bic.w	r2, r2, #32
    38d2:	04d2      	lsls	r2, r2, #19
    38d4:	0cd2      	lsrs	r2, r2, #19
    38d6:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    38da:	786a      	ldrb	r2, [r5, #1]
    38dc:	b992      	cbnz	r2, 3904 <nrfx_gpiote_output_configure+0x110>
    return NRFX_SUCCESS;
    38de:	4825      	ldr	r0, [pc, #148]	; (3974 <nrfx_gpiote_output_configure+0x180>)
}
    38e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    38e2:	4925      	ldr	r1, [pc, #148]	; (3978 <nrfx_gpiote_output_configure+0x184>)
    38e4:	e7a6      	b.n	3834 <nrfx_gpiote_output_configure+0x40>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    38e6:	2300      	movs	r3, #0
    38e8:	e7ac      	b.n	3844 <nrfx_gpiote_output_configure+0x50>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    38ea:	f04f 0e00 	mov.w	lr, #0
    38ee:	e7af      	b.n	3850 <nrfx_gpiote_output_configure+0x5c>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    38f0:	f04f 0e00 	mov.w	lr, #0
    38f4:	e7b2      	b.n	385c <nrfx_gpiote_output_configure+0x68>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    38f6:	2300      	movs	r3, #0
    38f8:	e7b9      	b.n	386e <nrfx_gpiote_output_configure+0x7a>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    38fa:	f04f 0c00 	mov.w	ip, #0
    38fe:	e7be      	b.n	387e <nrfx_gpiote_output_configure+0x8a>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3900:	2600      	movs	r6, #0
    3902:	e7c2      	b.n	388a <nrfx_gpiote_output_configure+0x96>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3904:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3906:	481a      	ldr	r0, [pc, #104]	; (3970 <nrfx_gpiote_output_configure+0x17c>)
    3908:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    390c:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    3910:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    3914:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    3918:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    391c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    3920:	0221      	lsls	r1, r4, #8
    3922:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3926:	0412      	lsls	r2, r2, #16
    3928:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    392c:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    392e:	0539      	lsls	r1, r7, #20
    3930:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3934:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3936:	4332      	orrs	r2, r6
    3938:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    393c:	035b      	lsls	r3, r3, #13
    393e:	b29b      	uxth	r3, r3
    3940:	4a0a      	ldr	r2, [pc, #40]	; (396c <nrfx_gpiote_output_configure+0x178>)
    3942:	3408      	adds	r4, #8
    3944:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    3948:	430b      	orrs	r3, r1
    394a:	f043 0320 	orr.w	r3, r3, #32
    394e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    3952:	4808      	ldr	r0, [pc, #32]	; (3974 <nrfx_gpiote_output_configure+0x180>)
    3954:	e7c4      	b.n	38e0 <nrfx_gpiote_output_configure+0xec>
    3956:	4809      	ldr	r0, [pc, #36]	; (397c <nrfx_gpiote_output_configure+0x188>)
    3958:	e7c2      	b.n	38e0 <nrfx_gpiote_output_configure+0xec>
    395a:	4808      	ldr	r0, [pc, #32]	; (397c <nrfx_gpiote_output_configure+0x188>)
    395c:	e7c0      	b.n	38e0 <nrfx_gpiote_output_configure+0xec>
    395e:	4805      	ldr	r0, [pc, #20]	; (3974 <nrfx_gpiote_output_configure+0x180>)
    3960:	e7be      	b.n	38e0 <nrfx_gpiote_output_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
    3962:	4806      	ldr	r0, [pc, #24]	; (397c <nrfx_gpiote_output_configure+0x188>)
    3964:	e7bc      	b.n	38e0 <nrfx_gpiote_output_configure+0xec>
    3966:	bf00      	nop
    3968:	50842500 	.word	0x50842500
    396c:	20000048 	.word	0x20000048
    3970:	5000d000 	.word	0x5000d000
    3974:	0bad0000 	.word	0x0bad0000
    3978:	50842800 	.word	0x50842800
    397c:	0bad0004 	.word	0x0bad0004

00003980 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3980:	4b01      	ldr	r3, [pc, #4]	; (3988 <nrfx_gpiote_global_callback_set+0x8>)
    3982:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3984:	60d9      	str	r1, [r3, #12]
}
    3986:	4770      	bx	lr
    3988:	20000048 	.word	0x20000048

0000398c <nrfx_gpiote_channel_get>:
{
    398c:	b538      	push	{r3, r4, r5, lr}
    398e:	4604      	mov	r4, r0
    3990:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    3992:	f7ff fc69 	bl	3268 <pin_in_use_by_te>
    3996:	b140      	cbz	r0, 39aa <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3998:	f104 0008 	add.w	r0, r4, #8
    399c:	4b04      	ldr	r3, [pc, #16]	; (39b0 <nrfx_gpiote_channel_get+0x24>)
    399e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    39a2:	0b5b      	lsrs	r3, r3, #13
    39a4:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    39a6:	4803      	ldr	r0, [pc, #12]	; (39b4 <nrfx_gpiote_channel_get+0x28>)
}
    39a8:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    39aa:	4803      	ldr	r0, [pc, #12]	; (39b8 <nrfx_gpiote_channel_get+0x2c>)
    39ac:	e7fc      	b.n	39a8 <nrfx_gpiote_channel_get+0x1c>
    39ae:	bf00      	nop
    39b0:	20000048 	.word	0x20000048
    39b4:	0bad0000 	.word	0x0bad0000
    39b8:	0bad0004 	.word	0x0bad0004

000039bc <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    39bc:	4b10      	ldr	r3, [pc, #64]	; (3a00 <nrfx_gpiote_init+0x44>)
    39be:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    39c2:	b10b      	cbz	r3, 39c8 <nrfx_gpiote_init+0xc>
        return err_code;
    39c4:	480f      	ldr	r0, [pc, #60]	; (3a04 <nrfx_gpiote_init+0x48>)
}
    39c6:	4770      	bx	lr
{
    39c8:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    39ca:	4c0d      	ldr	r4, [pc, #52]	; (3a00 <nrfx_gpiote_init+0x44>)
    39cc:	2260      	movs	r2, #96	; 0x60
    39ce:	2100      	movs	r1, #0
    39d0:	f104 0010 	add.w	r0, r4, #16
    39d4:	f001 fec3 	bl	575e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    39d8:	200d      	movs	r0, #13
    39da:	f7fd fd6b 	bl	14b4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    39de:	4b0a      	ldr	r3, [pc, #40]	; (3a08 <nrfx_gpiote_init+0x4c>)
    39e0:	2200      	movs	r2, #0
    39e2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    39e6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    39ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    39ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    39f2:	2301      	movs	r3, #1
    39f4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    39f8:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    39fa:	4804      	ldr	r0, [pc, #16]	; (3a0c <nrfx_gpiote_init+0x50>)
}
    39fc:	bd10      	pop	{r4, pc}
    39fe:	bf00      	nop
    3a00:	20000048 	.word	0x20000048
    3a04:	0bad0005 	.word	0x0bad0005
    3a08:	5000d000 	.word	0x5000d000
    3a0c:	0bad0000 	.word	0x0bad0000

00003a10 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3a10:	4b03      	ldr	r3, [pc, #12]	; (3a20 <nrfx_gpiote_is_init+0x10>)
    3a12:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3a16:	3800      	subs	r0, #0
    3a18:	bf18      	it	ne
    3a1a:	2001      	movne	r0, #1
    3a1c:	4770      	bx	lr
    3a1e:	bf00      	nop
    3a20:	20000048 	.word	0x20000048

00003a24 <nrfx_gpiote_channel_free>:
{
    3a24:	b508      	push	{r3, lr}
    3a26:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3a28:	4801      	ldr	r0, [pc, #4]	; (3a30 <nrfx_gpiote_channel_free+0xc>)
    3a2a:	f7ff fad1 	bl	2fd0 <nrfx_flag32_free>
}
    3a2e:	bd08      	pop	{r3, pc}
    3a30:	200000b8 	.word	0x200000b8

00003a34 <nrfx_gpiote_channel_alloc>:
{
    3a34:	b508      	push	{r3, lr}
    3a36:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3a38:	4801      	ldr	r0, [pc, #4]	; (3a40 <nrfx_gpiote_channel_alloc+0xc>)
    3a3a:	f7ff faa5 	bl	2f88 <nrfx_flag32_alloc>
}
    3a3e:	bd08      	pop	{r3, pc}
    3a40:	200000b8 	.word	0x200000b8

00003a44 <nrfx_gpiote_trigger_enable>:
{
    3a44:	b538      	push	{r3, r4, r5, lr}
    3a46:	4604      	mov	r4, r0
    3a48:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3a4a:	f7ff fc0d 	bl	3268 <pin_in_use_by_te>
    3a4e:	b308      	cbz	r0, 3a94 <nrfx_gpiote_trigger_enable+0x50>
    3a50:	4620      	mov	r0, r4
    3a52:	f002 fbf0 	bl	6236 <pin_is_input>
    3a56:	b1e8      	cbz	r0, 3a94 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    3a58:	4620      	mov	r0, r4
    3a5a:	f7ff fc25 	bl	32a8 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3a5e:	0083      	lsls	r3, r0, #2
    3a60:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    3a64:	b29b      	uxth	r3, r3
    3a66:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3a6a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3a6e:	2200      	movs	r2, #0
    3a70:	601a      	str	r2, [r3, #0]
    3a72:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3a74:	4a20      	ldr	r2, [pc, #128]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a76:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    3a7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    3a7e:	f043 0301 	orr.w	r3, r3, #1
    3a82:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    3a86:	b37d      	cbz	r5, 3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3a88:	2301      	movs	r3, #1
    3a8a:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    3a8e:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    3a92:	e029      	b.n	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3a94:	f104 0308 	add.w	r3, r4, #8
    3a98:	4a18      	ldr	r2, [pc, #96]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    3a9e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3aa2:	2b04      	cmp	r3, #4
    3aa4:	d010      	beq.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3aa6:	2b05      	cmp	r3, #5
    3aa8:	d01f      	beq.n	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
    *p_pin = pin_number & 0x1F;
    3aaa:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3aae:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ab0:	2b01      	cmp	r3, #1
    3ab2:	d007      	beq.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
        case 0: return NRF_P0;
    3ab4:	4b12      	ldr	r3, [pc, #72]	; (3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>)
    return p_reg->IN;
    3ab6:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3ab8:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3aba:	f013 0f01 	tst.w	r3, #1
    3abe:	d016      	beq.n	3aee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x56>
    3ac0:	2003      	movs	r0, #3
    3ac2:	e002      	b.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
        case 1: return NRF_P1;
    3ac4:	4b0f      	ldr	r3, [pc, #60]	; (3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>)
    3ac6:	e7f6      	b.n	3ab6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3ac8:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    3aca:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3ace:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ad0:	2c01      	cmp	r4, #1
    3ad2:	d00e      	beq.n	3af2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5a>
        case 0: return NRF_P0;
    3ad4:	490a      	ldr	r1, [pc, #40]	; (3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3ad6:	3280      	adds	r2, #128	; 0x80
    3ad8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    3adc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3ae0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3ae4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3ae8:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3aea:	2002      	movs	r0, #2
    3aec:	e7ed      	b.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3aee:	2002      	movs	r0, #2
    3af0:	e7eb      	b.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
        case 1: return NRF_P1;
    3af2:	4904      	ldr	r1, [pc, #16]	; (3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>)
    3af4:	e7ef      	b.n	3ad6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e>
    3af6:	bf00      	nop
    3af8:	5000d000 	.word	0x5000d000
    3afc:	20000048 	.word	0x20000048
    3b00:	50842500 	.word	0x50842500
    3b04:	50842800 	.word	0x50842800

00003b08 <nrfx_gpiote_trigger_disable>:
{
    3b08:	b510      	push	{r4, lr}
    3b0a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3b0c:	f7ff fbac 	bl	3268 <pin_in_use_by_te>
    3b10:	b1a0      	cbz	r0, 3b3c <nrfx_gpiote_trigger_disable+0x34>
    3b12:	4620      	mov	r0, r4
    3b14:	f002 fb8f 	bl	6236 <pin_is_input>
    3b18:	b180      	cbz	r0, 3b3c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    3b1a:	4620      	mov	r0, r4
    3b1c:	f7ff fbc4 	bl	32a8 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3b20:	2201      	movs	r2, #1
    3b22:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    3b24:	4b0d      	ldr	r3, [pc, #52]	; (3b5c <nrfx_gpiote_trigger_disable+0x54>)
    3b26:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3b2a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3b2e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    3b32:	f022 0203 	bic.w	r2, r2, #3
    3b36:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    3b3a:	e00c      	b.n	3b56 <nrfx_gpiote_trigger_disable+0x4e>
    *p_pin = pin_number & 0x1F;
    3b3c:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    3b40:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b42:	2c01      	cmp	r4, #1
    3b44:	d008      	beq.n	3b58 <nrfx_gpiote_trigger_disable+0x50>
        case 0: return NRF_P0;
    3b46:	4906      	ldr	r1, [pc, #24]	; (3b60 <nrfx_gpiote_trigger_disable+0x58>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3b48:	3380      	adds	r3, #128	; 0x80
    3b4a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    3b4e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    3b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3b56:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    3b58:	4902      	ldr	r1, [pc, #8]	; (3b64 <nrfx_gpiote_trigger_disable+0x5c>)
    3b5a:	e7f5      	b.n	3b48 <nrfx_gpiote_trigger_disable+0x40>
    3b5c:	5000d000 	.word	0x5000d000
    3b60:	50842500 	.word	0x50842500
    3b64:	50842800 	.word	0x50842800

00003b68 <nrfx_gpiote_pin_uninit>:
{
    3b68:	b510      	push	{r4, lr}
    3b6a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3b6c:	f7ff fb72 	bl	3254 <pin_in_use>
    3b70:	b908      	cbnz	r0, 3b76 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    3b72:	480d      	ldr	r0, [pc, #52]	; (3ba8 <nrfx_gpiote_pin_uninit+0x40>)
}
    3b74:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    3b76:	4620      	mov	r0, r4
    3b78:	f7ff ffc6 	bl	3b08 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3b7c:	4620      	mov	r0, r4
    3b7e:	f7ff fc13 	bl	33a8 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    3b82:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3b86:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b88:	2c01      	cmp	r4, #1
    3b8a:	d00b      	beq.n	3ba4 <nrfx_gpiote_pin_uninit+0x3c>
        case 0: return NRF_P0;
    3b8c:	4907      	ldr	r1, [pc, #28]	; (3bac <nrfx_gpiote_pin_uninit+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3b8e:	3280      	adds	r2, #128	; 0x80
    3b90:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    3b94:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3b98:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    3b9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    return NRFX_SUCCESS;
    3ba0:	4803      	ldr	r0, [pc, #12]	; (3bb0 <nrfx_gpiote_pin_uninit+0x48>)
}
    3ba2:	e7e7      	b.n	3b74 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    3ba4:	4903      	ldr	r1, [pc, #12]	; (3bb4 <nrfx_gpiote_pin_uninit+0x4c>)
    3ba6:	e7f2      	b.n	3b8e <nrfx_gpiote_pin_uninit+0x26>
    3ba8:	0bad0004 	.word	0x0bad0004
    3bac:	50842500 	.word	0x50842500
    3bb0:	0bad0000 	.word	0x0bad0000
    3bb4:	50842800 	.word	0x50842800

00003bb8 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3bb8:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3bba:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    3bbc:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3bc0:	2100      	movs	r1, #0
    uint32_t status = 0;
    3bc2:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3bc4:	e003      	b.n	3bce <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    3bc6:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3bc8:	3304      	adds	r3, #4
    3bca:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3bcc:	3101      	adds	r1, #1
    3bce:	2907      	cmp	r1, #7
    3bd0:	d814      	bhi.n	3bfc <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bd2:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3bd6:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3bda:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3bdc:	2a00      	cmp	r2, #0
    3bde:	d0f2      	beq.n	3bc6 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    3be0:	4a0c      	ldr	r2, [pc, #48]	; (3c14 <nrfx_gpiote_irq_handler+0x5c>)
    3be2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3be6:	4210      	tst	r0, r2
    3be8:	d0ed      	beq.n	3bc6 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    3bea:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3bee:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bf2:	2500      	movs	r5, #0
    3bf4:	6015      	str	r5, [r2, #0]
    3bf6:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3bf8:	4304      	orrs	r4, r0
    3bfa:	e7e4      	b.n	3bc6 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bfc:	4b05      	ldr	r3, [pc, #20]	; (3c14 <nrfx_gpiote_irq_handler+0x5c>)
    3bfe:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3c02:	b91b      	cbnz	r3, 3c0c <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    3c04:	4620      	mov	r0, r4
    3c06:	f7ff fc23 	bl	3450 <gpiote_evt_handle>
}
    3c0a:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    3c0c:	f7ff fcd0 	bl	35b0 <port_event_handle>
    3c10:	e7f8      	b.n	3c04 <nrfx_gpiote_irq_handler+0x4c>
    3c12:	bf00      	nop
    3c14:	5000d000 	.word	0x5000d000

00003c18 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3c18:	4b03      	ldr	r3, [pc, #12]	; (3c28 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    3c1a:	e000      	b.n	3c1e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    3c1c:	3318      	adds	r3, #24
	while (dev < __device_end) {
    3c1e:	4a03      	ldr	r2, [pc, #12]	; (3c2c <z_device_state_init+0x14>)
    3c20:	4293      	cmp	r3, r2
    3c22:	d3fb      	bcc.n	3c1c <z_device_state_init+0x4>
	}
}
    3c24:	4770      	bx	lr
    3c26:	bf00      	nop
    3c28:	0000673c 	.word	0x0000673c
    3c2c:	0000679c 	.word	0x0000679c

00003c30 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    3c30:	b570      	push	{r4, r5, r6, lr}
    3c32:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3c34:	4b11      	ldr	r3, [pc, #68]	; (3c7c <z_sys_init_run_level+0x4c>)
    3c36:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3c3a:	e009      	b.n	3c50 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3c3c:	4240      	negs	r0, r0
    3c3e:	e017      	b.n	3c70 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    3c40:	68eb      	ldr	r3, [r5, #12]
    3c42:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3c44:	68ea      	ldr	r2, [r5, #12]
    3c46:	7853      	ldrb	r3, [r2, #1]
    3c48:	f043 0301 	orr.w	r3, r3, #1
    3c4c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3c4e:	3408      	adds	r4, #8
    3c50:	1c73      	adds	r3, r6, #1
    3c52:	4a0a      	ldr	r2, [pc, #40]	; (3c7c <z_sys_init_run_level+0x4c>)
    3c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3c58:	42a3      	cmp	r3, r4
    3c5a:	d90d      	bls.n	3c78 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3c5c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    3c5e:	6823      	ldr	r3, [r4, #0]
    3c60:	4628      	mov	r0, r5
    3c62:	4798      	blx	r3
		if (dev != NULL) {
    3c64:	2d00      	cmp	r5, #0
    3c66:	d0f2      	beq.n	3c4e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3c68:	2800      	cmp	r0, #0
    3c6a:	d0eb      	beq.n	3c44 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3c6c:	2800      	cmp	r0, #0
    3c6e:	dbe5      	blt.n	3c3c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    3c70:	28ff      	cmp	r0, #255	; 0xff
    3c72:	dde5      	ble.n	3c40 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3c74:	20ff      	movs	r0, #255	; 0xff
    3c76:	e7e3      	b.n	3c40 <z_sys_init_run_level+0x10>
		}
	}
}
    3c78:	bd70      	pop	{r4, r5, r6, pc}
    3c7a:	bf00      	nop
    3c7c:	00006c24 	.word	0x00006c24

00003c80 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3c80:	b510      	push	{r4, lr}
    3c82:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    3c84:	4c11      	ldr	r4, [pc, #68]	; (3ccc <init_idle_thread+0x4c>)
    3c86:	23b0      	movs	r3, #176	; 0xb0
    3c88:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    3c8c:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3c90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3c94:	4b0e      	ldr	r3, [pc, #56]	; (3cd0 <init_idle_thread+0x50>)
    3c96:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
    3c9a:	4b0e      	ldr	r3, [pc, #56]	; (3cd4 <init_idle_thread+0x54>)
    3c9c:	9305      	str	r3, [sp, #20]
    3c9e:	2301      	movs	r3, #1
    3ca0:	9304      	str	r3, [sp, #16]
    3ca2:	230f      	movs	r3, #15
    3ca4:	9303      	str	r3, [sp, #12]
    3ca6:	2300      	movs	r3, #0
    3ca8:	9302      	str	r3, [sp, #8]
    3caa:	9301      	str	r3, [sp, #4]
    3cac:	9000      	str	r0, [sp, #0]
    3cae:	4b0a      	ldr	r3, [pc, #40]	; (3cd8 <init_idle_thread+0x58>)
    3cb0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3cb4:	4909      	ldr	r1, [pc, #36]	; (3cdc <init_idle_thread+0x5c>)
    3cb6:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    3cba:	4620      	mov	r0, r4
    3cbc:	f000 f948 	bl	3f50 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3cc0:	7b63      	ldrb	r3, [r4, #13]
    3cc2:	f023 0304 	bic.w	r3, r3, #4
    3cc6:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3cc8:	b006      	add	sp, #24
    3cca:	bd10      	pop	{r4, pc}
    3ccc:	200001b0 	.word	0x200001b0
    3cd0:	20000968 	.word	0x20000968
    3cd4:	00006c3c 	.word	0x00006c3c
    3cd8:	000040ad 	.word	0x000040ad
    3cdc:	20000f80 	.word	0x20000f80

00003ce0 <bg_thread_main>:
{
    3ce0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3ce2:	4b0a      	ldr	r3, [pc, #40]	; (3d0c <bg_thread_main+0x2c>)
    3ce4:	2201      	movs	r2, #1
    3ce6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3ce8:	2002      	movs	r0, #2
    3cea:	f7ff ffa1 	bl	3c30 <z_sys_init_run_level>
	boot_banner();
    3cee:	f001 f88d 	bl	4e0c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3cf2:	2003      	movs	r0, #3
    3cf4:	f7ff ff9c 	bl	3c30 <z_sys_init_run_level>
	z_init_static_threads();
    3cf8:	f000 f98e 	bl	4018 <z_init_static_threads>
	main();
    3cfc:	f7fc fb96 	bl	42c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3d00:	4a03      	ldr	r2, [pc, #12]	; (3d10 <bg_thread_main+0x30>)
    3d02:	7b13      	ldrb	r3, [r2, #12]
    3d04:	f023 0301 	bic.w	r3, r3, #1
    3d08:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3d0a:	bd08      	pop	{r3, pc}
    3d0c:	20000b7d 	.word	0x20000b7d
    3d10:	20000260 	.word	0x20000260

00003d14 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3d14:	b508      	push	{r3, lr}
    3d16:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3d18:	4a01      	ldr	r2, [pc, #4]	; (3d20 <switch_to_main_thread+0xc>)
    3d1a:	4802      	ldr	r0, [pc, #8]	; (3d24 <switch_to_main_thread+0x10>)
    3d1c:	f7fd fc98 	bl	1650 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3d20:	00003ce1 	.word	0x00003ce1
    3d24:	20000260 	.word	0x20000260

00003d28 <z_bss_zero>:
{
    3d28:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3d2a:	4803      	ldr	r0, [pc, #12]	; (3d38 <z_bss_zero+0x10>)
    3d2c:	4a03      	ldr	r2, [pc, #12]	; (3d3c <z_bss_zero+0x14>)
    3d2e:	1a12      	subs	r2, r2, r0
    3d30:	2100      	movs	r1, #0
    3d32:	f002 fab5 	bl	62a0 <z_early_memset>
}
    3d36:	bd08      	pop	{r3, pc}
    3d38:	20000190 	.word	0x20000190
    3d3c:	20000b80 	.word	0x20000b80

00003d40 <z_init_cpu>:
{
    3d40:	b510      	push	{r4, lr}
    3d42:	4604      	mov	r4, r0
	init_idle_thread(id);
    3d44:	f7ff ff9c 	bl	3c80 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3d48:	490a      	ldr	r1, [pc, #40]	; (3d74 <z_init_cpu+0x34>)
    3d4a:	23b0      	movs	r3, #176	; 0xb0
    3d4c:	fb03 1104 	mla	r1, r3, r4, r1
    3d50:	4a09      	ldr	r2, [pc, #36]	; (3d78 <z_init_cpu+0x38>)
    3d52:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3d56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3d5a:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    3d5c:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3d5e:	4b07      	ldr	r3, [pc, #28]	; (3d7c <z_init_cpu+0x3c>)
    3d60:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    3d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    3d68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3d6c:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    3d70:	6063      	str	r3, [r4, #4]
}
    3d72:	bd10      	pop	{r4, pc}
    3d74:	200001b0 	.word	0x200001b0
    3d78:	20000968 	.word	0x20000968
    3d7c:	200010c0 	.word	0x200010c0

00003d80 <prepare_multithreading>:
{
    3d80:	b570      	push	{r4, r5, r6, lr}
    3d82:	b086      	sub	sp, #24
	z_sched_init();
    3d84:	f000 fddc 	bl	4940 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    3d88:	4d10      	ldr	r5, [pc, #64]	; (3dcc <prepare_multithreading+0x4c>)
    3d8a:	4b11      	ldr	r3, [pc, #68]	; (3dd0 <prepare_multithreading+0x50>)
    3d8c:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3d8e:	4b11      	ldr	r3, [pc, #68]	; (3dd4 <prepare_multithreading+0x54>)
    3d90:	9305      	str	r3, [sp, #20]
    3d92:	2301      	movs	r3, #1
    3d94:	9304      	str	r3, [sp, #16]
    3d96:	2400      	movs	r4, #0
    3d98:	9403      	str	r4, [sp, #12]
    3d9a:	9402      	str	r4, [sp, #8]
    3d9c:	9401      	str	r4, [sp, #4]
    3d9e:	9400      	str	r4, [sp, #0]
    3da0:	4b0d      	ldr	r3, [pc, #52]	; (3dd8 <prepare_multithreading+0x58>)
    3da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3da6:	490d      	ldr	r1, [pc, #52]	; (3ddc <prepare_multithreading+0x5c>)
    3da8:	4628      	mov	r0, r5
    3daa:	f000 f8d1 	bl	3f50 <z_setup_new_thread>
    3dae:	4606      	mov	r6, r0
    3db0:	7b6b      	ldrb	r3, [r5, #13]
    3db2:	f023 0304 	bic.w	r3, r3, #4
    3db6:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    3db8:	4628      	mov	r0, r5
    3dba:	f002 fb40 	bl	643e <z_ready_thread>
	z_init_cpu(0);
    3dbe:	4620      	mov	r0, r4
    3dc0:	f7ff ffbe 	bl	3d40 <z_init_cpu>
}
    3dc4:	4630      	mov	r0, r6
    3dc6:	b006      	add	sp, #24
    3dc8:	bd70      	pop	{r4, r5, r6, pc}
    3dca:	bf00      	nop
    3dcc:	20000260 	.word	0x20000260
    3dd0:	20000968 	.word	0x20000968
    3dd4:	00006c44 	.word	0x00006c44
    3dd8:	00003ce1 	.word	0x00003ce1
    3ddc:	20000b80 	.word	0x20000b80

00003de0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3de0:	b500      	push	{lr}
    3de2:	b0ad      	sub	sp, #180	; 0xb4
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3de4:	4b1d      	ldr	r3, [pc, #116]	; (3e5c <z_cstart+0x7c>)
	uint32_t msp =
    3de6:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3dea:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3dee:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3df2:	4c1b      	ldr	r4, [pc, #108]	; (3e60 <z_cstart+0x80>)
    3df4:	23e0      	movs	r3, #224	; 0xe0
    3df6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3dfa:	2500      	movs	r5, #0
    3dfc:	77e5      	strb	r5, [r4, #31]
    3dfe:	7625      	strb	r5, [r4, #24]
    3e00:	7665      	strb	r5, [r4, #25]
    3e02:	76a5      	strb	r5, [r4, #26]
    3e04:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e0a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3e0e:	6263      	str	r3, [r4, #36]	; 0x24
    3e10:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3e14:	f7fd fd60 	bl	18d8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3e18:	f7fd fb2e 	bl	1478 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3e1c:	f04f 33ff 	mov.w	r3, #4294967295
    3e20:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3e22:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3e24:	f7fd ffba 	bl	1d9c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3e28:	f7fd fe20 	bl	1a6c <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    3e2c:	2401      	movs	r4, #1
    3e2e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3e32:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3e36:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    3e38:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    3e3a:	9529      	str	r5, [sp, #164]	; 0xa4
#endif

	_current_cpu->current = dummy_thread;
    3e3c:	4b09      	ldr	r3, [pc, #36]	; (3e64 <z_cstart+0x84>)
    3e3e:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3e42:	f7ff fee9 	bl	3c18 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3e46:	4628      	mov	r0, r5
    3e48:	f7ff fef2 	bl	3c30 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3e4c:	4620      	mov	r0, r4
    3e4e:	f7ff feef 	bl	3c30 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3e52:	f7ff ff95 	bl	3d80 <prepare_multithreading>
    3e56:	f7ff ff5d 	bl	3d14 <switch_to_main_thread>
    3e5a:	bf00      	nop
    3e5c:	200010c0 	.word	0x200010c0
    3e60:	e000ed00 	.word	0xe000ed00
    3e64:	20000968 	.word	0x20000968

00003e68 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3e68:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3e6a:	4c06      	ldr	r4, [pc, #24]	; (3e84 <init_mem_slab_module+0x1c>)
	int rc = 0;
    3e6c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3e6e:	e000      	b.n	3e72 <init_mem_slab_module+0xa>
    3e70:	341c      	adds	r4, #28
    3e72:	4b05      	ldr	r3, [pc, #20]	; (3e88 <init_mem_slab_module+0x20>)
    3e74:	429c      	cmp	r4, r3
    3e76:	d204      	bcs.n	3e82 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3e78:	4620      	mov	r0, r4
    3e7a:	f002 fa19 	bl	62b0 <create_free_list>
		if (rc < 0) {
    3e7e:	2800      	cmp	r0, #0
    3e80:	daf6      	bge.n	3e70 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    3e82:	bd10      	pop	{r4, pc}
    3e84:	2000013c 	.word	0x2000013c
    3e88:	2000013c 	.word	0x2000013c

00003e8c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3e8c:	b530      	push	{r4, r5, lr}
    3e8e:	b083      	sub	sp, #12
    3e90:	460d      	mov	r5, r1
	__asm__ volatile(
    3e92:	f04f 0420 	mov.w	r4, #32
    3e96:	f3ef 8111 	mrs	r1, BASEPRI
    3e9a:	f384 8812 	msr	BASEPRI_MAX, r4
    3e9e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3ea2:	6944      	ldr	r4, [r0, #20]
    3ea4:	b16c      	cbz	r4, 3ec2 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    3ea6:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3ea8:	6943      	ldr	r3, [r0, #20]
    3eaa:	681b      	ldr	r3, [r3, #0]
    3eac:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3eae:	6983      	ldr	r3, [r0, #24]
    3eb0:	3301      	adds	r3, #1
    3eb2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3eb4:	2000      	movs	r0, #0
	__asm__ volatile(
    3eb6:	f381 8811 	msr	BASEPRI, r1
    3eba:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    3ebe:	b003      	add	sp, #12
    3ec0:	bd30      	pop	{r4, r5, pc}
    3ec2:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3ec6:	ea53 0402 	orrs.w	r4, r3, r2
    3eca:	d104      	bne.n	3ed6 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    3ecc:	2300      	movs	r3, #0
    3ece:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3ed0:	f06f 000b 	mvn.w	r0, #11
    3ed4:	e7ef      	b.n	3eb6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3ed6:	9200      	str	r2, [sp, #0]
    3ed8:	9301      	str	r3, [sp, #4]
    3eda:	4602      	mov	r2, r0
    3edc:	4660      	mov	r0, ip
    3ede:	f000 fc03 	bl	46e8 <z_pend_curr>
		if (result == 0) {
    3ee2:	2800      	cmp	r0, #0
    3ee4:	d1eb      	bne.n	3ebe <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    3ee6:	4b02      	ldr	r3, [pc, #8]	; (3ef0 <k_mem_slab_alloc+0x64>)
    3ee8:	689b      	ldr	r3, [r3, #8]
    3eea:	695b      	ldr	r3, [r3, #20]
    3eec:	602b      	str	r3, [r5, #0]
		return result;
    3eee:	e7e6      	b.n	3ebe <k_mem_slab_alloc+0x32>
    3ef0:	20000968 	.word	0x20000968

00003ef4 <z_thread_monitor_exit>:
	__asm__ volatile(
    3ef4:	f04f 0320 	mov.w	r3, #32
    3ef8:	f3ef 8111 	mrs	r1, BASEPRI
    3efc:	f383 8812 	msr	BASEPRI_MAX, r3
    3f00:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3f04:	4b0a      	ldr	r3, [pc, #40]	; (3f30 <z_thread_monitor_exit+0x3c>)
    3f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f08:	4283      	cmp	r3, r0
    3f0a:	d104      	bne.n	3f16 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    3f0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3f0e:	4b08      	ldr	r3, [pc, #32]	; (3f30 <z_thread_monitor_exit+0x3c>)
    3f10:	629a      	str	r2, [r3, #40]	; 0x28
    3f12:	e007      	b.n	3f24 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3f14:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3f16:	b113      	cbz	r3, 3f1e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3f18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    3f1a:	4282      	cmp	r2, r0
    3f1c:	d1fa      	bne.n	3f14 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    3f1e:	b10b      	cbz	r3, 3f24 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3f20:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3f22:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3f24:	f381 8811 	msr	BASEPRI, r1
    3f28:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    3f2c:	4770      	bx	lr
    3f2e:	bf00      	nop
    3f30:	20000968 	.word	0x20000968

00003f34 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3f34:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3f36:	ea53 0102 	orrs.w	r1, r3, r2
    3f3a:	d102      	bne.n	3f42 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    3f3c:	f002 fa1b 	bl	6376 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3f40:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3f42:	4902      	ldr	r1, [pc, #8]	; (3f4c <schedule_new_thread+0x18>)
    3f44:	3018      	adds	r0, #24
    3f46:	f000 fe53 	bl	4bf0 <z_add_timeout>
    3f4a:	e7f9      	b.n	3f40 <schedule_new_thread+0xc>
    3f4c:	00006477 	.word	0x00006477

00003f50 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f54:	b085      	sub	sp, #20
    3f56:	4604      	mov	r4, r0
    3f58:	460f      	mov	r7, r1
    3f5a:	4615      	mov	r5, r2
    3f5c:	461e      	mov	r6, r3
    3f5e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3f62:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3f66:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    3f6a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3f6e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3f72:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    3f74:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    3f76:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3f78:	2204      	movs	r2, #4
    3f7a:	9911      	ldr	r1, [sp, #68]	; 0x44
    3f7c:	f002 f9ff 	bl	637e <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    3f80:	462a      	mov	r2, r5
    3f82:	4639      	mov	r1, r7
    3f84:	4620      	mov	r0, r4
    3f86:	f002 f9e4 	bl	6352 <setup_thread_stack>
    3f8a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3f8c:	f8cd 8008 	str.w	r8, [sp, #8]
    3f90:	f8cd 9004 	str.w	r9, [sp, #4]
    3f94:	f8cd a000 	str.w	sl, [sp]
    3f98:	4633      	mov	r3, r6
    3f9a:	4602      	mov	r2, r0
    3f9c:	4639      	mov	r1, r7
    3f9e:	4620      	mov	r0, r4
    3fa0:	f7fd fb34 	bl	160c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    3fa4:	2300      	movs	r3, #0
    3fa6:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    3fa8:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    3faa:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    3fae:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    3fb2:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    3fb6:	f04f 0320 	mov.w	r3, #32
    3fba:	f3ef 8211 	mrs	r2, BASEPRI
    3fbe:	f383 8812 	msr	BASEPRI_MAX, r3
    3fc2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    3fc6:	4b13      	ldr	r3, [pc, #76]	; (4014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
    3fc8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3fca:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    3fcc:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    3fce:	f382 8811 	msr	BASEPRI, r2
    3fd2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    3fd6:	f1bb 0f00 	cmp.w	fp, #0
    3fda:	d013      	beq.n	4004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
		strncpy(new_thread->name, name,
    3fdc:	221f      	movs	r2, #31
    3fde:	4659      	mov	r1, fp
    3fe0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    3fe4:	f001 fb5f 	bl	56a6 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3fe8:	2300      	movs	r3, #0
    3fea:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3fee:	4b09      	ldr	r3, [pc, #36]	; (4014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
    3ff0:	689b      	ldr	r3, [r3, #8]
    3ff2:	b15b      	cbz	r3, 400c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3ff4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3ff8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    3ffc:	4628      	mov	r0, r5
    3ffe:	b005      	add	sp, #20
    4000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    4004:	2300      	movs	r3, #0
    4006:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    400a:	e7f0      	b.n	3fee <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    400c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    4010:	e7f4      	b.n	3ffc <z_setup_new_thread+0xac>
    4012:	bf00      	nop
    4014:	20000968 	.word	0x20000968

00004018 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    4018:	b530      	push	{r4, r5, lr}
    401a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    401c:	4c21      	ldr	r4, [pc, #132]	; (40a4 <z_init_static_threads+0x8c>)
    401e:	e014      	b.n	404a <z_init_static_threads+0x32>
		z_setup_new_thread(
    4020:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4022:	9305      	str	r3, [sp, #20]
    4024:	6a23      	ldr	r3, [r4, #32]
    4026:	9304      	str	r3, [sp, #16]
    4028:	69e3      	ldr	r3, [r4, #28]
    402a:	9303      	str	r3, [sp, #12]
    402c:	69a3      	ldr	r3, [r4, #24]
    402e:	9302      	str	r3, [sp, #8]
    4030:	6963      	ldr	r3, [r4, #20]
    4032:	9301      	str	r3, [sp, #4]
    4034:	6923      	ldr	r3, [r4, #16]
    4036:	9300      	str	r3, [sp, #0]
    4038:	68e3      	ldr	r3, [r4, #12]
    403a:	68a2      	ldr	r2, [r4, #8]
    403c:	6861      	ldr	r1, [r4, #4]
    403e:	6820      	ldr	r0, [r4, #0]
    4040:	f7ff ff86 	bl	3f50 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    4044:	6823      	ldr	r3, [r4, #0]
    4046:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4048:	3430      	adds	r4, #48	; 0x30
    404a:	4b17      	ldr	r3, [pc, #92]	; (40a8 <z_init_static_threads+0x90>)
    404c:	429c      	cmp	r4, r3
    404e:	d3e7      	bcc.n	4020 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    4050:	f000 f9de 	bl	4410 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4054:	4c13      	ldr	r4, [pc, #76]	; (40a4 <z_init_static_threads+0x8c>)
    4056:	e000      	b.n	405a <z_init_static_threads+0x42>
    4058:	3430      	adds	r4, #48	; 0x30
    405a:	4b13      	ldr	r3, [pc, #76]	; (40a8 <z_init_static_threads+0x90>)
    405c:	429c      	cmp	r4, r3
    405e:	d21c      	bcs.n	409a <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4060:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4062:	f1b0 3fff 	cmp.w	r0, #4294967295
    4066:	d0f7      	beq.n	4058 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    4068:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    406a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    406e:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4070:	03c9      	lsls	r1, r1, #15
    4072:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4076:	03c0      	lsls	r0, r0, #15
    4078:	f240 33e7 	movw	r3, #999	; 0x3e7
    407c:	18c0      	adds	r0, r0, r3
    407e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4082:	f04f 0300 	mov.w	r3, #0
    4086:	f141 0100 	adc.w	r1, r1, #0
    408a:	f7fc f863 	bl	154 <__aeabi_uldivmod>
    408e:	4602      	mov	r2, r0
    4090:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    4092:	4628      	mov	r0, r5
    4094:	f7ff ff4e 	bl	3f34 <schedule_new_thread>
    4098:	e7de      	b.n	4058 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    409a:	f000 fbdb 	bl	4854 <k_sched_unlock>
}
    409e:	b007      	add	sp, #28
    40a0:	bd30      	pop	{r4, r5, pc}
    40a2:	bf00      	nop
    40a4:	2000013c 	.word	0x2000013c
    40a8:	2000013c 	.word	0x2000013c

000040ac <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    40ac:	b508      	push	{r3, lr}
    40ae:	e001      	b.n	40b4 <idle+0x8>
	arch_cpu_idle();
    40b0:	f7fd f9e8 	bl	1484 <arch_cpu_idle>
	__asm__ volatile(
    40b4:	f04f 0220 	mov.w	r2, #32
    40b8:	f3ef 8311 	mrs	r3, BASEPRI
    40bc:	f382 8812 	msr	BASEPRI_MAX, r2
    40c0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    40c4:	f002 fabf 	bl	6646 <z_get_next_timeout_expiry>
    40c8:	4b05      	ldr	r3, [pc, #20]	; (40e0 <idle+0x34>)
    40ca:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    40cc:	4b05      	ldr	r3, [pc, #20]	; (40e4 <idle+0x38>)
    40ce:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    40d0:	2b00      	cmp	r3, #0
    40d2:	d0ed      	beq.n	40b0 <idle+0x4>
    40d4:	f7fc ffd8 	bl	1088 <pm_system_suspend>
    40d8:	2800      	cmp	r0, #0
    40da:	d1eb      	bne.n	40b4 <idle+0x8>
    40dc:	e7e8      	b.n	40b0 <idle+0x4>
    40de:	bf00      	nop
    40e0:	20000968 	.word	0x20000968
    40e4:	20000b7d 	.word	0x20000b7d

000040e8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    40e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    40ec:	b083      	sub	sp, #12
    40ee:	4604      	mov	r4, r0
    40f0:	461d      	mov	r5, r3
    40f2:	f04f 0320 	mov.w	r3, #32
    40f6:	f3ef 8711 	mrs	r7, BASEPRI
    40fa:	f383 8812 	msr	BASEPRI_MAX, r3
    40fe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4102:	68c1      	ldr	r1, [r0, #12]
    4104:	b999      	cbnz	r1, 412e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    4106:	2900      	cmp	r1, #0
    4108:	d14f      	bne.n	41aa <z_impl_k_mutex_lock+0xc2>
    410a:	4b3a      	ldr	r3, [pc, #232]	; (41f4 <z_impl_k_mutex_lock+0x10c>)
    410c:	689b      	ldr	r3, [r3, #8]
    410e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4112:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    4114:	3101      	adds	r1, #1
    4116:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    4118:	4b36      	ldr	r3, [pc, #216]	; (41f4 <z_impl_k_mutex_lock+0x10c>)
    411a:	689b      	ldr	r3, [r3, #8]
    411c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    411e:	f387 8811 	msr	BASEPRI, r7
    4122:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    4126:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4128:	b003      	add	sp, #12
    412a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    412e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4130:	6882      	ldr	r2, [r0, #8]
    4132:	4b30      	ldr	r3, [pc, #192]	; (41f4 <z_impl_k_mutex_lock+0x10c>)
    4134:	689b      	ldr	r3, [r3, #8]
    4136:	429a      	cmp	r2, r3
    4138:	d0e5      	beq.n	4106 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    413a:	ea55 0106 	orrs.w	r1, r5, r6
    413e:	bf0c      	ite	eq
    4140:	f04f 0801 	moveq.w	r8, #1
    4144:	f04f 0800 	movne.w	r8, #0
    4148:	d031      	beq.n	41ae <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    414a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    414e:	4649      	mov	r1, r9
    4150:	f993 000e 	ldrsb.w	r0, [r3, #14]
    4154:	f002 f924 	bl	63a0 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4158:	4581      	cmp	r9, r0
    415a:	dc2f      	bgt.n	41bc <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    415c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4160:	9600      	str	r6, [sp, #0]
    4162:	9501      	str	r5, [sp, #4]
    4164:	4622      	mov	r2, r4
    4166:	4639      	mov	r1, r7
    4168:	4823      	ldr	r0, [pc, #140]	; (41f8 <z_impl_k_mutex_lock+0x110>)
    416a:	f000 fabd 	bl	46e8 <z_pend_curr>
	if (got_mutex == 0) {
    416e:	2800      	cmp	r0, #0
    4170:	d0da      	beq.n	4128 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    4172:	f04f 0320 	mov.w	r3, #32
    4176:	f3ef 8511 	mrs	r5, BASEPRI
    417a:	f383 8812 	msr	BASEPRI_MAX, r3
    417e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4182:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4184:	429c      	cmp	r4, r3
    4186:	d01f      	beq.n	41c8 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4188:	b1f3      	cbz	r3, 41c8 <z_impl_k_mutex_lock+0xe0>
    418a:	6921      	ldr	r1, [r4, #16]
    418c:	f993 000e 	ldrsb.w	r0, [r3, #14]
    4190:	f002 f906 	bl	63a0 <new_prio_for_inheritance>
    4194:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4196:	4620      	mov	r0, r4
    4198:	f002 f90d 	bl	63b6 <adjust_owner_prio>
    419c:	b9b0      	cbnz	r0, 41cc <z_impl_k_mutex_lock+0xe4>
    419e:	f1b9 0f00 	cmp.w	r9, #0
    41a2:	d015      	beq.n	41d0 <z_impl_k_mutex_lock+0xe8>
    41a4:	f04f 0801 	mov.w	r8, #1
    41a8:	e012      	b.n	41d0 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    41aa:	6923      	ldr	r3, [r4, #16]
    41ac:	e7b1      	b.n	4112 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    41ae:	f387 8811 	msr	BASEPRI, r7
    41b2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    41b6:	f06f 000f 	mvn.w	r0, #15
    41ba:	e7b5      	b.n	4128 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    41bc:	4601      	mov	r1, r0
    41be:	4620      	mov	r0, r4
    41c0:	f002 f8f9 	bl	63b6 <adjust_owner_prio>
    41c4:	4681      	mov	r9, r0
    41c6:	e7cb      	b.n	4160 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    41c8:	6921      	ldr	r1, [r4, #16]
    41ca:	e7e4      	b.n	4196 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    41cc:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    41d0:	f1b8 0f00 	cmp.w	r8, #0
    41d4:	d106      	bne.n	41e4 <z_impl_k_mutex_lock+0xfc>
    41d6:	f385 8811 	msr	BASEPRI, r5
    41da:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    41de:	f06f 000a 	mvn.w	r0, #10
    41e2:	e7a1      	b.n	4128 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    41e4:	4629      	mov	r1, r5
    41e6:	4804      	ldr	r0, [pc, #16]	; (41f8 <z_impl_k_mutex_lock+0x110>)
    41e8:	f000 f8f6 	bl	43d8 <z_reschedule>
	return -EAGAIN;
    41ec:	f06f 000a 	mvn.w	r0, #10
    41f0:	e79a      	b.n	4128 <z_impl_k_mutex_lock+0x40>
    41f2:	bf00      	nop
    41f4:	20000968 	.word	0x20000968
    41f8:	20000994 	.word	0x20000994

000041fc <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    41fc:	6882      	ldr	r2, [r0, #8]
    41fe:	2a00      	cmp	r2, #0
    4200:	d035      	beq.n	426e <z_impl_k_mutex_unlock+0x72>
{
    4202:	b538      	push	{r3, r4, r5, lr}
    4204:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4206:	4b1d      	ldr	r3, [pc, #116]	; (427c <z_impl_k_mutex_unlock+0x80>)
    4208:	689b      	ldr	r3, [r3, #8]
    420a:	429a      	cmp	r2, r3
    420c:	d132      	bne.n	4274 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    420e:	7bda      	ldrb	r2, [r3, #15]
    4210:	3a01      	subs	r2, #1
    4212:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4214:	68c3      	ldr	r3, [r0, #12]
    4216:	2b01      	cmp	r3, #1
    4218:	d905      	bls.n	4226 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    421a:	3b01      	subs	r3, #1
    421c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    421e:	f000 fb19 	bl	4854 <k_sched_unlock>

	return 0;
    4222:	2000      	movs	r0, #0
}
    4224:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4226:	f04f 0320 	mov.w	r3, #32
    422a:	f3ef 8511 	mrs	r5, BASEPRI
    422e:	f383 8812 	msr	BASEPRI_MAX, r3
    4232:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4236:	6901      	ldr	r1, [r0, #16]
    4238:	f002 f8bd 	bl	63b6 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    423c:	4620      	mov	r0, r4
    423e:	f002 f99e 	bl	657e <z_unpend_first_thread>
	mutex->owner = new_owner;
    4242:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4244:	b160      	cbz	r0, 4260 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    4246:	f990 300e 	ldrsb.w	r3, [r0, #14]
    424a:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    424c:	2300      	movs	r3, #0
    424e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    4252:	f002 f8f4 	bl	643e <z_ready_thread>
		z_reschedule(&lock, key);
    4256:	4629      	mov	r1, r5
    4258:	4809      	ldr	r0, [pc, #36]	; (4280 <z_impl_k_mutex_unlock+0x84>)
    425a:	f000 f8bd 	bl	43d8 <z_reschedule>
    425e:	e7de      	b.n	421e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    4260:	2300      	movs	r3, #0
    4262:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    4264:	f385 8811 	msr	BASEPRI, r5
    4268:	f3bf 8f6f 	isb	sy
    426c:	e7d7      	b.n	421e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    426e:	f06f 0015 	mvn.w	r0, #21
}
    4272:	4770      	bx	lr
		return -EPERM;
    4274:	f04f 30ff 	mov.w	r0, #4294967295
    4278:	e7d4      	b.n	4224 <z_impl_k_mutex_unlock+0x28>
    427a:	bf00      	nop
    427c:	20000968 	.word	0x20000968
    4280:	20000994 	.word	0x20000994

00004284 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4284:	b538      	push	{r3, r4, r5, lr}
    4286:	4604      	mov	r4, r0
	__asm__ volatile(
    4288:	f04f 0320 	mov.w	r3, #32
    428c:	f3ef 8511 	mrs	r5, BASEPRI
    4290:	f383 8812 	msr	BASEPRI_MAX, r3
    4294:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4298:	f002 f971 	bl	657e <z_unpend_first_thread>

	if (thread != NULL) {
    429c:	b148      	cbz	r0, 42b2 <z_impl_k_sem_give+0x2e>
    429e:	2200      	movs	r2, #0
    42a0:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    42a4:	f002 f8cb 	bl	643e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    42a8:	4629      	mov	r1, r5
    42aa:	4807      	ldr	r0, [pc, #28]	; (42c8 <z_impl_k_sem_give+0x44>)
    42ac:	f000 f894 	bl	43d8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    42b0:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    42b2:	68a3      	ldr	r3, [r4, #8]
    42b4:	68e2      	ldr	r2, [r4, #12]
    42b6:	4293      	cmp	r3, r2
    42b8:	d003      	beq.n	42c2 <z_impl_k_sem_give+0x3e>
    42ba:	2201      	movs	r2, #1
    42bc:	4413      	add	r3, r2
    42be:	60a3      	str	r3, [r4, #8]
}
    42c0:	e7f2      	b.n	42a8 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    42c2:	2200      	movs	r2, #0
    42c4:	e7fa      	b.n	42bc <z_impl_k_sem_give+0x38>
    42c6:	bf00      	nop
    42c8:	20000994 	.word	0x20000994

000042cc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    42cc:	b510      	push	{r4, lr}
    42ce:	b082      	sub	sp, #8
    42d0:	f04f 0420 	mov.w	r4, #32
    42d4:	f3ef 8111 	mrs	r1, BASEPRI
    42d8:	f384 8812 	msr	BASEPRI_MAX, r4
    42dc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    42e0:	6884      	ldr	r4, [r0, #8]
    42e2:	b144      	cbz	r4, 42f6 <z_impl_k_sem_take+0x2a>
		sem->count--;
    42e4:	3c01      	subs	r4, #1
    42e6:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    42e8:	f381 8811 	msr	BASEPRI, r1
    42ec:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    42f0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    42f2:	b002      	add	sp, #8
    42f4:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    42f6:	ea53 0402 	orrs.w	r4, r3, r2
    42fa:	d006      	beq.n	430a <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    42fc:	9200      	str	r2, [sp, #0]
    42fe:	9301      	str	r3, [sp, #4]
    4300:	4602      	mov	r2, r0
    4302:	4805      	ldr	r0, [pc, #20]	; (4318 <z_impl_k_sem_take+0x4c>)
    4304:	f000 f9f0 	bl	46e8 <z_pend_curr>
	return ret;
    4308:	e7f3      	b.n	42f2 <z_impl_k_sem_take+0x26>
    430a:	f381 8811 	msr	BASEPRI, r1
    430e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4312:	f06f 000f 	mvn.w	r0, #15
    4316:	e7ec      	b.n	42f2 <z_impl_k_sem_take+0x26>
    4318:	20000994 	.word	0x20000994

0000431c <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    431c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4320:	bf08      	it	eq
    4322:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4326:	d100      	bne.n	432a <add_thread_timeout+0xe>
    4328:	4770      	bx	lr
{
    432a:	b508      	push	{r3, lr}
    432c:	4902      	ldr	r1, [pc, #8]	; (4338 <add_thread_timeout+0x1c>)
    432e:	3018      	adds	r0, #24
    4330:	f000 fc5e 	bl	4bf0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    4334:	bd08      	pop	{r3, pc}
    4336:	bf00      	nop
    4338:	00006477 	.word	0x00006477

0000433c <z_reset_time_slice>:
{
    433c:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    433e:	4b07      	ldr	r3, [pc, #28]	; (435c <z_reset_time_slice+0x20>)
    4340:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    4342:	b904      	cbnz	r4, 4346 <z_reset_time_slice+0xa>
}
    4344:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    4346:	f7fe fb79 	bl	2a3c <sys_clock_elapsed>
    434a:	4404      	add	r4, r0
    434c:	4b04      	ldr	r3, [pc, #16]	; (4360 <z_reset_time_slice+0x24>)
    434e:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    4350:	2100      	movs	r1, #0
    4352:	4b02      	ldr	r3, [pc, #8]	; (435c <z_reset_time_slice+0x20>)
    4354:	6818      	ldr	r0, [r3, #0]
    4356:	f002 f98d 	bl	6674 <z_set_timeout_expiry>
}
    435a:	e7f3      	b.n	4344 <z_reset_time_slice+0x8>
    435c:	2000099c 	.word	0x2000099c
    4360:	20000968 	.word	0x20000968

00004364 <k_sched_time_slice_set>:
{
    4364:	b570      	push	{r4, r5, r6, lr}
    4366:	4604      	mov	r4, r0
    4368:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    436a:	2300      	movs	r3, #0
	__asm__ volatile(
    436c:	f04f 0220 	mov.w	r2, #32
    4370:	f3ef 8611 	mrs	r6, BASEPRI
    4374:	f382 8812 	msr	BASEPRI_MAX, r2
    4378:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    437c:	e00e      	b.n	439c <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    437e:	2802      	cmp	r0, #2
    4380:	bfb8      	it	lt
    4382:	2002      	movlt	r0, #2
    4384:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    4386:	4b11      	ldr	r3, [pc, #68]	; (43cc <k_sched_time_slice_set+0x68>)
    4388:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    438a:	4b11      	ldr	r3, [pc, #68]	; (43d0 <k_sched_time_slice_set+0x6c>)
    438c:	6898      	ldr	r0, [r3, #8]
    438e:	f7ff ffd5 	bl	433c <z_reset_time_slice>
	__asm__ volatile(
    4392:	f386 8811 	msr	BASEPRI, r6
    4396:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    439a:	2301      	movs	r3, #1
    439c:	b9a3      	cbnz	r3, 43c8 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    439e:	4b0c      	ldr	r3, [pc, #48]	; (43d0 <k_sched_time_slice_set+0x6c>)
    43a0:	2200      	movs	r2, #0
    43a2:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    43a4:	0c61      	lsrs	r1, r4, #17
    43a6:	03e3      	lsls	r3, r4, #15
    43a8:	f240 30e7 	movw	r0, #999	; 0x3e7
    43ac:	1818      	adds	r0, r3, r0
    43ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    43b2:	f04f 0300 	mov.w	r3, #0
    43b6:	f141 0100 	adc.w	r1, r1, #0
    43ba:	f7fb fecb 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    43be:	4b05      	ldr	r3, [pc, #20]	; (43d4 <k_sched_time_slice_set+0x70>)
    43c0:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    43c2:	2c00      	cmp	r4, #0
    43c4:	dcdb      	bgt.n	437e <k_sched_time_slice_set+0x1a>
    43c6:	e7de      	b.n	4386 <k_sched_time_slice_set+0x22>
}
    43c8:	bd70      	pop	{r4, r5, r6, pc}
    43ca:	bf00      	nop
    43cc:	20000998 	.word	0x20000998
    43d0:	20000968 	.word	0x20000968
    43d4:	2000099c 	.word	0x2000099c

000043d8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    43d8:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    43da:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    43dc:	b921      	cbnz	r1, 43e8 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    43de:	f3ef 8305 	mrs	r3, IPSR
    43e2:	b913      	cbnz	r3, 43ea <z_reschedule+0x12>
    43e4:	2101      	movs	r1, #1
    43e6:	e000      	b.n	43ea <z_reschedule+0x12>
    43e8:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    43ea:	f011 0f01 	tst.w	r1, #1
    43ee:	d007      	beq.n	4400 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    43f0:	4b06      	ldr	r3, [pc, #24]	; (440c <z_reschedule+0x34>)
    43f2:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    43f4:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    43f6:	429a      	cmp	r2, r3
    43f8:	d002      	beq.n	4400 <z_reschedule+0x28>
	ret = arch_swap(key);
    43fa:	f7fd f8ad 	bl	1558 <arch_swap>
		z_swap(lock, key);
    43fe:	e003      	b.n	4408 <z_reschedule+0x30>
    4400:	f380 8811 	msr	BASEPRI, r0
    4404:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    4408:	bd08      	pop	{r3, pc}
    440a:	bf00      	nop
    440c:	20000968 	.word	0x20000968

00004410 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    4410:	2300      	movs	r3, #0
	__asm__ volatile(
    4412:	f04f 0220 	mov.w	r2, #32
    4416:	f3ef 8111 	mrs	r1, BASEPRI
    441a:	f382 8812 	msr	BASEPRI_MAX, r2
    441e:	f3bf 8f6f 	isb	sy
    4422:	e009      	b.n	4438 <k_sched_lock+0x28>
    4424:	4b06      	ldr	r3, [pc, #24]	; (4440 <k_sched_lock+0x30>)
    4426:	689a      	ldr	r2, [r3, #8]
    4428:	7bd3      	ldrb	r3, [r2, #15]
    442a:	3b01      	subs	r3, #1
    442c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    442e:	f381 8811 	msr	BASEPRI, r1
    4432:	f3bf 8f6f 	isb	sy
    4436:	2301      	movs	r3, #1
    4438:	2b00      	cmp	r3, #0
    443a:	d0f3      	beq.n	4424 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    443c:	4770      	bx	lr
    443e:	bf00      	nop
    4440:	20000968 	.word	0x20000968

00004444 <update_cache>:
{
    4444:	b538      	push	{r3, r4, r5, lr}
    4446:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    4448:	4810      	ldr	r0, [pc, #64]	; (448c <update_cache+0x48>)
    444a:	f001 fff1 	bl	6430 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    444e:	4605      	mov	r5, r0
    4450:	b170      	cbz	r0, 4470 <update_cache+0x2c>
	if (preempt_ok != 0) {
    4452:	b984      	cbnz	r4, 4476 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    4454:	4b0e      	ldr	r3, [pc, #56]	; (4490 <update_cache+0x4c>)
    4456:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4458:	7b5a      	ldrb	r2, [r3, #13]
    445a:	f012 0f1f 	tst.w	r2, #31
    445e:	d10a      	bne.n	4476 <update_cache+0x32>
	return node->next != NULL;
    4460:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4462:	b942      	cbnz	r2, 4476 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4464:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    4466:	2a7f      	cmp	r2, #127	; 0x7f
    4468:	d905      	bls.n	4476 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    446a:	4a09      	ldr	r2, [pc, #36]	; (4490 <update_cache+0x4c>)
    446c:	61d3      	str	r3, [r2, #28]
    446e:	e00b      	b.n	4488 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4470:	4b07      	ldr	r3, [pc, #28]	; (4490 <update_cache+0x4c>)
    4472:	68dd      	ldr	r5, [r3, #12]
    4474:	e7ed      	b.n	4452 <update_cache+0xe>
		if (thread != _current) {
    4476:	4b06      	ldr	r3, [pc, #24]	; (4490 <update_cache+0x4c>)
    4478:	689b      	ldr	r3, [r3, #8]
    447a:	42ab      	cmp	r3, r5
    447c:	d002      	beq.n	4484 <update_cache+0x40>
			z_reset_time_slice(thread);
    447e:	4628      	mov	r0, r5
    4480:	f7ff ff5c 	bl	433c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4484:	4b02      	ldr	r3, [pc, #8]	; (4490 <update_cache+0x4c>)
    4486:	61dd      	str	r5, [r3, #28]
}
    4488:	bd38      	pop	{r3, r4, r5, pc}
    448a:	bf00      	nop
    448c:	20000988 	.word	0x20000988
    4490:	20000968 	.word	0x20000968

00004494 <move_thread_to_end_of_prio_q>:
{
    4494:	b538      	push	{r3, r4, r5, lr}
    4496:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    4498:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    449a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    449e:	2b00      	cmp	r3, #0
    44a0:	db28      	blt.n	44f4 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    44a2:	7b6b      	ldrb	r3, [r5, #13]
    44a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    44a8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    44aa:	4b1a      	ldr	r3, [pc, #104]	; (4514 <move_thread_to_end_of_prio_q+0x80>)
    44ac:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    44b0:	429c      	cmp	r4, r3
    44b2:	d02d      	beq.n	4510 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    44b4:	b16c      	cbz	r4, 44d2 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    44b6:	4621      	mov	r1, r4
    44b8:	4628      	mov	r0, r5
    44ba:	f001 ff92 	bl	63e2 <z_sched_prio_cmp>
    44be:	2800      	cmp	r0, #0
    44c0:	dc20      	bgt.n	4504 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    44c2:	b134      	cbz	r4, 44d2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    44c4:	4b13      	ldr	r3, [pc, #76]	; (4514 <move_thread_to_end_of_prio_q+0x80>)
    44c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44c8:	429c      	cmp	r4, r3
    44ca:	d002      	beq.n	44d2 <move_thread_to_end_of_prio_q+0x3e>
    44cc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    44ce:	2c00      	cmp	r4, #0
    44d0:	d1f0      	bne.n	44b4 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    44d2:	4b10      	ldr	r3, [pc, #64]	; (4514 <move_thread_to_end_of_prio_q+0x80>)
    44d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    44d6:	f103 0120 	add.w	r1, r3, #32
    44da:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    44dc:	606a      	str	r2, [r5, #4]

	tail->next = node;
    44de:	6015      	str	r5, [r2, #0]
	list->tail = node;
    44e0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    44e2:	4b0c      	ldr	r3, [pc, #48]	; (4514 <move_thread_to_end_of_prio_q+0x80>)
    44e4:	6898      	ldr	r0, [r3, #8]
    44e6:	42a8      	cmp	r0, r5
    44e8:	bf14      	ite	ne
    44ea:	2000      	movne	r0, #0
    44ec:	2001      	moveq	r0, #1
    44ee:	f7ff ffa9 	bl	4444 <update_cache>
}
    44f2:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    44f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    44f8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    44fa:	4601      	mov	r1, r0
    44fc:	4806      	ldr	r0, [pc, #24]	; (4518 <move_thread_to_end_of_prio_q+0x84>)
    44fe:	f001 ff8f 	bl	6420 <z_priq_dumb_remove>
}
    4502:	e7ce      	b.n	44a2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4504:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    4506:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4508:	602c      	str	r4, [r5, #0]
	prev->next = node;
    450a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    450c:	6065      	str	r5, [r4, #4]
}
    450e:	e7e8      	b.n	44e2 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4510:	2400      	movs	r4, #0
    4512:	e7cf      	b.n	44b4 <move_thread_to_end_of_prio_q+0x20>
    4514:	20000968 	.word	0x20000968
    4518:	20000988 	.word	0x20000988

0000451c <slice_expired_locked>:
{
    451c:	b538      	push	{r3, r4, r5, lr}
    451e:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    4520:	4b07      	ldr	r3, [pc, #28]	; (4540 <slice_expired_locked+0x24>)
    4522:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4524:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    4526:	f013 0f1f 	tst.w	r3, #31
    452a:	d004      	beq.n	4536 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    452c:	4628      	mov	r0, r5
    452e:	f7ff ff05 	bl	433c <z_reset_time_slice>
}
    4532:	4620      	mov	r0, r4
    4534:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    4536:	4628      	mov	r0, r5
    4538:	f7ff ffac 	bl	4494 <move_thread_to_end_of_prio_q>
    453c:	e7f6      	b.n	452c <slice_expired_locked+0x10>
    453e:	bf00      	nop
    4540:	20000968 	.word	0x20000968

00004544 <z_time_slice>:
{
    4544:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4546:	f04f 0320 	mov.w	r3, #32
    454a:	f3ef 8411 	mrs	r4, BASEPRI
    454e:	f383 8812 	msr	BASEPRI_MAX, r3
    4552:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4556:	4b22      	ldr	r3, [pc, #136]	; (45e0 <z_time_slice+0x9c>)
    4558:	689b      	ldr	r3, [r3, #8]
    455a:	4a22      	ldr	r2, [pc, #136]	; (45e4 <z_time_slice+0xa0>)
    455c:	6812      	ldr	r2, [r2, #0]
    455e:	4293      	cmp	r3, r2
    4560:	d018      	beq.n	4594 <z_time_slice+0x50>
    4562:	4621      	mov	r1, r4
	pending_current = NULL;
    4564:	4a1f      	ldr	r2, [pc, #124]	; (45e4 <z_time_slice+0xa0>)
    4566:	2500      	movs	r5, #0
    4568:	6015      	str	r5, [r2, #0]
	int ret = slice_ticks;
    456a:	4a1f      	ldr	r2, [pc, #124]	; (45e8 <z_time_slice+0xa4>)
    456c:	6812      	ldr	r2, [r2, #0]
	if (slice_time(_current) && sliceable(_current)) {
    456e:	b372      	cbz	r2, 45ce <z_time_slice+0x8a>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4570:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    4572:	2a7f      	cmp	r2, #127	; 0x7f
    4574:	d816      	bhi.n	45a4 <z_time_slice+0x60>
    4576:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    4578:	f012 0f1f 	tst.w	r2, #31
    457c:	d11c      	bne.n	45b8 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    457e:	f993 500e 	ldrsb.w	r5, [r3, #14]
    4582:	4a1a      	ldr	r2, [pc, #104]	; (45ec <z_time_slice+0xa8>)
    4584:	6812      	ldr	r2, [r2, #0]
    4586:	4295      	cmp	r5, r2
    4588:	db18      	blt.n	45bc <z_time_slice+0x78>
		&& !z_is_idle_thread_object(thread);
    458a:	4a19      	ldr	r2, [pc, #100]	; (45f0 <z_time_slice+0xac>)
    458c:	4293      	cmp	r3, r2
    458e:	d017      	beq.n	45c0 <z_time_slice+0x7c>
    4590:	2301      	movs	r3, #1
    4592:	e008      	b.n	45a6 <z_time_slice+0x62>
		z_reset_time_slice(_current);
    4594:	4618      	mov	r0, r3
    4596:	f7ff fed1 	bl	433c <z_reset_time_slice>
	__asm__ volatile(
    459a:	f384 8811 	msr	BASEPRI, r4
    459e:	f3bf 8f6f 	isb	sy
		return;
    45a2:	e01b      	b.n	45dc <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
    45a4:	2300      	movs	r3, #0
	if (slice_time(_current) && sliceable(_current)) {
    45a6:	b193      	cbz	r3, 45ce <z_time_slice+0x8a>
		if (ticks >= _current_cpu->slice_ticks) {
    45a8:	4b0d      	ldr	r3, [pc, #52]	; (45e0 <z_time_slice+0x9c>)
    45aa:	691b      	ldr	r3, [r3, #16]
    45ac:	4283      	cmp	r3, r0
    45ae:	dd09      	ble.n	45c4 <z_time_slice+0x80>
			_current_cpu->slice_ticks -= ticks;
    45b0:	1a18      	subs	r0, r3, r0
    45b2:	4b0b      	ldr	r3, [pc, #44]	; (45e0 <z_time_slice+0x9c>)
    45b4:	6118      	str	r0, [r3, #16]
    45b6:	e00d      	b.n	45d4 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    45b8:	2300      	movs	r3, #0
    45ba:	e7f4      	b.n	45a6 <z_time_slice+0x62>
    45bc:	2300      	movs	r3, #0
    45be:	e7f2      	b.n	45a6 <z_time_slice+0x62>
    45c0:	2300      	movs	r3, #0
    45c2:	e7f0      	b.n	45a6 <z_time_slice+0x62>
			key = slice_expired_locked(key);
    45c4:	4620      	mov	r0, r4
    45c6:	f7ff ffa9 	bl	451c <slice_expired_locked>
    45ca:	4601      	mov	r1, r0
    45cc:	e002      	b.n	45d4 <z_time_slice+0x90>
		_current_cpu->slice_ticks = 0;
    45ce:	4b04      	ldr	r3, [pc, #16]	; (45e0 <z_time_slice+0x9c>)
    45d0:	2200      	movs	r2, #0
    45d2:	611a      	str	r2, [r3, #16]
    45d4:	f381 8811 	msr	BASEPRI, r1
    45d8:	f3bf 8f6f 	isb	sy
}
    45dc:	bd38      	pop	{r3, r4, r5, pc}
    45de:	bf00      	nop
    45e0:	20000968 	.word	0x20000968
    45e4:	20000994 	.word	0x20000994
    45e8:	2000099c 	.word	0x2000099c
    45ec:	20000998 	.word	0x20000998
    45f0:	200001b0 	.word	0x200001b0

000045f4 <ready_thread>:
{
    45f4:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    45f6:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    45f8:	f990 200d 	ldrsb.w	r2, [r0, #13]
    45fc:	2a00      	cmp	r2, #0
    45fe:	db2d      	blt.n	465c <ready_thread+0x68>
    4600:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4602:	f013 0f1f 	tst.w	r3, #31
    4606:	d105      	bne.n	4614 <ready_thread+0x20>
	return node->next != NULL;
    4608:	6982      	ldr	r2, [r0, #24]
    460a:	b10a      	cbz	r2, 4610 <ready_thread+0x1c>
    460c:	2200      	movs	r2, #0
    460e:	e002      	b.n	4616 <ready_thread+0x22>
    4610:	2201      	movs	r2, #1
    4612:	e000      	b.n	4616 <ready_thread+0x22>
    4614:	2200      	movs	r2, #0
    4616:	b30a      	cbz	r2, 465c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    4618:	f063 037f 	orn	r3, r3, #127	; 0x7f
    461c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    461e:	4b14      	ldr	r3, [pc, #80]	; (4670 <ready_thread+0x7c>)
    4620:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4624:	429d      	cmp	r5, r3
    4626:	d020      	beq.n	466a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4628:	b16d      	cbz	r5, 4646 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    462a:	4629      	mov	r1, r5
    462c:	4620      	mov	r0, r4
    462e:	f001 fed8 	bl	63e2 <z_sched_prio_cmp>
    4632:	2800      	cmp	r0, #0
    4634:	dc13      	bgt.n	465e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4636:	b135      	cbz	r5, 4646 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    4638:	4b0d      	ldr	r3, [pc, #52]	; (4670 <ready_thread+0x7c>)
    463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    463c:	429d      	cmp	r5, r3
    463e:	d002      	beq.n	4646 <ready_thread+0x52>
    4640:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4642:	2d00      	cmp	r5, #0
    4644:	d1f0      	bne.n	4628 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    4646:	4b0a      	ldr	r3, [pc, #40]	; (4670 <ready_thread+0x7c>)
    4648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    464a:	f103 0120 	add.w	r1, r3, #32
    464e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    4650:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4652:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4654:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    4656:	2000      	movs	r0, #0
    4658:	f7ff fef4 	bl	4444 <update_cache>
}
    465c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    465e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4660:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4662:	6025      	str	r5, [r4, #0]
	prev->next = node;
    4664:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4666:	606c      	str	r4, [r5, #4]
}
    4668:	e7f5      	b.n	4656 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    466a:	2500      	movs	r5, #0
    466c:	e7dc      	b.n	4628 <ready_thread+0x34>
    466e:	bf00      	nop
    4670:	20000968 	.word	0x20000968

00004674 <z_sched_start>:
{
    4674:	b510      	push	{r4, lr}
	__asm__ volatile(
    4676:	f04f 0320 	mov.w	r3, #32
    467a:	f3ef 8411 	mrs	r4, BASEPRI
    467e:	f383 8812 	msr	BASEPRI_MAX, r3
    4682:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4686:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    4688:	f013 0f04 	tst.w	r3, #4
    468c:	d104      	bne.n	4698 <z_sched_start+0x24>
	__asm__ volatile(
    468e:	f384 8811 	msr	BASEPRI, r4
    4692:	f3bf 8f6f 	isb	sy
}
    4696:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4698:	f023 0304 	bic.w	r3, r3, #4
    469c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    469e:	f7ff ffa9 	bl	45f4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    46a2:	4621      	mov	r1, r4
    46a4:	4801      	ldr	r0, [pc, #4]	; (46ac <z_sched_start+0x38>)
    46a6:	f7ff fe97 	bl	43d8 <z_reschedule>
    46aa:	e7f4      	b.n	4696 <z_sched_start+0x22>
    46ac:	20000998 	.word	0x20000998

000046b0 <unready_thread>:
{
    46b0:	b510      	push	{r4, lr}
    46b2:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    46b4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    46b6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    46ba:	2b00      	cmp	r3, #0
    46bc:	db08      	blt.n	46d0 <unready_thread+0x20>
	update_cache(thread == _current);
    46be:	4b08      	ldr	r3, [pc, #32]	; (46e0 <unready_thread+0x30>)
    46c0:	6898      	ldr	r0, [r3, #8]
    46c2:	42a0      	cmp	r0, r4
    46c4:	bf14      	ite	ne
    46c6:	2000      	movne	r0, #0
    46c8:	2001      	moveq	r0, #1
    46ca:	f7ff febb 	bl	4444 <update_cache>
}
    46ce:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    46d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    46d4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    46d6:	4601      	mov	r1, r0
    46d8:	4802      	ldr	r0, [pc, #8]	; (46e4 <unready_thread+0x34>)
    46da:	f001 fea1 	bl	6420 <z_priq_dumb_remove>
}
    46de:	e7ee      	b.n	46be <unready_thread+0xe>
    46e0:	20000968 	.word	0x20000968
    46e4:	20000988 	.word	0x20000988

000046e8 <z_pend_curr>:
{
    46e8:	b510      	push	{r4, lr}
    46ea:	460c      	mov	r4, r1
    46ec:	4611      	mov	r1, r2
	pending_current = _current;
    46ee:	4b06      	ldr	r3, [pc, #24]	; (4708 <z_pend_curr+0x20>)
    46f0:	6898      	ldr	r0, [r3, #8]
    46f2:	4b06      	ldr	r3, [pc, #24]	; (470c <z_pend_curr+0x24>)
    46f4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    46f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    46fa:	f001 ff1e 	bl	653a <pend>
    46fe:	4620      	mov	r0, r4
    4700:	f7fc ff2a 	bl	1558 <arch_swap>
}
    4704:	bd10      	pop	{r4, pc}
    4706:	bf00      	nop
    4708:	20000968 	.word	0x20000968
    470c:	20000994 	.word	0x20000994

00004710 <z_set_prio>:
{
    4710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4714:	4604      	mov	r4, r0
    4716:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    4718:	2300      	movs	r3, #0
	__asm__ volatile(
    471a:	f04f 0220 	mov.w	r2, #32
    471e:	f3ef 8811 	mrs	r8, BASEPRI
    4722:	f382 8812 	msr	BASEPRI_MAX, r2
    4726:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    472a:	461f      	mov	r7, r3
    472c:	e008      	b.n	4740 <z_set_prio+0x30>
		if (need_sched) {
    472e:	f012 0701 	ands.w	r7, r2, #1
    4732:	d111      	bne.n	4758 <z_set_prio+0x48>
			thread->base.prio = prio;
    4734:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
    4736:	f388 8811 	msr	BASEPRI, r8
    473a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    473e:	2301      	movs	r3, #1
    4740:	461a      	mov	r2, r3
    4742:	2b00      	cmp	r3, #0
    4744:	d13d      	bne.n	47c2 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    4746:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4748:	f013 0f1f 	tst.w	r3, #31
    474c:	d1ef      	bne.n	472e <z_set_prio+0x1e>
	return node->next != NULL;
    474e:	69a1      	ldr	r1, [r4, #24]
    4750:	2900      	cmp	r1, #0
    4752:	d1ec      	bne.n	472e <z_set_prio+0x1e>
    4754:	2201      	movs	r2, #1
    4756:	e7ea      	b.n	472e <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    475c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    475e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 47c8 <z_set_prio+0xb8>
    4762:	4621      	mov	r1, r4
    4764:	4648      	mov	r0, r9
    4766:	f001 fe5b 	bl	6420 <z_priq_dumb_remove>
				thread->base.prio = prio;
    476a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    476c:	7b63      	ldrb	r3, [r4, #13]
    476e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4772:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    4774:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4778:	454d      	cmp	r5, r9
    477a:	d020      	beq.n	47be <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    477c:	b16d      	cbz	r5, 479a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    477e:	4629      	mov	r1, r5
    4780:	4620      	mov	r0, r4
    4782:	f001 fe2e 	bl	63e2 <z_sched_prio_cmp>
    4786:	2800      	cmp	r0, #0
    4788:	dc13      	bgt.n	47b2 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    478a:	b135      	cbz	r5, 479a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    478c:	4b0f      	ldr	r3, [pc, #60]	; (47cc <z_set_prio+0xbc>)
    478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4790:	429d      	cmp	r5, r3
    4792:	d002      	beq.n	479a <z_set_prio+0x8a>
    4794:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4796:	2d00      	cmp	r5, #0
    4798:	d1f0      	bne.n	477c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    479a:	4b0c      	ldr	r3, [pc, #48]	; (47cc <z_set_prio+0xbc>)
    479c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    479e:	f103 0120 	add.w	r1, r3, #32
    47a2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    47a4:	6062      	str	r2, [r4, #4]
	tail->next = node;
    47a6:	6014      	str	r4, [r2, #0]
	list->tail = node;
    47a8:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    47aa:	2001      	movs	r0, #1
    47ac:	f7ff fe4a 	bl	4444 <update_cache>
    47b0:	e7c1      	b.n	4736 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    47b2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    47b4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    47b6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    47b8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    47ba:	606c      	str	r4, [r5, #4]
}
    47bc:	e7f5      	b.n	47aa <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    47be:	2500      	movs	r5, #0
    47c0:	e7dc      	b.n	477c <z_set_prio+0x6c>
}
    47c2:	4638      	mov	r0, r7
    47c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    47c8:	20000988 	.word	0x20000988
    47cc:	20000968 	.word	0x20000968

000047d0 <z_impl_k_thread_suspend>:
{
    47d0:	b538      	push	{r3, r4, r5, lr}
    47d2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    47d4:	3018      	adds	r0, #24
    47d6:	f001 ff18 	bl	660a <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    47da:	2300      	movs	r3, #0
	__asm__ volatile(
    47dc:	f04f 0220 	mov.w	r2, #32
    47e0:	f3ef 8511 	mrs	r5, BASEPRI
    47e4:	f382 8812 	msr	BASEPRI_MAX, r2
    47e8:	f3bf 8f6f 	isb	sy
    47ec:	e010      	b.n	4810 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    47ee:	7b63      	ldrb	r3, [r4, #13]
    47f0:	f043 0310 	orr.w	r3, r3, #16
    47f4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    47f6:	4b15      	ldr	r3, [pc, #84]	; (484c <z_impl_k_thread_suspend+0x7c>)
    47f8:	6898      	ldr	r0, [r3, #8]
    47fa:	42a0      	cmp	r0, r4
    47fc:	bf14      	ite	ne
    47fe:	2000      	movne	r0, #0
    4800:	2001      	moveq	r0, #1
    4802:	f7ff fe1f 	bl	4444 <update_cache>
	__asm__ volatile(
    4806:	f385 8811 	msr	BASEPRI, r5
    480a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    480e:	2301      	movs	r3, #1
    4810:	b963      	cbnz	r3, 482c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    4812:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    4814:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4818:	2b00      	cmp	r3, #0
    481a:	dae8      	bge.n	47ee <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    481c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4820:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4822:	4621      	mov	r1, r4
    4824:	480a      	ldr	r0, [pc, #40]	; (4850 <z_impl_k_thread_suspend+0x80>)
    4826:	f001 fdfb 	bl	6420 <z_priq_dumb_remove>
}
    482a:	e7e0      	b.n	47ee <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    482c:	4b07      	ldr	r3, [pc, #28]	; (484c <z_impl_k_thread_suspend+0x7c>)
    482e:	689b      	ldr	r3, [r3, #8]
    4830:	42a3      	cmp	r3, r4
    4832:	d000      	beq.n	4836 <z_impl_k_thread_suspend+0x66>
}
    4834:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4836:	f04f 0320 	mov.w	r3, #32
    483a:	f3ef 8011 	mrs	r0, BASEPRI
    483e:	f383 8812 	msr	BASEPRI_MAX, r3
    4842:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4846:	f001 fdd6 	bl	63f6 <z_reschedule_irqlock>
    484a:	e7f3      	b.n	4834 <z_impl_k_thread_suspend+0x64>
    484c:	20000968 	.word	0x20000968
    4850:	20000988 	.word	0x20000988

00004854 <k_sched_unlock>:

void k_sched_unlock(void)
{
    4854:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    4856:	2300      	movs	r3, #0
    4858:	f04f 0220 	mov.w	r2, #32
    485c:	f3ef 8411 	mrs	r4, BASEPRI
    4860:	f382 8812 	msr	BASEPRI_MAX, r2
    4864:	f3bf 8f6f 	isb	sy
    4868:	e00c      	b.n	4884 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    486a:	4b0d      	ldr	r3, [pc, #52]	; (48a0 <k_sched_unlock+0x4c>)
    486c:	689a      	ldr	r2, [r3, #8]
    486e:	7bd3      	ldrb	r3, [r2, #15]
    4870:	3301      	adds	r3, #1
    4872:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4874:	2000      	movs	r0, #0
    4876:	f7ff fde5 	bl	4444 <update_cache>
	__asm__ volatile(
    487a:	f384 8811 	msr	BASEPRI, r4
    487e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4882:	2301      	movs	r3, #1
    4884:	2b00      	cmp	r3, #0
    4886:	d0f0      	beq.n	486a <k_sched_unlock+0x16>
	__asm__ volatile(
    4888:	f04f 0320 	mov.w	r3, #32
    488c:	f3ef 8011 	mrs	r0, BASEPRI
    4890:	f383 8812 	msr	BASEPRI_MAX, r3
    4894:	f3bf 8f6f 	isb	sy
    4898:	f001 fdad 	bl	63f6 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    489c:	bd10      	pop	{r4, pc}
    489e:	bf00      	nop
    48a0:	20000968 	.word	0x20000968

000048a4 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    48a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    48a6:	7b43      	ldrb	r3, [r0, #13]
    48a8:	f013 0f08 	tst.w	r3, #8
    48ac:	d145      	bne.n	493a <end_thread+0x96>
    48ae:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    48b0:	f043 0308 	orr.w	r3, r3, #8
    48b4:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    48b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    48ba:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    48bc:	f013 0f80 	tst.w	r3, #128	; 0x80
    48c0:	d12d      	bne.n	491e <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    48c2:	68ab      	ldr	r3, [r5, #8]
    48c4:	b15b      	cbz	r3, 48de <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    48c6:	4628      	mov	r0, r5
    48c8:	f001 fd89 	bl	63de <pended_on_thread>
    48cc:	4629      	mov	r1, r5
    48ce:	f001 fda7 	bl	6420 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    48d2:	7b6b      	ldrb	r3, [r5, #13]
    48d4:	f023 0302 	bic.w	r3, r3, #2
    48d8:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    48da:	2300      	movs	r3, #0
    48dc:	60ab      	str	r3, [r5, #8]
    48de:	f105 0018 	add.w	r0, r5, #24
    48e2:	f001 fe92 	bl	660a <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    48e6:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    48ea:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48ec:	42bc      	cmp	r4, r7
    48ee:	d01e      	beq.n	492e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    48f0:	b1ec      	cbz	r4, 492e <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    48f2:	4620      	mov	r0, r4
    48f4:	f001 fd73 	bl	63de <pended_on_thread>
    48f8:	4621      	mov	r1, r4
    48fa:	f001 fd91 	bl	6420 <z_priq_dumb_remove>
    48fe:	7b63      	ldrb	r3, [r4, #13]
    4900:	f023 0302 	bic.w	r3, r3, #2
    4904:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    4906:	2600      	movs	r6, #0
    4908:	60a6      	str	r6, [r4, #8]
    490a:	f104 0018 	add.w	r0, r4, #24
    490e:	f001 fe7c 	bl	660a <z_abort_timeout>
    4912:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    4916:	4620      	mov	r0, r4
    4918:	f7ff fe6c 	bl	45f4 <ready_thread>
    491c:	e7e5      	b.n	48ea <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    491e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4922:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4924:	4601      	mov	r1, r0
    4926:	4805      	ldr	r0, [pc, #20]	; (493c <end_thread+0x98>)
    4928:	f001 fd7a 	bl	6420 <z_priq_dumb_remove>
}
    492c:	e7c9      	b.n	48c2 <end_thread+0x1e>
		update_cache(1);
    492e:	2001      	movs	r0, #1
    4930:	f7ff fd88 	bl	4444 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    4934:	4628      	mov	r0, r5
    4936:	f7ff fadd 	bl	3ef4 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    493a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    493c:	20000988 	.word	0x20000988

00004940 <z_sched_init>:
{
    4940:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    4942:	4804      	ldr	r0, [pc, #16]	; (4954 <z_sched_init+0x14>)
    4944:	f001 fe46 	bl	65d4 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4948:	2100      	movs	r1, #0
    494a:	4608      	mov	r0, r1
    494c:	f7ff fd0a 	bl	4364 <k_sched_time_slice_set>
}
    4950:	bd08      	pop	{r3, pc}
    4952:	bf00      	nop
    4954:	20000984 	.word	0x20000984

00004958 <z_impl_k_yield>:
{
    4958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    495a:	f04f 0320 	mov.w	r3, #32
    495e:	f3ef 8611 	mrs	r6, BASEPRI
    4962:	f383 8812 	msr	BASEPRI_MAX, r3
    4966:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    496a:	4c1c      	ldr	r4, [pc, #112]	; (49dc <z_impl_k_yield+0x84>)
    496c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    496e:	7b4b      	ldrb	r3, [r1, #13]
    4970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4974:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4976:	f104 0720 	add.w	r7, r4, #32
    497a:	4638      	mov	r0, r7
    497c:	f001 fd50 	bl	6420 <z_priq_dumb_remove>
	queue_thread(_current);
    4980:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4982:	7b6b      	ldrb	r3, [r5, #13]
    4984:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4988:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    498a:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    498c:	42bc      	cmp	r4, r7
    498e:	d023      	beq.n	49d8 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4990:	b16c      	cbz	r4, 49ae <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4992:	4621      	mov	r1, r4
    4994:	4628      	mov	r0, r5
    4996:	f001 fd24 	bl	63e2 <z_sched_prio_cmp>
    499a:	2800      	cmp	r0, #0
    499c:	dc16      	bgt.n	49cc <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    499e:	b134      	cbz	r4, 49ae <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    49a0:	4b0e      	ldr	r3, [pc, #56]	; (49dc <z_impl_k_yield+0x84>)
    49a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    49a4:	429c      	cmp	r4, r3
    49a6:	d002      	beq.n	49ae <z_impl_k_yield+0x56>
    49a8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    49aa:	2c00      	cmp	r4, #0
    49ac:	d1f0      	bne.n	4990 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    49ae:	4b0b      	ldr	r3, [pc, #44]	; (49dc <z_impl_k_yield+0x84>)
    49b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    49b2:	f103 0120 	add.w	r1, r3, #32
    49b6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    49b8:	606a      	str	r2, [r5, #4]
	tail->next = node;
    49ba:	6015      	str	r5, [r2, #0]
	list->tail = node;
    49bc:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    49be:	2001      	movs	r0, #1
    49c0:	f7ff fd40 	bl	4444 <update_cache>
    49c4:	4630      	mov	r0, r6
    49c6:	f7fc fdc7 	bl	1558 <arch_swap>
}
    49ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    49cc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    49ce:	606b      	str	r3, [r5, #4]
	node->next = successor;
    49d0:	602c      	str	r4, [r5, #0]
	prev->next = node;
    49d2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    49d4:	6065      	str	r5, [r4, #4]
}
    49d6:	e7f2      	b.n	49be <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    49d8:	2400      	movs	r4, #0
    49da:	e7d9      	b.n	4990 <z_impl_k_yield+0x38>
    49dc:	20000968 	.word	0x20000968

000049e0 <z_tick_sleep>:
{
    49e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    49e4:	ea50 0301 	orrs.w	r3, r0, r1
    49e8:	d038      	beq.n	4a5c <z_tick_sleep+0x7c>
    49ea:	4604      	mov	r4, r0
    49ec:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    49ee:	f06f 0301 	mvn.w	r3, #1
    49f2:	1a1b      	subs	r3, r3, r0
    49f4:	f04f 32ff 	mov.w	r2, #4294967295
    49f8:	eb62 0201 	sbc.w	r2, r2, r1
    49fc:	2b01      	cmp	r3, #1
    49fe:	f172 0300 	sbcs.w	r3, r2, #0
    4a02:	db2f      	blt.n	4a64 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4a04:	f06f 0501 	mvn.w	r5, #1
    4a08:	1a2d      	subs	r5, r5, r0
    4a0a:	f04f 0320 	mov.w	r3, #32
    4a0e:	f3ef 8811 	mrs	r8, BASEPRI
    4a12:	f383 8812 	msr	BASEPRI_MAX, r3
    4a16:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4a1a:	4f14      	ldr	r7, [pc, #80]	; (4a6c <z_tick_sleep+0x8c>)
    4a1c:	68b8      	ldr	r0, [r7, #8]
    4a1e:	4b14      	ldr	r3, [pc, #80]	; (4a70 <z_tick_sleep+0x90>)
    4a20:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4a22:	f7ff fe45 	bl	46b0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4a26:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4a28:	4622      	mov	r2, r4
    4a2a:	4633      	mov	r3, r6
    4a2c:	4911      	ldr	r1, [pc, #68]	; (4a74 <z_tick_sleep+0x94>)
    4a2e:	3018      	adds	r0, #24
    4a30:	f000 f8de 	bl	4bf0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4a34:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4a36:	7b53      	ldrb	r3, [r2, #13]
    4a38:	f043 0310 	orr.w	r3, r3, #16
    4a3c:	7353      	strb	r3, [r2, #13]
    4a3e:	4640      	mov	r0, r8
    4a40:	f7fc fd8a 	bl	1558 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4a44:	f001 fe41 	bl	66ca <sys_clock_tick_get_32>
    4a48:	1a28      	subs	r0, r5, r0
    4a4a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4a4e:	2801      	cmp	r0, #1
    4a50:	f173 0300 	sbcs.w	r3, r3, #0
    4a54:	da00      	bge.n	4a58 <z_tick_sleep+0x78>
	return 0;
    4a56:	2000      	movs	r0, #0
}
    4a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    4a5c:	f7ff ff7c 	bl	4958 <z_impl_k_yield>
		return 0;
    4a60:	2000      	movs	r0, #0
    4a62:	e7f9      	b.n	4a58 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4a64:	f001 fe31 	bl	66ca <sys_clock_tick_get_32>
    4a68:	1905      	adds	r5, r0, r4
    4a6a:	e7ce      	b.n	4a0a <z_tick_sleep+0x2a>
    4a6c:	20000968 	.word	0x20000968
    4a70:	20000994 	.word	0x20000994
    4a74:	00006477 	.word	0x00006477

00004a78 <z_impl_k_sleep>:
{
    4a78:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4a7a:	f1b1 3fff 	cmp.w	r1, #4294967295
    4a7e:	bf08      	it	eq
    4a80:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    4a84:	d01a      	beq.n	4abc <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    4a86:	f7ff ffab 	bl	49e0 <z_tick_sleep>
    4a8a:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    4a8c:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    4a8e:	0151      	lsls	r1, r2, #5
    4a90:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    4a94:	0143      	lsls	r3, r0, #5
    4a96:	1a1b      	subs	r3, r3, r0
    4a98:	eb61 0102 	sbc.w	r1, r1, r2
    4a9c:	0088      	lsls	r0, r1, #2
    4a9e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    4aa2:	009b      	lsls	r3, r3, #2
    4aa4:	eb13 030c 	adds.w	r3, r3, ip
    4aa8:	eb42 0000 	adc.w	r0, r2, r0
    4aac:	00c0      	lsls	r0, r0, #3
    4aae:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    4ab2:	f3c3 3310 	ubfx	r3, r3, #12, #17
    4ab6:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    4aba:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    4abc:	4b03      	ldr	r3, [pc, #12]	; (4acc <z_impl_k_sleep+0x54>)
    4abe:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4ac0:	f7ff fe86 	bl	47d0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4ac4:	f04f 30ff 	mov.w	r0, #4294967295
    4ac8:	e7f7      	b.n	4aba <z_impl_k_sleep+0x42>
    4aca:	bf00      	nop
    4acc:	20000968 	.word	0x20000968

00004ad0 <z_impl_z_current_get>:
}
    4ad0:	4b01      	ldr	r3, [pc, #4]	; (4ad8 <z_impl_z_current_get+0x8>)
    4ad2:	6898      	ldr	r0, [r3, #8]
    4ad4:	4770      	bx	lr
    4ad6:	bf00      	nop
    4ad8:	20000968 	.word	0x20000968

00004adc <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    4adc:	b538      	push	{r3, r4, r5, lr}
    4ade:	f04f 0320 	mov.w	r3, #32
    4ae2:	f3ef 8511 	mrs	r5, BASEPRI
    4ae6:	f383 8812 	msr	BASEPRI_MAX, r3
    4aea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4aee:	7b43      	ldrb	r3, [r0, #13]
    4af0:	f013 0f08 	tst.w	r3, #8
    4af4:	d004      	beq.n	4b00 <z_thread_abort+0x24>
	__asm__ volatile(
    4af6:	f385 8811 	msr	BASEPRI, r5
    4afa:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4afe:	bd38      	pop	{r3, r4, r5, pc}
    4b00:	4604      	mov	r4, r0
	end_thread(thread);
    4b02:	f7ff fecf 	bl	48a4 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    4b06:	4b08      	ldr	r3, [pc, #32]	; (4b28 <z_thread_abort+0x4c>)
    4b08:	689b      	ldr	r3, [r3, #8]
    4b0a:	42a3      	cmp	r3, r4
    4b0c:	d004      	beq.n	4b18 <z_thread_abort+0x3c>
    4b0e:	f385 8811 	msr	BASEPRI, r5
    4b12:	f3bf 8f6f 	isb	sy
    4b16:	e7f2      	b.n	4afe <z_thread_abort+0x22>
    4b18:	f3ef 8305 	mrs	r3, IPSR
    4b1c:	2b00      	cmp	r3, #0
    4b1e:	d1f6      	bne.n	4b0e <z_thread_abort+0x32>
    4b20:	4628      	mov	r0, r5
    4b22:	f7fc fd19 	bl	1558 <arch_swap>
	return ret;
    4b26:	e7f2      	b.n	4b0e <z_thread_abort+0x32>
    4b28:	20000968 	.word	0x20000968

00004b2c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4b2c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4b2e:	4806      	ldr	r0, [pc, #24]	; (4b48 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4b30:	4a06      	ldr	r2, [pc, #24]	; (4b4c <z_data_copy+0x20>)
    4b32:	1a12      	subs	r2, r2, r0
    4b34:	4906      	ldr	r1, [pc, #24]	; (4b50 <z_data_copy+0x24>)
    4b36:	f001 fbb7 	bl	62a8 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4b3a:	4a06      	ldr	r2, [pc, #24]	; (4b54 <z_data_copy+0x28>)
    4b3c:	4906      	ldr	r1, [pc, #24]	; (4b58 <z_data_copy+0x2c>)
    4b3e:	4807      	ldr	r0, [pc, #28]	; (4b5c <z_data_copy+0x30>)
    4b40:	f001 fbb2 	bl	62a8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4b44:	bd08      	pop	{r3, pc}
    4b46:	bf00      	nop
    4b48:	20000000 	.word	0x20000000
    4b4c:	2000018c 	.word	0x2000018c
    4b50:	00006d10 	.word	0x00006d10
    4b54:	00000000 	.word	0x00000000
    4b58:	00006d10 	.word	0x00006d10
    4b5c:	20000000 	.word	0x20000000

00004b60 <first>:
	return list->head == list;
    4b60:	4b03      	ldr	r3, [pc, #12]	; (4b70 <first+0x10>)
    4b62:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b64:	4298      	cmp	r0, r3
    4b66:	d000      	beq.n	4b6a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    4b68:	4770      	bx	lr
    4b6a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    4b6c:	e7fc      	b.n	4b68 <first+0x8>
    4b6e:	bf00      	nop
    4b70:	200000c4 	.word	0x200000c4

00004b74 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4b74:	b130      	cbz	r0, 4b84 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    4b76:	4a04      	ldr	r2, [pc, #16]	; (4b88 <next+0x14>)
    4b78:	6852      	ldr	r2, [r2, #4]
    4b7a:	4290      	cmp	r0, r2
    4b7c:	d001      	beq.n	4b82 <next+0xe>
    4b7e:	6800      	ldr	r0, [r0, #0]
    4b80:	4770      	bx	lr
    4b82:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4b84:	4770      	bx	lr
    4b86:	bf00      	nop
    4b88:	200000c4 	.word	0x200000c4

00004b8c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    4b8c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4b8e:	4b04      	ldr	r3, [pc, #16]	; (4ba0 <elapsed+0x14>)
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	b10b      	cbz	r3, 4b98 <elapsed+0xc>
    4b94:	2000      	movs	r0, #0
}
    4b96:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4b98:	f7fd ff50 	bl	2a3c <sys_clock_elapsed>
    4b9c:	e7fb      	b.n	4b96 <elapsed+0xa>
    4b9e:	bf00      	nop
    4ba0:	200009a0 	.word	0x200009a0

00004ba4 <next_timeout>:

static int32_t next_timeout(void)
{
    4ba4:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    4ba6:	f7ff ffdb 	bl	4b60 <first>
    4baa:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    4bac:	f7ff ffee 	bl	4b8c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4bb0:	b17c      	cbz	r4, 4bd2 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4bb2:	6923      	ldr	r3, [r4, #16]
    4bb4:	6962      	ldr	r2, [r4, #20]
    4bb6:	1a1b      	subs	r3, r3, r0
    4bb8:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    4bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4bc0:	f170 0200 	sbcs.w	r2, r0, #0
    4bc4:	da08      	bge.n	4bd8 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    4bc6:	2800      	cmp	r0, #0
    4bc8:	db01      	blt.n	4bce <next_timeout+0x2a>
    4bca:	4618      	mov	r0, r3
    4bcc:	e006      	b.n	4bdc <next_timeout+0x38>
    4bce:	2300      	movs	r3, #0
    4bd0:	e7fb      	b.n	4bca <next_timeout+0x26>
		ret = MAX_WAIT;
    4bd2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4bd6:	e001      	b.n	4bdc <next_timeout+0x38>
    4bd8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4bdc:	4b03      	ldr	r3, [pc, #12]	; (4bec <next_timeout+0x48>)
    4bde:	691b      	ldr	r3, [r3, #16]
    4be0:	b113      	cbz	r3, 4be8 <next_timeout+0x44>
    4be2:	4283      	cmp	r3, r0
    4be4:	da00      	bge.n	4be8 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    4be6:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    4be8:	bd10      	pop	{r4, pc}
    4bea:	bf00      	nop
    4bec:	20000968 	.word	0x20000968

00004bf0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
    4bf4:	bf08      	it	eq
    4bf6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4bfa:	d07d      	beq.n	4cf8 <z_add_timeout+0x108>
{
    4bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c00:	4604      	mov	r4, r0
    4c02:	4692      	mov	sl, r2
    4c04:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4c06:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    4c08:	2300      	movs	r3, #0
	__asm__ volatile(
    4c0a:	f04f 0220 	mov.w	r2, #32
    4c0e:	f3ef 8711 	mrs	r7, BASEPRI
    4c12:	f382 8812 	msr	BASEPRI_MAX, r2
    4c16:	f3bf 8f6f 	isb	sy
    4c1a:	e021      	b.n	4c60 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4c1c:	f11a 0801 	adds.w	r8, sl, #1
    4c20:	f145 0900 	adc.w	r9, r5, #0
    4c24:	f7ff ffb2 	bl	4b8c <elapsed>
    4c28:	eb18 0300 	adds.w	r3, r8, r0
    4c2c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    4c30:	6123      	str	r3, [r4, #16]
    4c32:	6160      	str	r0, [r4, #20]
    4c34:	e036      	b.n	4ca4 <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    4c36:	1a51      	subs	r1, r2, r1
    4c38:	eb66 0303 	sbc.w	r3, r6, r3
    4c3c:	6101      	str	r1, [r0, #16]
    4c3e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    4c40:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    4c42:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4c44:	6020      	str	r0, [r4, #0]
	prev->next = node;
    4c46:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4c48:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    4c4a:	2800      	cmp	r0, #0
    4c4c:	d03e      	beq.n	4ccc <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4c4e:	f7ff ff87 	bl	4b60 <first>
    4c52:	4284      	cmp	r4, r0
    4c54:	d041      	beq.n	4cda <z_add_timeout+0xea>
	__asm__ volatile(
    4c56:	f387 8811 	msr	BASEPRI, r7
    4c5a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4c5e:	2301      	movs	r3, #1
    4c60:	2b00      	cmp	r3, #0
    4c62:	d147      	bne.n	4cf4 <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4c64:	4653      	mov	r3, sl
    4c66:	f06f 0101 	mvn.w	r1, #1
    4c6a:	ebb1 010a 	subs.w	r1, r1, sl
    4c6e:	f04f 30ff 	mov.w	r0, #4294967295
    4c72:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4c76:	2a00      	cmp	r2, #0
    4c78:	dbd0      	blt.n	4c1c <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4c7a:	4a20      	ldr	r2, [pc, #128]	; (4cfc <z_add_timeout+0x10c>)
    4c7c:	6811      	ldr	r1, [r2, #0]
    4c7e:	6852      	ldr	r2, [r2, #4]
    4c80:	185b      	adds	r3, r3, r1
    4c82:	eb42 0205 	adc.w	r2, r2, r5
    4c86:	f06f 0101 	mvn.w	r1, #1
    4c8a:	1acb      	subs	r3, r1, r3
    4c8c:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    4c90:	4618      	mov	r0, r3
    4c92:	4611      	mov	r1, r2
    4c94:	2b01      	cmp	r3, #1
    4c96:	f172 0300 	sbcs.w	r3, r2, #0
    4c9a:	da01      	bge.n	4ca0 <z_add_timeout+0xb0>
    4c9c:	2001      	movs	r0, #1
    4c9e:	2100      	movs	r1, #0
    4ca0:	6120      	str	r0, [r4, #16]
    4ca2:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4ca4:	f7ff ff5c 	bl	4b60 <first>
    4ca8:	2800      	cmp	r0, #0
    4caa:	d0ce      	beq.n	4c4a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
    4cac:	6902      	ldr	r2, [r0, #16]
    4cae:	6946      	ldr	r6, [r0, #20]
    4cb0:	6921      	ldr	r1, [r4, #16]
    4cb2:	6963      	ldr	r3, [r4, #20]
    4cb4:	4291      	cmp	r1, r2
    4cb6:	eb73 0c06 	sbcs.w	ip, r3, r6
    4cba:	dbbc      	blt.n	4c36 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    4cbc:	1a89      	subs	r1, r1, r2
    4cbe:	eb63 0306 	sbc.w	r3, r3, r6
    4cc2:	6121      	str	r1, [r4, #16]
    4cc4:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4cc6:	f7ff ff55 	bl	4b74 <next>
    4cca:	e7ed      	b.n	4ca8 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
    4ccc:	4b0c      	ldr	r3, [pc, #48]	; (4d00 <z_add_timeout+0x110>)
    4cce:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4cd0:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    4cd2:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4cd4:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4cd6:	605c      	str	r4, [r3, #4]
}
    4cd8:	e7b9      	b.n	4c4e <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4cda:	f7ff ff63 	bl	4ba4 <next_timeout>

			if (next_time == 0 ||
    4cde:	4603      	mov	r3, r0
    4ce0:	b118      	cbz	r0, 4cea <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
    4ce2:	4a08      	ldr	r2, [pc, #32]	; (4d04 <z_add_timeout+0x114>)
    4ce4:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    4ce6:	4282      	cmp	r2, r0
    4ce8:	d0b5      	beq.n	4c56 <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
    4cea:	2100      	movs	r1, #0
    4cec:	4618      	mov	r0, r3
    4cee:	f7fd fe73 	bl	29d8 <sys_clock_set_timeout>
    4cf2:	e7b0      	b.n	4c56 <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4cf8:	4770      	bx	lr
    4cfa:	bf00      	nop
    4cfc:	20000310 	.word	0x20000310
    4d00:	200000c4 	.word	0x200000c4
    4d04:	20000968 	.word	0x20000968

00004d08 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4d08:	b570      	push	{r4, r5, r6, lr}
    4d0a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4d0c:	f7ff fc1a 	bl	4544 <z_time_slice>
	__asm__ volatile(
    4d10:	f04f 0320 	mov.w	r3, #32
    4d14:	f3ef 8511 	mrs	r5, BASEPRI
    4d18:	f383 8812 	msr	BASEPRI_MAX, r3
    4d1c:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    4d20:	4b28      	ldr	r3, [pc, #160]	; (4dc4 <sys_clock_announce+0xbc>)
    4d22:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4d24:	e020      	b.n	4d68 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4d26:	4828      	ldr	r0, [pc, #160]	; (4dc8 <sys_clock_announce+0xc0>)
    4d28:	6801      	ldr	r1, [r0, #0]
    4d2a:	6846      	ldr	r6, [r0, #4]
    4d2c:	1889      	adds	r1, r1, r2
    4d2e:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    4d32:	6001      	str	r1, [r0, #0]
    4d34:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    4d36:	1a9b      	subs	r3, r3, r2
    4d38:	4a22      	ldr	r2, [pc, #136]	; (4dc4 <sys_clock_announce+0xbc>)
    4d3a:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    4d3c:	2200      	movs	r2, #0
    4d3e:	2300      	movs	r3, #0
    4d40:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4d44:	4620      	mov	r0, r4
    4d46:	f001 fc49 	bl	65dc <remove_timeout>
	__asm__ volatile(
    4d4a:	f385 8811 	msr	BASEPRI, r5
    4d4e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4d52:	68a3      	ldr	r3, [r4, #8]
    4d54:	4620      	mov	r0, r4
    4d56:	4798      	blx	r3
	__asm__ volatile(
    4d58:	f04f 0320 	mov.w	r3, #32
    4d5c:	f3ef 8511 	mrs	r5, BASEPRI
    4d60:	f383 8812 	msr	BASEPRI_MAX, r3
    4d64:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4d68:	f7ff fefa 	bl	4b60 <first>
    4d6c:	4604      	mov	r4, r0
    4d6e:	b140      	cbz	r0, 4d82 <sys_clock_announce+0x7a>
    4d70:	6902      	ldr	r2, [r0, #16]
    4d72:	6941      	ldr	r1, [r0, #20]
    4d74:	4b13      	ldr	r3, [pc, #76]	; (4dc4 <sys_clock_announce+0xbc>)
    4d76:	681b      	ldr	r3, [r3, #0]
    4d78:	17d8      	asrs	r0, r3, #31
    4d7a:	4293      	cmp	r3, r2
    4d7c:	eb70 0101 	sbcs.w	r1, r0, r1
    4d80:	dad1      	bge.n	4d26 <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    4d82:	b144      	cbz	r4, 4d96 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    4d84:	4b0f      	ldr	r3, [pc, #60]	; (4dc4 <sys_clock_announce+0xbc>)
    4d86:	6819      	ldr	r1, [r3, #0]
    4d88:	6923      	ldr	r3, [r4, #16]
    4d8a:	6962      	ldr	r2, [r4, #20]
    4d8c:	1a5b      	subs	r3, r3, r1
    4d8e:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    4d92:	6123      	str	r3, [r4, #16]
    4d94:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    4d96:	4a0c      	ldr	r2, [pc, #48]	; (4dc8 <sys_clock_announce+0xc0>)
    4d98:	4e0a      	ldr	r6, [pc, #40]	; (4dc4 <sys_clock_announce+0xbc>)
    4d9a:	6830      	ldr	r0, [r6, #0]
    4d9c:	6813      	ldr	r3, [r2, #0]
    4d9e:	6851      	ldr	r1, [r2, #4]
    4da0:	181b      	adds	r3, r3, r0
    4da2:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    4da6:	6013      	str	r3, [r2, #0]
    4da8:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    4daa:	2400      	movs	r4, #0
    4dac:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4dae:	f7ff fef9 	bl	4ba4 <next_timeout>
    4db2:	4621      	mov	r1, r4
    4db4:	f7fd fe10 	bl	29d8 <sys_clock_set_timeout>
	__asm__ volatile(
    4db8:	f385 8811 	msr	BASEPRI, r5
    4dbc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4dc0:	bd70      	pop	{r4, r5, r6, pc}
    4dc2:	bf00      	nop
    4dc4:	200009a0 	.word	0x200009a0
    4dc8:	20000310 	.word	0x20000310

00004dcc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4dcc:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    4dce:	2300      	movs	r3, #0
	__asm__ volatile(
    4dd0:	f04f 0220 	mov.w	r2, #32
    4dd4:	f3ef 8411 	mrs	r4, BASEPRI
    4dd8:	f382 8812 	msr	BASEPRI_MAX, r2
    4ddc:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    4de0:	4618      	mov	r0, r3
    4de2:	4619      	mov	r1, r3
    4de4:	e00c      	b.n	4e00 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
    4de6:	f7fd fe29 	bl	2a3c <sys_clock_elapsed>
    4dea:	4a07      	ldr	r2, [pc, #28]	; (4e08 <sys_clock_tick_get+0x3c>)
    4dec:	6813      	ldr	r3, [r2, #0]
    4dee:	6851      	ldr	r1, [r2, #4]
    4df0:	18c0      	adds	r0, r0, r3
    4df2:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    4df6:	f384 8811 	msr	BASEPRI, r4
    4dfa:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4dfe:	2301      	movs	r3, #1
    4e00:	2b00      	cmp	r3, #0
    4e02:	d0f0      	beq.n	4de6 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    4e04:	bd10      	pop	{r4, pc}
    4e06:	bf00      	nop
    4e08:	20000310 	.word	0x20000310

00004e0c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    4e0c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4e0e:	4a03      	ldr	r2, [pc, #12]	; (4e1c <boot_banner+0x10>)
    4e10:	4903      	ldr	r1, [pc, #12]	; (4e20 <boot_banner+0x14>)
    4e12:	4804      	ldr	r0, [pc, #16]	; (4e24 <boot_banner+0x18>)
    4e14:	f000 f9a8 	bl	5168 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    4e18:	bd08      	pop	{r3, pc}
    4e1a:	bf00      	nop
    4e1c:	00006a68 	.word	0x00006a68
    4e20:	00006c4c 	.word	0x00006c4c
    4e24:	00006c5c 	.word	0x00006c5c

00004e28 <nrf_cc3xx_platform_init_no_rng>:
    4e28:	b510      	push	{r4, lr}
    4e2a:	4c0a      	ldr	r4, [pc, #40]	; (4e54 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4e2c:	6823      	ldr	r3, [r4, #0]
    4e2e:	b11b      	cbz	r3, 4e38 <nrf_cc3xx_platform_init_no_rng+0x10>
    4e30:	2301      	movs	r3, #1
    4e32:	2000      	movs	r0, #0
    4e34:	6023      	str	r3, [r4, #0]
    4e36:	bd10      	pop	{r4, pc}
    4e38:	f000 f8dc 	bl	4ff4 <CC_LibInitNoRng>
    4e3c:	2800      	cmp	r0, #0
    4e3e:	d0f7      	beq.n	4e30 <nrf_cc3xx_platform_init_no_rng+0x8>
    4e40:	3801      	subs	r0, #1
    4e42:	2807      	cmp	r0, #7
    4e44:	d803      	bhi.n	4e4e <nrf_cc3xx_platform_init_no_rng+0x26>
    4e46:	4b04      	ldr	r3, [pc, #16]	; (4e58 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4e48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4e4c:	bd10      	pop	{r4, pc}
    4e4e:	4803      	ldr	r0, [pc, #12]	; (4e5c <nrf_cc3xx_platform_init_no_rng+0x34>)
    4e50:	bd10      	pop	{r4, pc}
    4e52:	bf00      	nop
    4e54:	200009a4 	.word	0x200009a4
    4e58:	00006c84 	.word	0x00006c84
    4e5c:	ffff8ffe 	.word	0xffff8ffe

00004e60 <nrf_cc3xx_platform_abort>:
    4e60:	f3bf 8f4f 	dsb	sy
    4e64:	4905      	ldr	r1, [pc, #20]	; (4e7c <nrf_cc3xx_platform_abort+0x1c>)
    4e66:	4b06      	ldr	r3, [pc, #24]	; (4e80 <nrf_cc3xx_platform_abort+0x20>)
    4e68:	68ca      	ldr	r2, [r1, #12]
    4e6a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4e6e:	4313      	orrs	r3, r2
    4e70:	60cb      	str	r3, [r1, #12]
    4e72:	f3bf 8f4f 	dsb	sy
    4e76:	bf00      	nop
    4e78:	e7fd      	b.n	4e76 <nrf_cc3xx_platform_abort+0x16>
    4e7a:	bf00      	nop
    4e7c:	e000ed00 	.word	0xe000ed00
    4e80:	05fa0004 	.word	0x05fa0004

00004e84 <CC_PalAbort>:
    4e84:	b430      	push	{r4, r5}
    4e86:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    4e8a:	2500      	movs	r5, #0
    4e8c:	4b0b      	ldr	r3, [pc, #44]	; (4ebc <CC_PalAbort+0x38>)
    4e8e:	4c0c      	ldr	r4, [pc, #48]	; (4ec0 <CC_PalAbort+0x3c>)
    4e90:	490c      	ldr	r1, [pc, #48]	; (4ec4 <CC_PalAbort+0x40>)
    4e92:	6849      	ldr	r1, [r1, #4]
    4e94:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4e98:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    4e9c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4ea0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4ea4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    4ea8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    4eac:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    4eb0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    4eb4:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    4eb8:	bc30      	pop	{r4, r5}
    4eba:	4708      	bx	r1
    4ebc:	50845000 	.word	0x50845000
    4ec0:	50844000 	.word	0x50844000
    4ec4:	200000cc 	.word	0x200000cc

00004ec8 <nrf_cc3xx_platform_set_abort>:
    4ec8:	4b02      	ldr	r3, [pc, #8]	; (4ed4 <nrf_cc3xx_platform_set_abort+0xc>)
    4eca:	e9d0 1200 	ldrd	r1, r2, [r0]
    4ece:	e9c3 1200 	strd	r1, r2, [r3]
    4ed2:	4770      	bx	lr
    4ed4:	200000cc 	.word	0x200000cc

00004ed8 <mutex_free>:
    4ed8:	b510      	push	{r4, lr}
    4eda:	4604      	mov	r4, r0
    4edc:	b130      	cbz	r0, 4eec <mutex_free+0x14>
    4ede:	6863      	ldr	r3, [r4, #4]
    4ee0:	06db      	lsls	r3, r3, #27
    4ee2:	d502      	bpl.n	4eea <mutex_free+0x12>
    4ee4:	2300      	movs	r3, #0
    4ee6:	6023      	str	r3, [r4, #0]
    4ee8:	6063      	str	r3, [r4, #4]
    4eea:	bd10      	pop	{r4, pc}
    4eec:	4b02      	ldr	r3, [pc, #8]	; (4ef8 <mutex_free+0x20>)
    4eee:	4803      	ldr	r0, [pc, #12]	; (4efc <mutex_free+0x24>)
    4ef0:	685b      	ldr	r3, [r3, #4]
    4ef2:	4798      	blx	r3
    4ef4:	e7f3      	b.n	4ede <mutex_free+0x6>
    4ef6:	bf00      	nop
    4ef8:	200000cc 	.word	0x200000cc
    4efc:	00006ca4 	.word	0x00006ca4

00004f00 <mutex_lock>:
    4f00:	b1b0      	cbz	r0, 4f30 <mutex_lock+0x30>
    4f02:	6843      	ldr	r3, [r0, #4]
    4f04:	b193      	cbz	r3, 4f2c <mutex_lock+0x2c>
    4f06:	06db      	lsls	r3, r3, #27
    4f08:	d50e      	bpl.n	4f28 <mutex_lock+0x28>
    4f0a:	2301      	movs	r3, #1
    4f0c:	e850 2f00 	ldrex	r2, [r0]
    4f10:	4619      	mov	r1, r3
    4f12:	e840 1c00 	strex	ip, r1, [r0]
    4f16:	f09c 0f00 	teq	ip, #0
    4f1a:	d1f7      	bne.n	4f0c <mutex_lock+0xc>
    4f1c:	2a01      	cmp	r2, #1
    4f1e:	d0f5      	beq.n	4f0c <mutex_lock+0xc>
    4f20:	f3bf 8f5f 	dmb	sy
    4f24:	2000      	movs	r0, #0
    4f26:	4770      	bx	lr
    4f28:	4803      	ldr	r0, [pc, #12]	; (4f38 <mutex_lock+0x38>)
    4f2a:	4770      	bx	lr
    4f2c:	4803      	ldr	r0, [pc, #12]	; (4f3c <mutex_lock+0x3c>)
    4f2e:	4770      	bx	lr
    4f30:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4f34:	4770      	bx	lr
    4f36:	bf00      	nop
    4f38:	ffff8fe9 	.word	0xffff8fe9
    4f3c:	ffff8fea 	.word	0xffff8fea

00004f40 <mutex_unlock>:
    4f40:	4603      	mov	r3, r0
    4f42:	b168      	cbz	r0, 4f60 <mutex_unlock+0x20>
    4f44:	6842      	ldr	r2, [r0, #4]
    4f46:	b13a      	cbz	r2, 4f58 <mutex_unlock+0x18>
    4f48:	06d2      	lsls	r2, r2, #27
    4f4a:	d507      	bpl.n	4f5c <mutex_unlock+0x1c>
    4f4c:	f3bf 8f5f 	dmb	sy
    4f50:	2200      	movs	r2, #0
    4f52:	4610      	mov	r0, r2
    4f54:	601a      	str	r2, [r3, #0]
    4f56:	4770      	bx	lr
    4f58:	4803      	ldr	r0, [pc, #12]	; (4f68 <mutex_unlock+0x28>)
    4f5a:	4770      	bx	lr
    4f5c:	4803      	ldr	r0, [pc, #12]	; (4f6c <mutex_unlock+0x2c>)
    4f5e:	4770      	bx	lr
    4f60:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4f64:	4770      	bx	lr
    4f66:	bf00      	nop
    4f68:	ffff8fea 	.word	0xffff8fea
    4f6c:	ffff8fe9 	.word	0xffff8fe9

00004f70 <mutex_init>:
    4f70:	b510      	push	{r4, lr}
    4f72:	4604      	mov	r4, r0
    4f74:	b120      	cbz	r0, 4f80 <mutex_init+0x10>
    4f76:	2200      	movs	r2, #0
    4f78:	2311      	movs	r3, #17
    4f7a:	6022      	str	r2, [r4, #0]
    4f7c:	6063      	str	r3, [r4, #4]
    4f7e:	bd10      	pop	{r4, pc}
    4f80:	4801      	ldr	r0, [pc, #4]	; (4f88 <mutex_init+0x18>)
    4f82:	f7ff ff7f 	bl	4e84 <CC_PalAbort>
    4f86:	e7f6      	b.n	4f76 <mutex_init+0x6>
    4f88:	00006ccc 	.word	0x00006ccc

00004f8c <nrf_cc3xx_platform_set_mutexes>:
    4f8c:	b570      	push	{r4, r5, r6, lr}
    4f8e:	4c16      	ldr	r4, [pc, #88]	; (4fe8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    4f90:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4f94:	6806      	ldr	r6, [r0, #0]
    4f96:	f8c4 c004 	str.w	ip, [r4, #4]
    4f9a:	f8d0 c008 	ldr.w	ip, [r0, #8]
    4f9e:	68c0      	ldr	r0, [r0, #12]
    4fa0:	f8c4 c008 	str.w	ip, [r4, #8]
    4fa4:	60e0      	str	r0, [r4, #12]
    4fa6:	6026      	str	r6, [r4, #0]
    4fa8:	6808      	ldr	r0, [r1, #0]
    4faa:	4b10      	ldr	r3, [pc, #64]	; (4fec <nrf_cc3xx_platform_set_mutexes+0x60>)
    4fac:	4d10      	ldr	r5, [pc, #64]	; (4ff0 <nrf_cc3xx_platform_set_mutexes+0x64>)
    4fae:	6018      	str	r0, [r3, #0]
    4fb0:	6848      	ldr	r0, [r1, #4]
    4fb2:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    4fb6:	6058      	str	r0, [r3, #4]
    4fb8:	6888      	ldr	r0, [r1, #8]
    4fba:	6098      	str	r0, [r3, #8]
    4fbc:	68c8      	ldr	r0, [r1, #12]
    4fbe:	6909      	ldr	r1, [r1, #16]
    4fc0:	60d8      	str	r0, [r3, #12]
    4fc2:	6119      	str	r1, [r3, #16]
    4fc4:	06d3      	lsls	r3, r2, #27
    4fc6:	d50d      	bpl.n	4fe4 <nrf_cc3xx_platform_set_mutexes+0x58>
    4fc8:	2300      	movs	r3, #0
    4fca:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4fce:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    4fd2:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    4fd6:	47b0      	blx	r6
    4fd8:	6823      	ldr	r3, [r4, #0]
    4fda:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    4fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4fe2:	4718      	bx	r3
    4fe4:	bd70      	pop	{r4, r5, r6, pc}
    4fe6:	bf00      	nop
    4fe8:	200000dc 	.word	0x200000dc
    4fec:	200000ec 	.word	0x200000ec
    4ff0:	200009bc 	.word	0x200009bc

00004ff4 <CC_LibInitNoRng>:
    4ff4:	b508      	push	{r3, lr}
    4ff6:	f000 f811 	bl	501c <CC_HalInit>
    4ffa:	b930      	cbnz	r0, 500a <CC_LibInitNoRng+0x16>
    4ffc:	f000 f810 	bl	5020 <CC_PalInit>
    5000:	b938      	cbnz	r0, 5012 <CC_LibInitNoRng+0x1e>
    5002:	4a05      	ldr	r2, [pc, #20]	; (5018 <CC_LibInitNoRng+0x24>)
    5004:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    5008:	bd08      	pop	{r3, pc}
    500a:	f000 f837 	bl	507c <CC_PalTerminate>
    500e:	2003      	movs	r0, #3
    5010:	bd08      	pop	{r3, pc}
    5012:	2004      	movs	r0, #4
    5014:	bd08      	pop	{r3, pc}
    5016:	bf00      	nop
    5018:	50845000 	.word	0x50845000

0000501c <CC_HalInit>:
    501c:	2000      	movs	r0, #0
    501e:	4770      	bx	lr

00005020 <CC_PalInit>:
    5020:	b510      	push	{r4, lr}
    5022:	4811      	ldr	r0, [pc, #68]	; (5068 <CC_PalInit+0x48>)
    5024:	f000 f848 	bl	50b8 <CC_PalMutexCreate>
    5028:	b100      	cbz	r0, 502c <CC_PalInit+0xc>
    502a:	bd10      	pop	{r4, pc}
    502c:	480f      	ldr	r0, [pc, #60]	; (506c <CC_PalInit+0x4c>)
    502e:	f000 f843 	bl	50b8 <CC_PalMutexCreate>
    5032:	2800      	cmp	r0, #0
    5034:	d1f9      	bne.n	502a <CC_PalInit+0xa>
    5036:	4c0e      	ldr	r4, [pc, #56]	; (5070 <CC_PalInit+0x50>)
    5038:	4620      	mov	r0, r4
    503a:	f000 f83d 	bl	50b8 <CC_PalMutexCreate>
    503e:	2800      	cmp	r0, #0
    5040:	d1f3      	bne.n	502a <CC_PalInit+0xa>
    5042:	4b0c      	ldr	r3, [pc, #48]	; (5074 <CC_PalInit+0x54>)
    5044:	480c      	ldr	r0, [pc, #48]	; (5078 <CC_PalInit+0x58>)
    5046:	601c      	str	r4, [r3, #0]
    5048:	f000 f836 	bl	50b8 <CC_PalMutexCreate>
    504c:	4601      	mov	r1, r0
    504e:	2800      	cmp	r0, #0
    5050:	d1eb      	bne.n	502a <CC_PalInit+0xa>
    5052:	f000 f82d 	bl	50b0 <CC_PalDmaInit>
    5056:	4604      	mov	r4, r0
    5058:	b108      	cbz	r0, 505e <CC_PalInit+0x3e>
    505a:	4620      	mov	r0, r4
    505c:	bd10      	pop	{r4, pc}
    505e:	f000 f83f 	bl	50e0 <CC_PalPowerSaveModeInit>
    5062:	4620      	mov	r0, r4
    5064:	e7fa      	b.n	505c <CC_PalInit+0x3c>
    5066:	bf00      	nop
    5068:	20000124 	.word	0x20000124
    506c:	20000118 	.word	0x20000118
    5070:	20000120 	.word	0x20000120
    5074:	20000128 	.word	0x20000128
    5078:	2000011c 	.word	0x2000011c

0000507c <CC_PalTerminate>:
    507c:	b508      	push	{r3, lr}
    507e:	4808      	ldr	r0, [pc, #32]	; (50a0 <CC_PalTerminate+0x24>)
    5080:	f000 f824 	bl	50cc <CC_PalMutexDestroy>
    5084:	4807      	ldr	r0, [pc, #28]	; (50a4 <CC_PalTerminate+0x28>)
    5086:	f000 f821 	bl	50cc <CC_PalMutexDestroy>
    508a:	4807      	ldr	r0, [pc, #28]	; (50a8 <CC_PalTerminate+0x2c>)
    508c:	f000 f81e 	bl	50cc <CC_PalMutexDestroy>
    5090:	4806      	ldr	r0, [pc, #24]	; (50ac <CC_PalTerminate+0x30>)
    5092:	f000 f81b 	bl	50cc <CC_PalMutexDestroy>
    5096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    509a:	f000 b80b 	b.w	50b4 <CC_PalDmaTerminate>
    509e:	bf00      	nop
    50a0:	20000124 	.word	0x20000124
    50a4:	20000118 	.word	0x20000118
    50a8:	20000120 	.word	0x20000120
    50ac:	2000011c 	.word	0x2000011c

000050b0 <CC_PalDmaInit>:
    50b0:	2000      	movs	r0, #0
    50b2:	4770      	bx	lr

000050b4 <CC_PalDmaTerminate>:
    50b4:	4770      	bx	lr
    50b6:	bf00      	nop

000050b8 <CC_PalMutexCreate>:
    50b8:	b508      	push	{r3, lr}
    50ba:	4b03      	ldr	r3, [pc, #12]	; (50c8 <CC_PalMutexCreate+0x10>)
    50bc:	6802      	ldr	r2, [r0, #0]
    50be:	681b      	ldr	r3, [r3, #0]
    50c0:	6810      	ldr	r0, [r2, #0]
    50c2:	4798      	blx	r3
    50c4:	2000      	movs	r0, #0
    50c6:	bd08      	pop	{r3, pc}
    50c8:	200000dc 	.word	0x200000dc

000050cc <CC_PalMutexDestroy>:
    50cc:	b508      	push	{r3, lr}
    50ce:	4b03      	ldr	r3, [pc, #12]	; (50dc <CC_PalMutexDestroy+0x10>)
    50d0:	6802      	ldr	r2, [r0, #0]
    50d2:	685b      	ldr	r3, [r3, #4]
    50d4:	6810      	ldr	r0, [r2, #0]
    50d6:	4798      	blx	r3
    50d8:	2000      	movs	r0, #0
    50da:	bd08      	pop	{r3, pc}
    50dc:	200000dc 	.word	0x200000dc

000050e0 <CC_PalPowerSaveModeInit>:
    50e0:	b570      	push	{r4, r5, r6, lr}
    50e2:	4c09      	ldr	r4, [pc, #36]	; (5108 <CC_PalPowerSaveModeInit+0x28>)
    50e4:	4d09      	ldr	r5, [pc, #36]	; (510c <CC_PalPowerSaveModeInit+0x2c>)
    50e6:	6920      	ldr	r0, [r4, #16]
    50e8:	68ab      	ldr	r3, [r5, #8]
    50ea:	4798      	blx	r3
    50ec:	b118      	cbz	r0, 50f6 <CC_PalPowerSaveModeInit+0x16>
    50ee:	4b08      	ldr	r3, [pc, #32]	; (5110 <CC_PalPowerSaveModeInit+0x30>)
    50f0:	4808      	ldr	r0, [pc, #32]	; (5114 <CC_PalPowerSaveModeInit+0x34>)
    50f2:	685b      	ldr	r3, [r3, #4]
    50f4:	4798      	blx	r3
    50f6:	2100      	movs	r1, #0
    50f8:	4a07      	ldr	r2, [pc, #28]	; (5118 <CC_PalPowerSaveModeInit+0x38>)
    50fa:	68eb      	ldr	r3, [r5, #12]
    50fc:	6011      	str	r1, [r2, #0]
    50fe:	6920      	ldr	r0, [r4, #16]
    5100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5104:	4718      	bx	r3
    5106:	bf00      	nop
    5108:	200000ec 	.word	0x200000ec
    510c:	200000dc 	.word	0x200000dc
    5110:	200000cc 	.word	0x200000cc
    5114:	00006cf0 	.word	0x00006cf0
    5118:	200009b8 	.word	0x200009b8

0000511c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    511c:	4602      	mov	r2, r0
    511e:	b158      	cbz	r0, 5138 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5120:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5122:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5126:	2b01      	cmp	r3, #1
    5128:	d003      	beq.n	5132 <sys_notify_validate+0x16>
    512a:	2b03      	cmp	r3, #3
    512c:	d107      	bne.n	513e <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    512e:	6803      	ldr	r3, [r0, #0]
    5130:	b143      	cbz	r3, 5144 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5132:	2000      	movs	r0, #0
    5134:	6090      	str	r0, [r2, #8]
    5136:	4770      	bx	lr
		return -EINVAL;
    5138:	f06f 0015 	mvn.w	r0, #21
    513c:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    513e:	f06f 0015 	mvn.w	r0, #21
    5142:	4770      	bx	lr
			rv = -EINVAL;
    5144:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5148:	4770      	bx	lr

0000514a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    514a:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    514c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    514e:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5152:	6081      	str	r1, [r0, #8]
	switch (method) {
    5154:	2a03      	cmp	r2, #3
    5156:	d103      	bne.n	5160 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5158:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    515a:	2200      	movs	r2, #0
    515c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    515e:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    5160:	2000      	movs	r0, #0
    5162:	e7fa      	b.n	515a <sys_notify_finalize+0x10>

00005164 <arch_printk_char_out>:
}
    5164:	2000      	movs	r0, #0
    5166:	4770      	bx	lr

00005168 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    5168:	b40f      	push	{r0, r1, r2, r3}
    516a:	b500      	push	{lr}
    516c:	b083      	sub	sp, #12
    516e:	a904      	add	r1, sp, #16
    5170:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5174:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    5176:	f7fb f98f 	bl	498 <vprintk>

	va_end(ap);
}
    517a:	b003      	add	sp, #12
    517c:	f85d eb04 	ldr.w	lr, [sp], #4
    5180:	b004      	add	sp, #16
    5182:	4770      	bx	lr

00005184 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    5184:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5188:	8b01      	ldrh	r1, [r0, #24]
    518a:	f021 0107 	bic.w	r1, r1, #7
    518e:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    5190:	8301      	strh	r1, [r0, #24]
}
    5192:	4770      	bx	lr

00005194 <notify_monitors>:
{
    5194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5198:	4606      	mov	r6, r0
    519a:	460f      	mov	r7, r1
    519c:	4690      	mov	r8, r2
	return list->head;
    519e:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    51a0:	b119      	cbz	r1, 51aa <notify_monitors+0x16>
    51a2:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    51a4:	b131      	cbz	r1, 51b4 <notify_monitors+0x20>
	return node->next;
    51a6:	680c      	ldr	r4, [r1, #0]
    51a8:	e004      	b.n	51b4 <notify_monitors+0x20>
    51aa:	460c      	mov	r4, r1
    51ac:	e002      	b.n	51b4 <notify_monitors+0x20>
    51ae:	4623      	mov	r3, r4
    51b0:	4621      	mov	r1, r4
    51b2:	461c      	mov	r4, r3
    51b4:	b159      	cbz	r1, 51ce <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    51b6:	684d      	ldr	r5, [r1, #4]
    51b8:	4643      	mov	r3, r8
    51ba:	463a      	mov	r2, r7
    51bc:	4630      	mov	r0, r6
    51be:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    51c0:	2c00      	cmp	r4, #0
    51c2:	d0f4      	beq.n	51ae <notify_monitors+0x1a>
    51c4:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    51c6:	2c00      	cmp	r4, #0
    51c8:	d0f2      	beq.n	51b0 <notify_monitors+0x1c>
	return node->next;
    51ca:	6823      	ldr	r3, [r4, #0]
    51cc:	e7f0      	b.n	51b0 <notify_monitors+0x1c>
}
    51ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000051d2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    51d2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    51d4:	f013 0307 	ands.w	r3, r3, #7
    51d8:	d103      	bne.n	51e2 <process_recheck+0x10>
	return list->head;
    51da:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    51dc:	b10a      	cbz	r2, 51e2 <process_recheck+0x10>
		evt = EVT_START;
    51de:	2003      	movs	r0, #3
    51e0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    51e2:	2b02      	cmp	r3, #2
    51e4:	d003      	beq.n	51ee <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    51e6:	2b01      	cmp	r3, #1
    51e8:	d006      	beq.n	51f8 <process_recheck+0x26>
	int evt = EVT_NOP;
    51ea:	2000      	movs	r0, #0
    51ec:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    51ee:	8b42      	ldrh	r2, [r0, #26]
    51f0:	2a00      	cmp	r2, #0
    51f2:	d1f8      	bne.n	51e6 <process_recheck+0x14>
		evt = EVT_STOP;
    51f4:	2004      	movs	r0, #4
    51f6:	4770      	bx	lr
    51f8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    51fa:	b10b      	cbz	r3, 5200 <process_recheck+0x2e>
		evt = EVT_RESET;
    51fc:	2005      	movs	r0, #5
}
    51fe:	4770      	bx	lr
	int evt = EVT_NOP;
    5200:	2000      	movs	r0, #0
    5202:	4770      	bx	lr

00005204 <process_complete>:
{
    5204:	b510      	push	{r4, lr}
    5206:	4604      	mov	r4, r0
    5208:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    520a:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    520c:	2a00      	cmp	r2, #0
    520e:	db07      	blt.n	5220 <process_complete+0x1c>
    5210:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    5214:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    5216:	2a01      	cmp	r2, #1
    5218:	d90e      	bls.n	5238 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    521a:	2b04      	cmp	r3, #4
    521c:	d033      	beq.n	5286 <process_complete+0x82>
}
    521e:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    5220:	e9d0 0100 	ldrd	r0, r1, [r0]
    5224:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    5228:	2300      	movs	r3, #0
    522a:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    522c:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    522e:	2101      	movs	r1, #1
    5230:	4620      	mov	r0, r4
    5232:	f7ff ffa7 	bl	5184 <set_state>
    5236:	e7f2      	b.n	521e <process_complete+0x1a>
		*clients = mgr->clients;
    5238:	e9d0 0100 	ldrd	r0, r1, [r0]
    523c:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    5240:	2200      	movs	r2, #0
    5242:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    5244:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    5246:	2b06      	cmp	r3, #6
    5248:	d118      	bne.n	527c <process_complete+0x78>
	return list->head;
    524a:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    524e:	b13b      	cbz	r3, 5260 <process_complete+0x5c>
				mgr->refs += 1U;
    5250:	8b62      	ldrh	r2, [r4, #26]
    5252:	3201      	adds	r2, #1
    5254:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    5256:	2b00      	cmp	r3, #0
    5258:	d0f9      	beq.n	524e <process_complete+0x4a>
	return node->next;
    525a:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    525c:	2b00      	cmp	r3, #0
    525e:	d1f6      	bne.n	524e <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    5260:	2102      	movs	r1, #2
    5262:	4620      	mov	r0, r4
    5264:	f7ff ff8e 	bl	5184 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5268:	4620      	mov	r0, r4
    526a:	f7ff ffb2 	bl	51d2 <process_recheck>
    526e:	2800      	cmp	r0, #0
    5270:	d0d5      	beq.n	521e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5272:	8b23      	ldrh	r3, [r4, #24]
    5274:	f043 0320 	orr.w	r3, r3, #32
    5278:	8323      	strh	r3, [r4, #24]
    527a:	e7d0      	b.n	521e <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    527c:	2100      	movs	r1, #0
    527e:	4620      	mov	r0, r4
    5280:	f7ff ff80 	bl	5184 <set_state>
    5284:	e7f0      	b.n	5268 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    5286:	2100      	movs	r1, #0
    5288:	f7ff ff7c 	bl	5184 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    528c:	4620      	mov	r0, r4
    528e:	f7ff ffa0 	bl	51d2 <process_recheck>
    5292:	2800      	cmp	r0, #0
    5294:	d0c3      	beq.n	521e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5296:	8b23      	ldrh	r3, [r4, #24]
    5298:	f043 0320 	orr.w	r3, r3, #32
    529c:	8323      	strh	r3, [r4, #24]
}
    529e:	e7be      	b.n	521e <process_complete+0x1a>

000052a0 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    52a0:	b158      	cbz	r0, 52ba <validate_args+0x1a>
{
    52a2:	b510      	push	{r4, lr}
    52a4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    52a6:	b159      	cbz	r1, 52c0 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    52a8:	1d08      	adds	r0, r1, #4
    52aa:	f7ff ff37 	bl	511c <sys_notify_validate>
	if ((rv == 0)
    52ae:	b918      	cbnz	r0, 52b8 <validate_args+0x18>
	    && ((cli->notify.flags
    52b0:	68a3      	ldr	r3, [r4, #8]
    52b2:	f033 0303 	bics.w	r3, r3, #3
    52b6:	d106      	bne.n	52c6 <validate_args+0x26>
}
    52b8:	bd10      	pop	{r4, pc}
		return -EINVAL;
    52ba:	f06f 0015 	mvn.w	r0, #21
}
    52be:	4770      	bx	lr
		return -EINVAL;
    52c0:	f06f 0015 	mvn.w	r0, #21
    52c4:	e7f8      	b.n	52b8 <validate_args+0x18>
		rv = -EINVAL;
    52c6:	f06f 0015 	mvn.w	r0, #21
    52ca:	e7f5      	b.n	52b8 <validate_args+0x18>

000052cc <notify_one>:
{
    52cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52d0:	4607      	mov	r7, r0
    52d2:	460c      	mov	r4, r1
    52d4:	4616      	mov	r6, r2
    52d6:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    52d8:	4619      	mov	r1, r3
    52da:	1d20      	adds	r0, r4, #4
    52dc:	f7ff ff35 	bl	514a <sys_notify_finalize>
	if (cb) {
    52e0:	b128      	cbz	r0, 52ee <notify_one+0x22>
    52e2:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    52e4:	462b      	mov	r3, r5
    52e6:	4632      	mov	r2, r6
    52e8:	4621      	mov	r1, r4
    52ea:	4638      	mov	r0, r7
    52ec:	47c0      	blx	r8
}
    52ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000052f2 <notify_all>:
{
    52f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52f6:	4680      	mov	r8, r0
    52f8:	460c      	mov	r4, r1
    52fa:	4617      	mov	r7, r2
    52fc:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    52fe:	e004      	b.n	530a <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    5300:	4633      	mov	r3, r6
    5302:	463a      	mov	r2, r7
    5304:	4640      	mov	r0, r8
    5306:	f7ff ffe1 	bl	52cc <notify_one>
	return list->head;
    530a:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    530c:	b131      	cbz	r1, 531c <notify_all+0x2a>
	return node->next;
    530e:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    5310:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5312:	6863      	ldr	r3, [r4, #4]
    5314:	428b      	cmp	r3, r1
    5316:	d1f3      	bne.n	5300 <notify_all+0xe>
	list->tail = node;
    5318:	6065      	str	r5, [r4, #4]
}
    531a:	e7f1      	b.n	5300 <notify_all+0xe>
}
    531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005320 <transition_complete>:
{
    5320:	b508      	push	{r3, lr}
	__asm__ volatile(
    5322:	f04f 0c20 	mov.w	ip, #32
    5326:	f3ef 8211 	mrs	r2, BASEPRI
    532a:	f38c 8812 	msr	BASEPRI_MAX, ip
    532e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5332:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    5334:	2101      	movs	r1, #1
    5336:	f7fb f8bf 	bl	4b8 <process_event>
}
    533a:	bd08      	pop	{r3, pc}

0000533c <onoff_manager_init>:
	if ((mgr == NULL)
    533c:	4603      	mov	r3, r0
    533e:	b170      	cbz	r0, 535e <onoff_manager_init+0x22>
	    || (transitions == NULL)
    5340:	b181      	cbz	r1, 5364 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    5342:	680a      	ldr	r2, [r1, #0]
    5344:	b18a      	cbz	r2, 536a <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    5346:	684a      	ldr	r2, [r1, #4]
    5348:	b192      	cbz	r2, 5370 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    534a:	2000      	movs	r0, #0
    534c:	6018      	str	r0, [r3, #0]
    534e:	6058      	str	r0, [r3, #4]
    5350:	6098      	str	r0, [r3, #8]
    5352:	60d8      	str	r0, [r3, #12]
    5354:	6118      	str	r0, [r3, #16]
    5356:	6158      	str	r0, [r3, #20]
    5358:	6198      	str	r0, [r3, #24]
    535a:	6119      	str	r1, [r3, #16]
	return 0;
    535c:	4770      	bx	lr
		return -EINVAL;
    535e:	f06f 0015 	mvn.w	r0, #21
    5362:	4770      	bx	lr
    5364:	f06f 0015 	mvn.w	r0, #21
    5368:	4770      	bx	lr
    536a:	f06f 0015 	mvn.w	r0, #21
    536e:	4770      	bx	lr
    5370:	f06f 0015 	mvn.w	r0, #21
}
    5374:	4770      	bx	lr

00005376 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5378:	4604      	mov	r4, r0
    537a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    537c:	f7ff ff90 	bl	52a0 <validate_args>

	if (rv < 0) {
    5380:	1e06      	subs	r6, r0, #0
    5382:	db37      	blt.n	53f4 <onoff_request+0x7e>
    5384:	f04f 0320 	mov.w	r3, #32
    5388:	f3ef 8211 	mrs	r2, BASEPRI
    538c:	f383 8812 	msr	BASEPRI_MAX, r3
    5390:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5394:	8b25      	ldrh	r5, [r4, #24]
    5396:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    539a:	8b63      	ldrh	r3, [r4, #26]
    539c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    53a0:	428b      	cmp	r3, r1
    53a2:	d02f      	beq.n	5404 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    53a4:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    53a6:	2d02      	cmp	r5, #2
    53a8:	d00c      	beq.n	53c4 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    53aa:	b18d      	cbz	r5, 53d0 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    53ac:	2d04      	cmp	r5, #4
    53ae:	d00f      	beq.n	53d0 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    53b0:	2d06      	cmp	r5, #6
    53b2:	d00d      	beq.n	53d0 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    53b4:	2d05      	cmp	r5, #5
    53b6:	d01f      	beq.n	53f8 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    53b8:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    53bc:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    53be:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    53c0:	4608      	mov	r0, r1
    53c2:	e00a      	b.n	53da <onoff_request+0x64>
		mgr->refs += 1U;
    53c4:	3301      	adds	r3, #1
    53c6:	8363      	strh	r3, [r4, #26]
		notify = true;
    53c8:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    53ca:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    53cc:	4618      	mov	r0, r3
    53ce:	e004      	b.n	53da <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    53d0:	fab5 f385 	clz	r3, r5
    53d4:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    53d6:	2100      	movs	r1, #0
		add_client = true;
    53d8:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    53da:	b128      	cbz	r0, 53e8 <onoff_request+0x72>
	parent->next = child;
    53dc:	2000      	movs	r0, #0
    53de:	6038      	str	r0, [r7, #0]
	return list->tail;
    53e0:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    53e2:	b1a8      	cbz	r0, 5410 <onoff_request+0x9a>
	parent->next = child;
    53e4:	6007      	str	r7, [r0, #0]
	list->tail = node;
    53e6:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    53e8:	b9ab      	cbnz	r3, 5416 <onoff_request+0xa0>
	__asm__ volatile(
    53ea:	f382 8811 	msr	BASEPRI, r2
    53ee:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    53f2:	b9a9      	cbnz	r1, 5420 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    53f4:	4630      	mov	r0, r6
    53f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    53f8:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    53fc:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    53fe:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    5400:	4608      	mov	r0, r1
    5402:	e7ea      	b.n	53da <onoff_request+0x64>
		rv = -EAGAIN;
    5404:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    5408:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    540a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    540c:	4608      	mov	r0, r1
    540e:	e7e4      	b.n	53da <onoff_request+0x64>
    5410:	6067      	str	r7, [r4, #4]
	list->head = node;
    5412:	6027      	str	r7, [r4, #0]
}
    5414:	e7e8      	b.n	53e8 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    5416:	2102      	movs	r1, #2
    5418:	4620      	mov	r0, r4
    541a:	f7fb f84d 	bl	4b8 <process_event>
    541e:	e7e9      	b.n	53f4 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    5420:	2300      	movs	r3, #0
    5422:	462a      	mov	r2, r5
    5424:	4639      	mov	r1, r7
    5426:	4620      	mov	r0, r4
    5428:	f7ff ff50 	bl	52cc <notify_one>
    542c:	e7e2      	b.n	53f4 <onoff_request+0x7e>

0000542e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    542e:	b508      	push	{r3, lr}
    5430:	4604      	mov	r4, r0
    5432:	4608      	mov	r0, r1
    5434:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    5436:	461a      	mov	r2, r3
    5438:	47a0      	blx	r4
	return z_impl_z_current_get();
    543a:	f7ff fb49 	bl	4ad0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    543e:	f7fc fafb 	bl	1a38 <z_impl_k_thread_abort>

00005442 <extract_decimal>:
{
    5442:	4684      	mov	ip, r0
	const char *sp = *str;
    5444:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    5446:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    5448:	e005      	b.n	5456 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    544a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    544e:	3201      	adds	r2, #1
    5450:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5454:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    5456:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5458:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    545c:	2909      	cmp	r1, #9
    545e:	d9f4      	bls.n	544a <extract_decimal+0x8>
	*str = sp;
    5460:	f8cc 2000 	str.w	r2, [ip]
}
    5464:	4770      	bx	lr

00005466 <encode_uint>:
{
    5466:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    546a:	b083      	sub	sp, #12
    546c:	4604      	mov	r4, r0
    546e:	460d      	mov	r5, r1
    5470:	9201      	str	r2, [sp, #4]
    5472:	469a      	mov	sl, r3
    5474:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    5476:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5478:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    547c:	2b6f      	cmp	r3, #111	; 0x6f
    547e:	d00f      	beq.n	54a0 <encode_uint+0x3a>
    5480:	d906      	bls.n	5490 <encode_uint+0x2a>
    5482:	2b70      	cmp	r3, #112	; 0x70
    5484:	d00f      	beq.n	54a6 <encode_uint+0x40>
    5486:	2b78      	cmp	r3, #120	; 0x78
    5488:	d110      	bne.n	54ac <encode_uint+0x46>
		return 16;
    548a:	f04f 0910 	mov.w	r9, #16
    548e:	e026      	b.n	54de <encode_uint+0x78>
	switch (specifier) {
    5490:	2b58      	cmp	r3, #88	; 0x58
    5492:	d002      	beq.n	549a <encode_uint+0x34>
    5494:	f04f 090a 	mov.w	r9, #10
    5498:	e021      	b.n	54de <encode_uint+0x78>
		return 16;
    549a:	f04f 0910 	mov.w	r9, #16
    549e:	e01e      	b.n	54de <encode_uint+0x78>
		return 8;
    54a0:	f04f 0908 	mov.w	r9, #8
    54a4:	e01b      	b.n	54de <encode_uint+0x78>
		return 16;
    54a6:	f04f 0910 	mov.w	r9, #16
    54aa:	e018      	b.n	54de <encode_uint+0x78>
	switch (specifier) {
    54ac:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    54b0:	e015      	b.n	54de <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    54b2:	f1bb 0f19 	cmp.w	fp, #25
    54b6:	d821      	bhi.n	54fc <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    54b8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    54ba:	3237      	adds	r2, #55	; 0x37
    54bc:	b2d2      	uxtb	r2, r2
    54be:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    54c2:	463a      	mov	r2, r7
    54c4:	4643      	mov	r3, r8
    54c6:	4620      	mov	r0, r4
    54c8:	4629      	mov	r1, r5
    54ca:	f7fa fe43 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    54ce:	42bc      	cmp	r4, r7
    54d0:	f175 0300 	sbcs.w	r3, r5, #0
    54d4:	d316      	bcc.n	5504 <encode_uint+0x9e>
    54d6:	4556      	cmp	r6, sl
    54d8:	d914      	bls.n	5504 <encode_uint+0x9e>
		value /= radix;
    54da:	4604      	mov	r4, r0
    54dc:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    54de:	f04f 0800 	mov.w	r8, #0
    54e2:	464f      	mov	r7, r9
    54e4:	464a      	mov	r2, r9
    54e6:	4643      	mov	r3, r8
    54e8:	4620      	mov	r0, r4
    54ea:	4629      	mov	r1, r5
    54ec:	f7fa fe32 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    54f0:	2a09      	cmp	r2, #9
    54f2:	d8de      	bhi.n	54b2 <encode_uint+0x4c>
    54f4:	b2d2      	uxtb	r2, r2
    54f6:	3230      	adds	r2, #48	; 0x30
    54f8:	b2d2      	uxtb	r2, r2
    54fa:	e7e0      	b.n	54be <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    54fc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    54fe:	3257      	adds	r2, #87	; 0x57
    5500:	b2d2      	uxtb	r2, r2
    5502:	e7dc      	b.n	54be <encode_uint+0x58>
	if (conv->flag_hash) {
    5504:	9b01      	ldr	r3, [sp, #4]
    5506:	781b      	ldrb	r3, [r3, #0]
    5508:	f013 0f20 	tst.w	r3, #32
    550c:	d005      	beq.n	551a <encode_uint+0xb4>
		if (radix == 8) {
    550e:	f1b9 0f08 	cmp.w	r9, #8
    5512:	d006      	beq.n	5522 <encode_uint+0xbc>
		} else if (radix == 16) {
    5514:	f1b9 0f10 	cmp.w	r9, #16
    5518:	d009      	beq.n	552e <encode_uint+0xc8>
}
    551a:	4630      	mov	r0, r6
    551c:	b003      	add	sp, #12
    551e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    5522:	9a01      	ldr	r2, [sp, #4]
    5524:	7893      	ldrb	r3, [r2, #2]
    5526:	f043 0308 	orr.w	r3, r3, #8
    552a:	7093      	strb	r3, [r2, #2]
    552c:	e7f5      	b.n	551a <encode_uint+0xb4>
			conv->altform_0c = true;
    552e:	9a01      	ldr	r2, [sp, #4]
    5530:	7893      	ldrb	r3, [r2, #2]
    5532:	f043 0310 	orr.w	r3, r3, #16
    5536:	7093      	strb	r3, [r2, #2]
    5538:	e7ef      	b.n	551a <encode_uint+0xb4>

0000553a <outs>:
{
    553a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    553e:	4607      	mov	r7, r0
    5540:	460e      	mov	r6, r1
    5542:	4614      	mov	r4, r2
    5544:	4698      	mov	r8, r3
	size_t count = 0;
    5546:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5548:	e006      	b.n	5558 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    554a:	4631      	mov	r1, r6
    554c:	f814 0b01 	ldrb.w	r0, [r4], #1
    5550:	47b8      	blx	r7
		if (rc < 0) {
    5552:	2800      	cmp	r0, #0
    5554:	db09      	blt.n	556a <outs+0x30>
		++count;
    5556:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5558:	4544      	cmp	r4, r8
    555a:	d3f6      	bcc.n	554a <outs+0x10>
    555c:	f1b8 0f00 	cmp.w	r8, #0
    5560:	d102      	bne.n	5568 <outs+0x2e>
    5562:	7823      	ldrb	r3, [r4, #0]
    5564:	2b00      	cmp	r3, #0
    5566:	d1f0      	bne.n	554a <outs+0x10>
	return (int)count;
    5568:	4628      	mov	r0, r5
}
    556a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000556e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    556e:	4770      	bx	lr

00005570 <pm_state_exit_post_ops>:
    5570:	2300      	movs	r3, #0
    5572:	f383 8811 	msr	BASEPRI, r3
    5576:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    557a:	4770      	bx	lr

0000557c <abort_function>:
{
    557c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    557e:	2000      	movs	r0, #0
    5580:	f7fb fcb8 	bl	ef4 <sys_reboot>

00005584 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5584:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5586:	f000 fe71 	bl	626c <z_fatal_error>
}
    558a:	bd08      	pop	{r3, pc}

0000558c <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    558c:	b508      	push	{r3, lr}
    558e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5590:	6800      	ldr	r0, [r0, #0]
    5592:	f7ff fff7 	bl	5584 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    5596:	bd08      	pop	{r3, pc}

00005598 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    5598:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    559a:	2100      	movs	r1, #0
    559c:	2001      	movs	r0, #1
    559e:	f7ff fff1 	bl	5584 <z_arm_fatal_error>
}
    55a2:	bd08      	pop	{r3, pc}

000055a4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    55a4:	b508      	push	{r3, lr}
	handler();
    55a6:	f7fb ffb7 	bl	1518 <z_SysNmiOnReset>
	z_arm_int_exit();
    55aa:	f7fc f887 	bl	16bc <z_arm_exc_exit>
}
    55ae:	bd08      	pop	{r3, pc}

000055b0 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    55b0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    55b4:	f383 880b 	msr	PSPLIM, r3
}
    55b8:	4770      	bx	lr

000055ba <memory_fault_recoverable>:
}
    55ba:	2000      	movs	r0, #0
    55bc:	4770      	bx	lr

000055be <debug_monitor>:
	*recoverable = false;
    55be:	2300      	movs	r3, #0
    55c0:	700b      	strb	r3, [r1, #0]
}
    55c2:	4770      	bx	lr

000055c4 <fault_handle>:
{
    55c4:	b508      	push	{r3, lr}
	*recoverable = false;
    55c6:	2300      	movs	r3, #0
    55c8:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    55ca:	1ecb      	subs	r3, r1, #3
    55cc:	2b09      	cmp	r3, #9
    55ce:	d81a      	bhi.n	5606 <fault_handle+0x42>
    55d0:	e8df f003 	tbb	[pc, r3]
    55d4:	110d0905 	.word	0x110d0905
    55d8:	19191919 	.word	0x19191919
    55dc:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    55de:	4611      	mov	r1, r2
    55e0:	f7fc f8f2 	bl	17c8 <hard_fault>
		break;
    55e4:	e010      	b.n	5608 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    55e6:	2100      	movs	r1, #0
    55e8:	f7fc f876 	bl	16d8 <mem_manage_fault>
		break;
    55ec:	e00c      	b.n	5608 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    55ee:	2100      	movs	r1, #0
    55f0:	f7fc f8a8 	bl	1744 <bus_fault>
		break;
    55f4:	e008      	b.n	5608 <fault_handle+0x44>
		reason = usage_fault(esf);
    55f6:	f7fc f8cf 	bl	1798 <usage_fault>
		break;
    55fa:	e005      	b.n	5608 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    55fc:	4611      	mov	r1, r2
    55fe:	f7ff ffde 	bl	55be <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5602:	2000      	movs	r0, #0
		break;
    5604:	e000      	b.n	5608 <fault_handle+0x44>
	switch (fault) {
    5606:	2000      	movs	r0, #0
}
    5608:	bd08      	pop	{r3, pc}

0000560a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    560a:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    560e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    5612:	d001      	beq.n	5618 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    5614:	b2c0      	uxtb	r0, r0
    5616:	4770      	bx	lr
	}

	return -EINVAL;
    5618:	f06f 0015 	mvn.w	r0, #21
}
    561c:	4770      	bx	lr

0000561e <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    561e:	6843      	ldr	r3, [r0, #4]
		&&
    5620:	2b1f      	cmp	r3, #31
    5622:	d90a      	bls.n	563a <mpu_partition_is_valid+0x1c>
		&&
    5624:	f013 0f1f 	tst.w	r3, #31
    5628:	d001      	beq.n	562e <mpu_partition_is_valid+0x10>
		&&
    562a:	2000      	movs	r0, #0
    562c:	4770      	bx	lr
		((part->start &
    562e:	6803      	ldr	r3, [r0, #0]
		&&
    5630:	f013 0f1f 	tst.w	r3, #31
    5634:	d003      	beq.n	563e <mpu_partition_is_valid+0x20>
    5636:	2000      	movs	r0, #0
    5638:	4770      	bx	lr
    563a:	2000      	movs	r0, #0
    563c:	4770      	bx	lr
    563e:	2001      	movs	r0, #1
}
    5640:	4770      	bx	lr

00005642 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    5642:	2807      	cmp	r0, #7
    5644:	d805      	bhi.n	5652 <region_allocate_and_init+0x10>
{
    5646:	b510      	push	{r4, lr}
    5648:	4604      	mov	r4, r0
	region_init(index, region_conf);
    564a:	f7fc fa39 	bl	1ac0 <region_init>
	return index;
    564e:	4620      	mov	r0, r4
}
    5650:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5652:	f06f 0015 	mvn.w	r0, #21
}
    5656:	4770      	bx	lr

00005658 <mpu_configure_region>:
{
    5658:	b510      	push	{r4, lr}
    565a:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
    565c:	680b      	ldr	r3, [r1, #0]
    565e:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    5660:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    5662:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    5666:	f89d 2008 	ldrb.w	r2, [sp, #8]
    566a:	f36c 0204 	bfi	r2, ip, #0, #5
    566e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
    5672:	8949      	ldrh	r1, [r1, #10]
    5674:	b2d2      	uxtb	r2, r2
    5676:	f361 1247 	bfi	r2, r1, #5, #3
    567a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    567e:	f023 031f 	bic.w	r3, r3, #31
    5682:	4423      	add	r3, r4
    5684:	3b01      	subs	r3, #1
    5686:	f023 031f 	bic.w	r3, r3, #31
    568a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    568c:	4669      	mov	r1, sp
    568e:	f7ff ffd8 	bl	5642 <region_allocate_and_init>
}
    5692:	b004      	add	sp, #16
    5694:	bd10      	pop	{r4, pc}

00005696 <arm_core_mpu_configure_static_mpu_regions>:
{
    5696:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    5698:	f7fc fb02 	bl	1ca0 <mpu_configure_static_mpu_regions>
}
    569c:	bd08      	pop	{r3, pc}

0000569e <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    569e:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    56a0:	f7fc fb08 	bl	1cb4 <mpu_mark_areas_for_dynamic_regions>
}
    56a4:	bd08      	pop	{r3, pc}

000056a6 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    56a6:	4603      	mov	r3, r0
    56a8:	b1a2      	cbz	r2, 56d4 <strncpy+0x2e>
{
    56aa:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    56ac:	780c      	ldrb	r4, [r1, #0]
    56ae:	b12c      	cbz	r4, 56bc <strncpy+0x16>
		*d = *s;
    56b0:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    56b4:	3101      	adds	r1, #1
		d++;
		n--;
    56b6:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    56b8:	2a00      	cmp	r2, #0
    56ba:	d1f7      	bne.n	56ac <strncpy+0x6>
	}

	while (n > 0) {
    56bc:	b122      	cbz	r2, 56c8 <strncpy+0x22>
		*d = '\0';
    56be:	2100      	movs	r1, #0
    56c0:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    56c4:	3a01      	subs	r2, #1
    56c6:	e7f9      	b.n	56bc <strncpy+0x16>
	}

	return dest;
}
    56c8:	bc10      	pop	{r4}
    56ca:	4770      	bx	lr
		*d = '\0';
    56cc:	2100      	movs	r1, #0
    56ce:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    56d2:	3a01      	subs	r2, #1
	while (n > 0) {
    56d4:	2a00      	cmp	r2, #0
    56d6:	d1f9      	bne.n	56cc <strncpy+0x26>
    56d8:	4770      	bx	lr

000056da <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    56da:	4603      	mov	r3, r0
	size_t n = 0;
    56dc:	2000      	movs	r0, #0

	while (*s != '\0') {
    56de:	e001      	b.n	56e4 <strlen+0xa>
		s++;
    56e0:	3301      	adds	r3, #1
		n++;
    56e2:	3001      	adds	r0, #1
	while (*s != '\0') {
    56e4:	781a      	ldrb	r2, [r3, #0]
    56e6:	2a00      	cmp	r2, #0
    56e8:	d1fa      	bne.n	56e0 <strlen+0x6>
	}

	return n;
}
    56ea:	4770      	bx	lr

000056ec <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    56ec:	4603      	mov	r3, r0
	size_t n = 0;
    56ee:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    56f0:	e001      	b.n	56f6 <strnlen+0xa>
		s++;
    56f2:	3301      	adds	r3, #1
		n++;
    56f4:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    56f6:	781a      	ldrb	r2, [r3, #0]
    56f8:	b10a      	cbz	r2, 56fe <strnlen+0x12>
    56fa:	4288      	cmp	r0, r1
    56fc:	d3f9      	bcc.n	56f2 <strnlen+0x6>
	}

	return n;
}
    56fe:	4770      	bx	lr

00005700 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5700:	ea80 0301 	eor.w	r3, r0, r1
    5704:	f013 0f03 	tst.w	r3, #3
    5708:	d001      	beq.n	570e <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    570a:	4603      	mov	r3, r0
    570c:	e023      	b.n	5756 <memcpy+0x56>
    570e:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    5710:	f013 0f03 	tst.w	r3, #3
    5714:	d00f      	beq.n	5736 <memcpy+0x36>
			if (n == 0) {
    5716:	b30a      	cbz	r2, 575c <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    5718:	f811 cb01 	ldrb.w	ip, [r1], #1
    571c:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    5720:	3a01      	subs	r2, #1
    5722:	e7f5      	b.n	5710 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    5724:	f811 cb01 	ldrb.w	ip, [r1], #1
    5728:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    572c:	3a01      	subs	r2, #1
	while (n > 0) {
    572e:	2a00      	cmp	r2, #0
    5730:	d1f8      	bne.n	5724 <memcpy+0x24>
	}

	return d;
}
    5732:	bc10      	pop	{r4}
    5734:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    5736:	2a03      	cmp	r2, #3
    5738:	d90d      	bls.n	5756 <memcpy+0x56>
{
    573a:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    573c:	f851 4b04 	ldr.w	r4, [r1], #4
    5740:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    5744:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    5746:	2a03      	cmp	r2, #3
    5748:	d8f8      	bhi.n	573c <memcpy+0x3c>
    574a:	e7f0      	b.n	572e <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    574c:	f811 cb01 	ldrb.w	ip, [r1], #1
    5750:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5754:	3a01      	subs	r2, #1
	while (n > 0) {
    5756:	2a00      	cmp	r2, #0
    5758:	d1f8      	bne.n	574c <memcpy+0x4c>
    575a:	4770      	bx	lr
}
    575c:	4770      	bx	lr

0000575e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    575e:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    5762:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5764:	e002      	b.n	576c <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    5766:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    576a:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    576c:	f013 0f03 	tst.w	r3, #3
    5770:	d002      	beq.n	5778 <memset+0x1a>
		if (n == 0) {
    5772:	2a00      	cmp	r2, #0
    5774:	d1f7      	bne.n	5766 <memset+0x8>
    5776:	e00f      	b.n	5798 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    5778:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    577a:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    577e:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5782:	2a03      	cmp	r2, #3
    5784:	d906      	bls.n	5794 <memset+0x36>
		*(d_word++) = c_word;
    5786:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    578a:	3a04      	subs	r2, #4
    578c:	e7f9      	b.n	5782 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    578e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5792:	3a01      	subs	r2, #1
	while (n > 0) {
    5794:	2a00      	cmp	r2, #0
    5796:	d1fa      	bne.n	578e <memset+0x30>
	}

	return buf;
}
    5798:	4770      	bx	lr

0000579a <_stdout_hook_default>:
}
    579a:	f04f 30ff 	mov.w	r0, #4294967295
    579e:	4770      	bx	lr

000057a0 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    57a0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    57a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    57a6:	0089      	lsls	r1, r1, #2
    57a8:	3170      	adds	r1, #112	; 0x70
}
    57aa:	4408      	add	r0, r1
    57ac:	4770      	bx	lr

000057ae <get_sub_config>:
	const struct nrf_clock_control_config *config =
    57ae:	6840      	ldr	r0, [r0, #4]
}
    57b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    57b4:	4770      	bx	lr

000057b6 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    57b6:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    57b8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    57bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    57c0:	4770      	bx	lr

000057c2 <get_status>:
{
    57c2:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    57c4:	b2c9      	uxtb	r1, r1
    57c6:	f7ff ffeb 	bl	57a0 <get_sub_data>
    57ca:	6880      	ldr	r0, [r0, #8]
}
    57cc:	f000 0007 	and.w	r0, r0, #7
    57d0:	bd08      	pop	{r3, pc}

000057d2 <set_off_state>:
	__asm__ volatile(
    57d2:	f04f 0320 	mov.w	r3, #32
    57d6:	f3ef 8211 	mrs	r2, BASEPRI
    57da:	f383 8812 	msr	BASEPRI_MAX, r3
    57de:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    57e2:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    57e4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    57e8:	d001      	beq.n	57ee <set_off_state+0x1c>
    57ea:	428b      	cmp	r3, r1
    57ec:	d107      	bne.n	57fe <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    57ee:	2301      	movs	r3, #1
    57f0:	6003      	str	r3, [r0, #0]
	int err = 0;
    57f2:	2000      	movs	r0, #0
	__asm__ volatile(
    57f4:	f382 8811 	msr	BASEPRI, r2
    57f8:	f3bf 8f6f 	isb	sy
}
    57fc:	4770      	bx	lr
		err = -EPERM;
    57fe:	f04f 30ff 	mov.w	r0, #4294967295
    5802:	e7f7      	b.n	57f4 <set_off_state+0x22>

00005804 <set_starting_state>:
	__asm__ volatile(
    5804:	f04f 0320 	mov.w	r3, #32
    5808:	f3ef 8211 	mrs	r2, BASEPRI
    580c:	f383 8812 	msr	BASEPRI_MAX, r3
    5810:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5814:	6803      	ldr	r3, [r0, #0]
    5816:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    581a:	f003 0307 	and.w	r3, r3, #7
    581e:	2b01      	cmp	r3, #1
    5820:	d008      	beq.n	5834 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    5822:	458c      	cmp	ip, r1
    5824:	d009      	beq.n	583a <set_starting_state+0x36>
		err = -EPERM;
    5826:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    582a:	f382 8811 	msr	BASEPRI, r2
    582e:	f3bf 8f6f 	isb	sy
}
    5832:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5834:	6001      	str	r1, [r0, #0]
	int err = 0;
    5836:	2000      	movs	r0, #0
    5838:	e7f7      	b.n	582a <set_starting_state+0x26>
		err = -EALREADY;
    583a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    583e:	e7f4      	b.n	582a <set_starting_state+0x26>

00005840 <set_on_state>:
	__asm__ volatile(
    5840:	f04f 0320 	mov.w	r3, #32
    5844:	f3ef 8211 	mrs	r2, BASEPRI
    5848:	f383 8812 	msr	BASEPRI_MAX, r3
    584c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5850:	6803      	ldr	r3, [r0, #0]
    5852:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5856:	f043 0302 	orr.w	r3, r3, #2
    585a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    585c:	f382 8811 	msr	BASEPRI, r2
    5860:	f3bf 8f6f 	isb	sy
}
    5864:	4770      	bx	lr

00005866 <clkstarted_handle>:
{
    5866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5868:	4606      	mov	r6, r0
    586a:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    586c:	f7ff ff98 	bl	57a0 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    5870:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    5872:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    5874:	2300      	movs	r3, #0
    5876:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    587a:	f7ff ffe1 	bl	5840 <set_on_state>
	if (callback) {
    587e:	b11d      	cbz	r5, 5888 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5880:	463a      	mov	r2, r7
    5882:	4621      	mov	r1, r4
    5884:	4630      	mov	r0, r6
    5886:	47a8      	blx	r5
}
    5888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000588a <stop>:
{
    588a:	b570      	push	{r4, r5, r6, lr}
    588c:	4606      	mov	r6, r0
    588e:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5890:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5892:	4621      	mov	r1, r4
    5894:	f7ff ff84 	bl	57a0 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    5898:	4629      	mov	r1, r5
    589a:	3008      	adds	r0, #8
    589c:	f7ff ff99 	bl	57d2 <set_off_state>
	if (err < 0) {
    58a0:	2800      	cmp	r0, #0
    58a2:	db06      	blt.n	58b2 <stop+0x28>
	get_sub_config(dev, type)->stop();
    58a4:	4621      	mov	r1, r4
    58a6:	4630      	mov	r0, r6
    58a8:	f7ff ff81 	bl	57ae <get_sub_config>
    58ac:	6843      	ldr	r3, [r0, #4]
    58ae:	4798      	blx	r3
	return 0;
    58b0:	2000      	movs	r0, #0
}
    58b2:	bd70      	pop	{r4, r5, r6, pc}

000058b4 <api_stop>:
{
    58b4:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    58b6:	2280      	movs	r2, #128	; 0x80
    58b8:	f7ff ffe7 	bl	588a <stop>
}
    58bc:	bd08      	pop	{r3, pc}

000058be <async_start>:
{
    58be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58c2:	4606      	mov	r6, r0
    58c4:	4690      	mov	r8, r2
    58c6:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    58c8:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    58ca:	4629      	mov	r1, r5
    58cc:	f7ff ff68 	bl	57a0 <get_sub_data>
    58d0:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    58d2:	9906      	ldr	r1, [sp, #24]
    58d4:	3008      	adds	r0, #8
    58d6:	f7ff ff95 	bl	5804 <set_starting_state>
	if (err < 0) {
    58da:	2800      	cmp	r0, #0
    58dc:	db09      	blt.n	58f2 <async_start+0x34>
	subdata->cb = cb;
    58de:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    58e2:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    58e4:	4629      	mov	r1, r5
    58e6:	4630      	mov	r0, r6
    58e8:	f7ff ff61 	bl	57ae <get_sub_config>
    58ec:	6803      	ldr	r3, [r0, #0]
    58ee:	4798      	blx	r3
	return 0;
    58f0:	2000      	movs	r0, #0
}
    58f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000058f6 <api_start>:
{
    58f6:	b510      	push	{r4, lr}
    58f8:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    58fa:	2480      	movs	r4, #128	; 0x80
    58fc:	9400      	str	r4, [sp, #0]
    58fe:	f7ff ffde 	bl	58be <async_start>
}
    5902:	b002      	add	sp, #8
    5904:	bd10      	pop	{r4, pc}

00005906 <onoff_started_callback>:
{
    5906:	b510      	push	{r4, lr}
    5908:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    590a:	b2c9      	uxtb	r1, r1
    590c:	f7ff ff53 	bl	57b6 <get_onoff_manager>
	notify(mgr, 0);
    5910:	2100      	movs	r1, #0
    5912:	47a0      	blx	r4
}
    5914:	bd10      	pop	{r4, pc}

00005916 <hfclk_start>:
{
    5916:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5918:	2001      	movs	r0, #1
    591a:	f000 fc04 	bl	6126 <nrfx_clock_start>
}
    591e:	bd08      	pop	{r3, pc}

00005920 <hfclkaudio_start>:
{
    5920:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5922:	2003      	movs	r0, #3
    5924:	f000 fbff 	bl	6126 <nrfx_clock_start>
}
    5928:	bd08      	pop	{r3, pc}

0000592a <hfclk192m_start>:
{
    592a:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    592c:	2002      	movs	r0, #2
    592e:	f000 fbfa 	bl	6126 <nrfx_clock_start>
}
    5932:	bd08      	pop	{r3, pc}

00005934 <lfclk_start>:
{
    5934:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5936:	2000      	movs	r0, #0
    5938:	f000 fbf5 	bl	6126 <nrfx_clock_start>
}
    593c:	bd08      	pop	{r3, pc}

0000593e <hfclk_stop>:
{
    593e:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5940:	2001      	movs	r0, #1
    5942:	f000 fc65 	bl	6210 <nrfx_clock_stop>
}
    5946:	bd08      	pop	{r3, pc}

00005948 <hfclkaudio_stop>:
{
    5948:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    594a:	2003      	movs	r0, #3
    594c:	f000 fc60 	bl	6210 <nrfx_clock_stop>
}
    5950:	bd08      	pop	{r3, pc}

00005952 <hfclk192m_stop>:
{
    5952:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    5954:	2002      	movs	r0, #2
    5956:	f000 fc5b 	bl	6210 <nrfx_clock_stop>
}
    595a:	bd08      	pop	{r3, pc}

0000595c <lfclk_stop>:
{
    595c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    595e:	2000      	movs	r0, #0
    5960:	f000 fc56 	bl	6210 <nrfx_clock_stop>
}
    5964:	bd08      	pop	{r3, pc}

00005966 <blocking_start_callback>:
{
    5966:	b508      	push	{r3, lr}
    5968:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    596a:	f7fe fc8b 	bl	4284 <z_impl_k_sem_give>
}
    596e:	bd08      	pop	{r3, pc}

00005970 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    5970:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    5974:	f020 0001 	bic.w	r0, r0, #1
    5978:	0540      	lsls	r0, r0, #21
    597a:	0d40      	lsrs	r0, r0, #21
    597c:	f240 2306 	movw	r3, #518	; 0x206
    5980:	4298      	cmp	r0, r3
    5982:	d033      	beq.n	59ec <get_drive+0x7c>
    5984:	d816      	bhi.n	59b4 <get_drive+0x44>
    5986:	2806      	cmp	r0, #6
    5988:	d02c      	beq.n	59e4 <get_drive+0x74>
    598a:	d906      	bls.n	599a <get_drive+0x2a>
    598c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    5990:	d10d      	bne.n	59ae <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    5992:	2301      	movs	r3, #1
    5994:	700b      	strb	r3, [r1, #0]
	int err = 0;
    5996:	2000      	movs	r0, #0
		break;
    5998:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    599a:	b300      	cbz	r0, 59de <get_drive+0x6e>
    599c:	2802      	cmp	r0, #2
    599e:	d103      	bne.n	59a8 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    59a0:	2304      	movs	r3, #4
    59a2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    59a4:	2000      	movs	r0, #0
		break;
    59a6:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    59a8:	f06f 0015 	mvn.w	r0, #21
    59ac:	4770      	bx	lr
    59ae:	f06f 0015 	mvn.w	r0, #21
    59b2:	4770      	bx	lr
    59b4:	f240 4302 	movw	r3, #1026	; 0x402
    59b8:	4298      	cmp	r0, r3
    59ba:	d01b      	beq.n	59f4 <get_drive+0x84>
    59bc:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    59c0:	d103      	bne.n	59ca <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    59c2:	2303      	movs	r3, #3
    59c4:	700b      	strb	r3, [r1, #0]
	int err = 0;
    59c6:	2000      	movs	r0, #0
		break;
    59c8:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    59ca:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    59ce:	d103      	bne.n	59d8 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    59d0:	2302      	movs	r3, #2
    59d2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    59d4:	2000      	movs	r0, #0
		break;
    59d6:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    59d8:	f06f 0015 	mvn.w	r0, #21
    59dc:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    59de:	2000      	movs	r0, #0
    59e0:	7008      	strb	r0, [r1, #0]
		break;
    59e2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    59e4:	2306      	movs	r3, #6
    59e6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    59e8:	2000      	movs	r0, #0
		break;
    59ea:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    59ec:	2307      	movs	r3, #7
    59ee:	700b      	strb	r3, [r1, #0]
	int err = 0;
    59f0:	2000      	movs	r0, #0
		break;
    59f2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    59f4:	2305      	movs	r3, #5
    59f6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    59f8:	2000      	movs	r0, #0
}
    59fa:	4770      	bx	lr

000059fc <get_pull>:
	if (flags & GPIO_PULL_UP) {
    59fc:	f010 0f10 	tst.w	r0, #16
    5a00:	d104      	bne.n	5a0c <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    5a02:	f010 0f20 	tst.w	r0, #32
    5a06:	d103      	bne.n	5a10 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    5a08:	2000      	movs	r0, #0
    5a0a:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    5a0c:	2003      	movs	r0, #3
    5a0e:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    5a10:	2001      	movs	r0, #1
}
    5a12:	4770      	bx	lr

00005a14 <gpio_nrfx_port_get_raw>:
	return port->config;
    5a14:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a16:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5a18:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    5a1a:	600b      	str	r3, [r1, #0]
}
    5a1c:	2000      	movs	r0, #0
    5a1e:	4770      	bx	lr

00005a20 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    5a20:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a22:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    5a24:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    5a26:	4042      	eors	r2, r0
    5a28:	400a      	ands	r2, r1
    5a2a:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5a2c:	605a      	str	r2, [r3, #4]
}
    5a2e:	2000      	movs	r0, #0
    5a30:	4770      	bx	lr

00005a32 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    5a32:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a34:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    5a36:	6099      	str	r1, [r3, #8]
}
    5a38:	2000      	movs	r0, #0
    5a3a:	4770      	bx	lr

00005a3c <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    5a3c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a3e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    5a40:	60d9      	str	r1, [r3, #12]
}
    5a42:	2000      	movs	r0, #0
    5a44:	4770      	bx	lr

00005a46 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    5a46:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a48:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5a4a:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    5a4c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    5a4e:	6053      	str	r3, [r2, #4]
}
    5a50:	2000      	movs	r0, #0
    5a52:	4770      	bx	lr

00005a54 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    5a54:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    5a58:	d007      	beq.n	5a6a <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5a5a:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    5a5e:	d00d      	beq.n	5a7c <get_trigger+0x28>
    5a60:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5a64:	d008      	beq.n	5a78 <get_trigger+0x24>
    5a66:	2001      	movs	r0, #1
}
    5a68:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5a6a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5a6e:	d001      	beq.n	5a74 <get_trigger+0x20>
    5a70:	2005      	movs	r0, #5
    5a72:	4770      	bx	lr
    5a74:	2004      	movs	r0, #4
    5a76:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5a78:	2002      	movs	r0, #2
    5a7a:	4770      	bx	lr
    5a7c:	2003      	movs	r0, #3
    5a7e:	4770      	bx	lr

00005a80 <gpio_nrfx_manage_callback>:
{
    5a80:	b410      	push	{r4}
	return port->data;
    5a82:	6904      	ldr	r4, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5a84:	f104 0c04 	add.w	ip, r4, #4
	return list->head;
    5a88:	6863      	ldr	r3, [r4, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    5a8a:	b1fb      	cbz	r3, 5acc <gpio_nrfx_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5a8c:	2000      	movs	r0, #0
    5a8e:	e00d      	b.n	5aac <gpio_nrfx_manage_callback+0x2c>
	return node->next;
    5a90:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5a92:	6063      	str	r3, [r4, #4]
	return list->tail;
    5a94:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    5a98:	4281      	cmp	r1, r0
    5a9a:	d112      	bne.n	5ac2 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    5a9c:	f8cc 3004 	str.w	r3, [ip, #4]
}
    5aa0:	e00f      	b.n	5ac2 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    5aa2:	f8cc 0004 	str.w	r0, [ip, #4]
}
    5aa6:	e00c      	b.n	5ac2 <gpio_nrfx_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5aa8:	4618      	mov	r0, r3
    5aaa:	681b      	ldr	r3, [r3, #0]
    5aac:	b163      	cbz	r3, 5ac8 <gpio_nrfx_manage_callback+0x48>
    5aae:	4299      	cmp	r1, r3
    5ab0:	d1fa      	bne.n	5aa8 <gpio_nrfx_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
    5ab2:	2800      	cmp	r0, #0
    5ab4:	d0ec      	beq.n	5a90 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    5ab6:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    5ab8:	6003      	str	r3, [r0, #0]
	return list->tail;
    5aba:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    5abe:	4299      	cmp	r1, r3
    5ac0:	d0ef      	beq.n	5aa2 <gpio_nrfx_manage_callback+0x22>
	parent->next = child;
    5ac2:	2300      	movs	r3, #0
    5ac4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5ac6:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5ac8:	b903      	cbnz	r3, 5acc <gpio_nrfx_manage_callback+0x4c>
			if (!set) {
    5aca:	b162      	cbz	r2, 5ae6 <gpio_nrfx_manage_callback+0x66>
				return -EINVAL;
			}
		}
	}

	if (set) {
    5acc:	b172      	cbz	r2, 5aec <gpio_nrfx_manage_callback+0x6c>
	return list->head;
    5ace:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
    5ad0:	600b      	str	r3, [r1, #0]
	list->head = node;
    5ad2:	6061      	str	r1, [r4, #4]
	return list->tail;
    5ad4:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
    5ad8:	b10b      	cbz	r3, 5ade <gpio_nrfx_manage_callback+0x5e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5ada:	2000      	movs	r0, #0
    5adc:	e007      	b.n	5aee <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
    5ade:	f8cc 1004 	str.w	r1, [ip, #4]
    5ae2:	2000      	movs	r0, #0
}
    5ae4:	e003      	b.n	5aee <gpio_nrfx_manage_callback+0x6e>
				return -EINVAL;
    5ae6:	f06f 0015 	mvn.w	r0, #21
    5aea:	e000      	b.n	5aee <gpio_nrfx_manage_callback+0x6e>
	return 0;
    5aec:	2000      	movs	r0, #0
}
    5aee:	bc10      	pop	{r4}
    5af0:	4770      	bx	lr

00005af2 <nrfx_gpio_handler>:
{
    5af2:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    5af4:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    5af8:	0940      	lsrs	r0, r0, #5
    5afa:	f7fc fb3b 	bl	2174 <get_dev>
	if (port == NULL) {
    5afe:	b1d8      	cbz	r0, 5b38 <nrfx_gpio_handler+0x46>
    5b00:	4606      	mov	r6, r0
	return port->data;
    5b02:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    5b04:	2501      	movs	r5, #1
    5b06:	40a5      	lsls	r5, r4
	return list->head;
    5b08:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5b0a:	b119      	cbz	r1, 5b14 <nrfx_gpio_handler+0x22>
    5b0c:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    5b0e:	b149      	cbz	r1, 5b24 <nrfx_gpio_handler+0x32>
	return node->next;
    5b10:	680c      	ldr	r4, [r1, #0]
    5b12:	e007      	b.n	5b24 <nrfx_gpio_handler+0x32>
    5b14:	460c      	mov	r4, r1
    5b16:	e005      	b.n	5b24 <nrfx_gpio_handler+0x32>
    5b18:	b164      	cbz	r4, 5b34 <nrfx_gpio_handler+0x42>
    5b1a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5b1c:	b104      	cbz	r4, 5b20 <nrfx_gpio_handler+0x2e>
	return node->next;
    5b1e:	6823      	ldr	r3, [r4, #0]
    5b20:	4621      	mov	r1, r4
    5b22:	461c      	mov	r4, r3
    5b24:	b141      	cbz	r1, 5b38 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    5b26:	688a      	ldr	r2, [r1, #8]
    5b28:	402a      	ands	r2, r5
    5b2a:	d0f5      	beq.n	5b18 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5b2c:	684b      	ldr	r3, [r1, #4]
    5b2e:	4630      	mov	r0, r6
    5b30:	4798      	blx	r3
    5b32:	e7f1      	b.n	5b18 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5b34:	4623      	mov	r3, r4
    5b36:	e7f3      	b.n	5b20 <nrfx_gpio_handler+0x2e>
}
    5b38:	bd70      	pop	{r4, r5, r6, pc}

00005b3a <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    5b3a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5b3c:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    5b3e:	f04f 0120 	mov.w	r1, #32
    5b42:	f3ef 8211 	mrs	r2, BASEPRI
    5b46:	f381 8812 	msr	BASEPRI_MAX, r1
    5b4a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b4e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5b52:	b131      	cbz	r1, 5b62 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b54:	2100      	movs	r1, #0
    5b56:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5b5a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b5e:	2101      	movs	r1, #1
    5b60:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5b62:	f382 8811 	msr	BASEPRI, r2
    5b66:	f3bf 8f6f 	isb	sy
}
    5b6a:	4770      	bx	lr

00005b6c <uarte_nrfx_isr_int>:
{
    5b6c:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5b6e:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    5b70:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    5b72:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5b76:	f413 7f80 	tst.w	r3, #256	; 0x100
    5b7a:	d002      	beq.n	5b82 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b7c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    5b80:	b9d3      	cbnz	r3, 5bb8 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5b82:	686b      	ldr	r3, [r5, #4]
    5b84:	f013 0f10 	tst.w	r3, #16
    5b88:	d015      	beq.n	5bb6 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    5b8a:	f04f 0220 	mov.w	r2, #32
    5b8e:	f3ef 8311 	mrs	r3, BASEPRI
    5b92:	f382 8812 	msr	BASEPRI_MAX, r2
    5b96:	f3bf 8f6f 	isb	sy
    5b9a:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5b9e:	b112      	cbz	r2, 5ba6 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5ba0:	2200      	movs	r2, #0
    5ba2:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5ba6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5baa:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    5bae:	f383 8811 	msr	BASEPRI, r3
    5bb2:	f3bf 8f6f 	isb	sy
}
    5bb6:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    5bb8:	f7ff ffbf 	bl	5b3a <endtx_isr>
    5bbc:	e7e1      	b.n	5b82 <uarte_nrfx_isr_int+0x16>

00005bbe <uarte_nrfx_configure>:
{
    5bbe:	b570      	push	{r4, r5, r6, lr}
    5bc0:	b082      	sub	sp, #8
    5bc2:	4605      	mov	r5, r0
    5bc4:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    5bc6:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    5bc8:	794b      	ldrb	r3, [r1, #5]
    5bca:	2b01      	cmp	r3, #1
    5bcc:	d006      	beq.n	5bdc <uarte_nrfx_configure+0x1e>
    5bce:	2b03      	cmp	r3, #3
    5bd0:	d011      	beq.n	5bf6 <uarte_nrfx_configure+0x38>
    5bd2:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    5bd6:	4610      	mov	r0, r2
    5bd8:	b002      	add	sp, #8
    5bda:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    5bdc:	2300      	movs	r3, #0
    5bde:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5be2:	79a3      	ldrb	r3, [r4, #6]
    5be4:	2b03      	cmp	r3, #3
    5be6:	d146      	bne.n	5c76 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    5be8:	79e3      	ldrb	r3, [r4, #7]
    5bea:	b143      	cbz	r3, 5bfe <uarte_nrfx_configure+0x40>
    5bec:	2b01      	cmp	r3, #1
    5bee:	d015      	beq.n	5c1c <uarte_nrfx_configure+0x5e>
    5bf0:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5bf4:	e7ef      	b.n	5bd6 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5bf6:	2310      	movs	r3, #16
    5bf8:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    5bfc:	e7f1      	b.n	5be2 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    5bfe:	2300      	movs	r3, #0
    5c00:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    5c04:	2300      	movs	r3, #0
    5c06:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    5c0a:	7923      	ldrb	r3, [r4, #4]
    5c0c:	2b01      	cmp	r3, #1
    5c0e:	d02a      	beq.n	5c66 <uarte_nrfx_configure+0xa8>
    5c10:	2b02      	cmp	r3, #2
    5c12:	d024      	beq.n	5c5e <uarte_nrfx_configure+0xa0>
    5c14:	b133      	cbz	r3, 5c24 <uarte_nrfx_configure+0x66>
    5c16:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5c1a:	e7dc      	b.n	5bd6 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    5c1c:	2301      	movs	r3, #1
    5c1e:	f88d 3000 	strb.w	r3, [sp]
		break;
    5c22:	e7ef      	b.n	5c04 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    5c24:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5c28:	6821      	ldr	r1, [r4, #0]
    5c2a:	4628      	mov	r0, r5
    5c2c:	f7fc fbd6 	bl	23dc <baudrate_set>
    5c30:	4602      	mov	r2, r0
    5c32:	bb18      	cbnz	r0, 5c7c <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    5c34:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    5c36:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5c38:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    5c3c:	f89d 0002 	ldrb.w	r0, [sp, #2]
    5c40:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    5c42:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5c46:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    5c48:	f89d 0000 	ldrb.w	r0, [sp]
    5c4c:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5c4e:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    5c52:	3604      	adds	r6, #4
    5c54:	e894 0003 	ldmia.w	r4, {r0, r1}
    5c58:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    5c5c:	e7bb      	b.n	5bd6 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5c5e:	230e      	movs	r3, #14
    5c60:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    5c64:	e7e0      	b.n	5c28 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5c66:	230e      	movs	r3, #14
    5c68:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    5c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
    5c70:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    5c74:	e7d8      	b.n	5c28 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    5c76:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5c7a:	e7ac      	b.n	5bd6 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    5c7c:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5c80:	e7a9      	b.n	5bd6 <uarte_nrfx_configure+0x18>

00005c82 <uarte_nrfx_config_get>:
{
    5c82:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    5c84:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    5c86:	3304      	adds	r3, #4
    5c88:	e893 0003 	ldmia.w	r3, {r0, r1}
    5c8c:	e882 0003 	stmia.w	r2, {r0, r1}
}
    5c90:	2000      	movs	r0, #0
    5c92:	4770      	bx	lr

00005c94 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    5c94:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c96:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5c98:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5c9c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5ca0:	4770      	bx	lr

00005ca2 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    5ca2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5ca4:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5ca6:	685b      	ldr	r3, [r3, #4]
    5ca8:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5cac:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5cb0:	b929      	cbnz	r1, 5cbe <is_tx_ready+0x1c>
    5cb2:	b933      	cbnz	r3, 5cc2 <is_tx_ready+0x20>
    5cb4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    5cb8:	b92b      	cbnz	r3, 5cc6 <is_tx_ready+0x24>
    5cba:	2000      	movs	r0, #0
    5cbc:	4770      	bx	lr
    5cbe:	2001      	movs	r0, #1
    5cc0:	4770      	bx	lr
    5cc2:	2000      	movs	r0, #0
    5cc4:	4770      	bx	lr
    5cc6:	2001      	movs	r0, #1
}
    5cc8:	4770      	bx	lr

00005cca <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    5cca:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5ccc:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5cce:	2208      	movs	r2, #8
    5cd0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5cd4:	4770      	bx	lr

00005cd6 <tx_start>:
{
    5cd6:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5cd8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5cda:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5cdc:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5ce0:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ce4:	2200      	movs	r2, #0
    5ce6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    5cea:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    5cee:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    5cf2:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5cf6:	685b      	ldr	r3, [r3, #4]
    5cf8:	f013 0f10 	tst.w	r3, #16
    5cfc:	d102      	bne.n	5d04 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cfe:	2301      	movs	r3, #1
    5d00:	60a3      	str	r3, [r4, #8]
}
    5d02:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    5d04:	2101      	movs	r1, #1
    5d06:	f7ff ffe0 	bl	5cca <uarte_enable>
    p_reg->INTENSET = mask;
    5d0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5d0e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    5d12:	e7f4      	b.n	5cfe <tx_start+0x28>

00005d14 <uarte_nrfx_poll_in>:
{
    5d14:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    5d16:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    5d18:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5d1a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d1c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5d20:	b152      	cbz	r2, 5d38 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    5d22:	7c62      	ldrb	r2, [r4, #17]
    5d24:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d26:	2000      	movs	r0, #0
    5d28:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5d2c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d30:	2201      	movs	r2, #1
    5d32:	601a      	str	r2, [r3, #0]
}
    5d34:	bc10      	pop	{r4}
    5d36:	4770      	bx	lr
		return -1;
    5d38:	f04f 30ff 	mov.w	r0, #4294967295
    5d3c:	e7fa      	b.n	5d34 <uarte_nrfx_poll_in+0x20>

00005d3e <wait_tx_ready>:
{
    5d3e:	b570      	push	{r4, r5, r6, lr}
    5d40:	4606      	mov	r6, r0
    5d42:	e014      	b.n	5d6e <wait_tx_ready+0x30>
		if (res) {
    5d44:	b17d      	cbz	r5, 5d66 <wait_tx_ready+0x28>
	__asm__ volatile(
    5d46:	f04f 0320 	mov.w	r3, #32
    5d4a:	f3ef 8411 	mrs	r4, BASEPRI
    5d4e:	f383 8812 	msr	BASEPRI_MAX, r3
    5d52:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5d56:	4630      	mov	r0, r6
    5d58:	f7ff ffa3 	bl	5ca2 <is_tx_ready>
    5d5c:	b9a0      	cbnz	r0, 5d88 <wait_tx_ready+0x4a>
	__asm__ volatile(
    5d5e:	f384 8811 	msr	BASEPRI, r4
    5d62:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    5d66:	2021      	movs	r0, #33	; 0x21
    5d68:	2100      	movs	r1, #0
    5d6a:	f7fe fe85 	bl	4a78 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5d6e:	2464      	movs	r4, #100	; 0x64
    5d70:	4630      	mov	r0, r6
    5d72:	f7ff ff96 	bl	5ca2 <is_tx_ready>
    5d76:	4605      	mov	r5, r0
    5d78:	2800      	cmp	r0, #0
    5d7a:	d1e3      	bne.n	5d44 <wait_tx_ready+0x6>
    5d7c:	2001      	movs	r0, #1
    5d7e:	f000 f9a2 	bl	60c6 <nrfx_busy_wait>
    5d82:	3c01      	subs	r4, #1
    5d84:	d1f4      	bne.n	5d70 <wait_tx_ready+0x32>
    5d86:	e7dd      	b.n	5d44 <wait_tx_ready+0x6>
}
    5d88:	4620      	mov	r0, r4
    5d8a:	bd70      	pop	{r4, r5, r6, pc}

00005d8c <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5d90:	b083      	sub	sp, #12
    5d92:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    5d94:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    5d96:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    5d98:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5d9c:	2100      	movs	r1, #0
    5d9e:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5da2:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    5da6:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5daa:	aa01      	add	r2, sp, #4
    5dac:	4648      	mov	r0, r9
    5dae:	f000 f8d3 	bl	5f58 <pinctrl_lookup_state>
	if (ret < 0) {
    5db2:	1e04      	subs	r4, r0, #0
    5db4:	db07      	blt.n	5dc6 <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    5db6:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5db8:	f8d9 2000 	ldr.w	r2, [r9]
    5dbc:	7919      	ldrb	r1, [r3, #4]
    5dbe:	6818      	ldr	r0, [r3, #0]
    5dc0:	f7fc fe6c 	bl	2a9c <pinctrl_configure_pins>
    5dc4:	4604      	mov	r4, r0
	if (err < 0) {
    5dc6:	2c00      	cmp	r4, #0
    5dc8:	db35      	blt.n	5e36 <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    5dca:	f108 0104 	add.w	r1, r8, #4
    5dce:	4628      	mov	r0, r5
    5dd0:	f7ff fef5 	bl	5bbe <uarte_nrfx_configure>
	if (err) {
    5dd4:	4604      	mov	r4, r0
    5dd6:	bb70      	cbnz	r0, 5e36 <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5dd8:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5dda:	f013 0f02 	tst.w	r3, #2
    5dde:	d12e      	bne.n	5e3e <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5de0:	2308      	movs	r3, #8
    5de2:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    5de6:	7a3b      	ldrb	r3, [r7, #8]
    5de8:	b95b      	cbnz	r3, 5e02 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5dea:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    5dee:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    5df2:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5df6:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5dfa:	2301      	movs	r3, #1
    5dfc:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e00:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	f013 0f02 	tst.w	r3, #2
    5e08:	d103      	bne.n	5e12 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    5e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
    5e0e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5e12:	687b      	ldr	r3, [r7, #4]
    5e14:	f013 0f10 	tst.w	r3, #16
    5e18:	d003      	beq.n	5e22 <uarte_instance_init+0x96>
    5e1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5e1e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    5e22:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5e26:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5e2a:	2300      	movs	r3, #0
    5e2c:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e30:	2301      	movs	r3, #1
    5e32:	60b3      	str	r3, [r6, #8]
    5e34:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5e36:	4620      	mov	r0, r4
    5e38:	b003      	add	sp, #12
    5e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    5e3e:	4641      	mov	r1, r8
    5e40:	4630      	mov	r0, r6
    5e42:	f7fc fbab 	bl	259c <endtx_stoptx_ppi_init>
		if (err < 0) {
    5e46:	2800      	cmp	r0, #0
    5e48:	daca      	bge.n	5de0 <uarte_instance_init+0x54>
			return err;
    5e4a:	4604      	mov	r4, r0
    5e4c:	e7f3      	b.n	5e36 <uarte_instance_init+0xaa>

00005e4e <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5e4e:	b510      	push	{r4, lr}
    5e50:	4604      	mov	r4, r0
    5e52:	2200      	movs	r2, #0
    5e54:	2101      	movs	r1, #1
    5e56:	2008      	movs	r0, #8
    5e58:	f7fb fb48 	bl	14ec <z_arm_irq_priority_set>
    5e5c:	2008      	movs	r0, #8
    5e5e:	f7fb fb29 	bl	14b4 <arch_irq_enable>
    5e62:	2100      	movs	r1, #0
    5e64:	4620      	mov	r0, r4
    5e66:	f7ff ff91 	bl	5d8c <uarte_instance_init>
    5e6a:	bd10      	pop	{r4, pc}

00005e6c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5e6c:	4770      	bx	lr

00005e6e <counter_sub>:
	return (a - b) & COUNTER_MAX;
    5e6e:	1a40      	subs	r0, r0, r1
}
    5e70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5e74:	4770      	bx	lr

00005e76 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5e76:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5e7a:	009b      	lsls	r3, r3, #2
    5e7c:	b29b      	uxth	r3, r3
    5e7e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    5e82:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    5e86:	2200      	movs	r2, #0
    5e88:	601a      	str	r2, [r3, #0]
    5e8a:	681b      	ldr	r3, [r3, #0]
}
    5e8c:	4770      	bx	lr

00005e8e <absolute_time_to_cc>:
}
    5e8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5e92:	4770      	bx	lr

00005e94 <full_int_lock>:
	__asm__ volatile(
    5e94:	f04f 0320 	mov.w	r3, #32
    5e98:	f3ef 8011 	mrs	r0, BASEPRI
    5e9c:	f383 8812 	msr	BASEPRI_MAX, r3
    5ea0:	f3bf 8f6f 	isb	sy
}
    5ea4:	4770      	bx	lr

00005ea6 <full_int_unlock>:
	__asm__ volatile(
    5ea6:	f380 8811 	msr	BASEPRI, r0
    5eaa:	f3bf 8f6f 	isb	sy
}
    5eae:	4770      	bx	lr

00005eb0 <set_absolute_alarm>:
{
    5eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5eb2:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5eb4:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    5eb8:	f7fc fb9a 	bl	25f0 <get_comparator>
    5ebc:	4607      	mov	r7, r0
    5ebe:	e019      	b.n	5ef4 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    5ec0:	2013      	movs	r0, #19
    5ec2:	f000 fc06 	bl	66d2 <z_impl_k_busy_wait>
}
    5ec6:	e022      	b.n	5f0e <set_absolute_alarm+0x5e>
		event_clear(chan);
    5ec8:	4630      	mov	r0, r6
    5eca:	f7ff ffd4 	bl	5e76 <event_clear>
		event_enable(chan);
    5ece:	4630      	mov	r0, r6
    5ed0:	f7fc fb96 	bl	2600 <event_enable>
		set_comparator(chan, cc_val);
    5ed4:	4629      	mov	r1, r5
    5ed6:	4630      	mov	r0, r6
    5ed8:	f7fc fb80 	bl	25dc <set_comparator>
		now2 = counter();
    5edc:	f7fc fba4 	bl	2628 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5ee0:	4284      	cmp	r4, r0
    5ee2:	d01e      	beq.n	5f22 <set_absolute_alarm+0x72>
    5ee4:	1c81      	adds	r1, r0, #2
    5ee6:	4628      	mov	r0, r5
    5ee8:	f7ff ffc1 	bl	5e6e <counter_sub>
	} while ((now2 != now) &&
    5eec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5ef0:	d917      	bls.n	5f22 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    5ef2:	462f      	mov	r7, r5
		now = counter();
    5ef4:	f7fc fb98 	bl	2628 <counter>
    5ef8:	4604      	mov	r4, r0
		set_comparator(chan, now);
    5efa:	4601      	mov	r1, r0
    5efc:	4630      	mov	r0, r6
    5efe:	f7fc fb6d 	bl	25dc <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    5f02:	4621      	mov	r1, r4
    5f04:	4638      	mov	r0, r7
    5f06:	f7ff ffb2 	bl	5e6e <counter_sub>
    5f0a:	2801      	cmp	r0, #1
    5f0c:	d0d8      	beq.n	5ec0 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5f0e:	1ca7      	adds	r7, r4, #2
    5f10:	4639      	mov	r1, r7
    5f12:	4628      	mov	r0, r5
    5f14:	f7ff ffab 	bl	5e6e <counter_sub>
    5f18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5f1c:	d9d4      	bls.n	5ec8 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    5f1e:	463d      	mov	r5, r7
    5f20:	e7d2      	b.n	5ec8 <set_absolute_alarm+0x18>
}
    5f22:	4628      	mov	r0, r5
    5f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005f26 <compare_set>:
{
    5f26:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f28:	b083      	sub	sp, #12
    5f2a:	4604      	mov	r4, r0
    5f2c:	4617      	mov	r7, r2
    5f2e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    5f30:	f7fc fb80 	bl	2634 <compare_int_lock>
    5f34:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    5f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5f38:	9301      	str	r3, [sp, #4]
    5f3a:	9b08      	ldr	r3, [sp, #32]
    5f3c:	9300      	str	r3, [sp, #0]
    5f3e:	463a      	mov	r2, r7
    5f40:	462b      	mov	r3, r5
    5f42:	4620      	mov	r0, r4
    5f44:	f7fc fc56 	bl	27f4 <compare_set_nolocks>
    5f48:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    5f4a:	4631      	mov	r1, r6
    5f4c:	4620      	mov	r0, r4
    5f4e:	f7fc fbcb 	bl	26e8 <compare_int_unlock>
}
    5f52:	4628      	mov	r0, r5
    5f54:	b003      	add	sp, #12
    5f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005f58 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5f58:	b410      	push	{r4}
	*state = &config->states[0];
    5f5a:	6843      	ldr	r3, [r0, #4]
    5f5c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5f5e:	e001      	b.n	5f64 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    5f60:	3408      	adds	r4, #8
    5f62:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5f64:	6814      	ldr	r4, [r2, #0]
    5f66:	7a03      	ldrb	r3, [r0, #8]
    5f68:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    5f6c:	3b01      	subs	r3, #1
    5f6e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5f72:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    5f76:	429c      	cmp	r4, r3
    5f78:	d804      	bhi.n	5f84 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    5f7a:	7963      	ldrb	r3, [r4, #5]
    5f7c:	428b      	cmp	r3, r1
    5f7e:	d1ef      	bne.n	5f60 <pinctrl_lookup_state+0x8>
			return 0;
    5f80:	2000      	movs	r0, #0
    5f82:	e001      	b.n	5f88 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    5f84:	f06f 0001 	mvn.w	r0, #1
}
    5f88:	bc10      	pop	{r4}
    5f8a:	4770      	bx	lr

00005f8c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5f8c:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5f8e:	2000      	movs	r0, #0
    5f90:	f7fb fd02 	bl	1998 <sys_arch_reboot>

00005f94 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    5f94:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    5f96:	f7fe ff47 	bl	4e28 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    5f9a:	bd08      	pop	{r3, pc}

00005f9c <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    5f9c:	b510      	push	{r4, lr}
    5f9e:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5fa0:	f7fb f984 	bl	12ac <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    5fa4:	f7fb fa54 	bl	1450 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    5fa8:	4620      	mov	r0, r4
    5faa:	f7ff fff3 	bl	5f94 <hw_cc3xx_init_internal>
	return res;
}
    5fae:	bd10      	pop	{r4, pc}

00005fb0 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5fb0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5fb4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5fb8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5fbc:	2a07      	cmp	r2, #7
    5fbe:	d001      	beq.n	5fc4 <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5fc0:	2000      	movs	r0, #0
    5fc2:	4770      	bx	lr
                    switch(var2)
    5fc4:	3b02      	subs	r3, #2
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d804      	bhi.n	5fd4 <nrf53_errata_42+0x24>
    5fca:	e8df f003 	tbb	[pc, r3]
    5fce:	01          	.byte	0x01
    5fcf:	00          	.byte	0x00
    5fd0:	2001      	movs	r0, #1
    5fd2:	4770      	bx	lr
                            return false;
    5fd4:	2000      	movs	r0, #0
    #endif
}
    5fd6:	4770      	bx	lr

00005fd8 <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5fd8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5fdc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5fe0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5fe4:	2a07      	cmp	r2, #7
    5fe6:	d001      	beq.n	5fec <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5fe8:	2000      	movs	r0, #0
    5fea:	4770      	bx	lr
                    switch(var2)
    5fec:	2b04      	cmp	r3, #4
    5fee:	d007      	beq.n	6000 <nrf53_errata_46+0x28>
    5ff0:	d808      	bhi.n	6004 <nrf53_errata_46+0x2c>
    5ff2:	3b02      	subs	r3, #2
    5ff4:	2b01      	cmp	r3, #1
    5ff6:	d801      	bhi.n	5ffc <nrf53_errata_46+0x24>
    5ff8:	2001      	movs	r0, #1
    #endif
}
    5ffa:	4770      	bx	lr
                            return false;
    5ffc:	2000      	movs	r0, #0
    5ffe:	4770      	bx	lr
                            return false;
    6000:	2000      	movs	r0, #0
    6002:	4770      	bx	lr
                            return false;
    6004:	2000      	movs	r0, #0
    6006:	4770      	bx	lr

00006008 <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6008:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    600c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6010:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6014:	2a07      	cmp	r2, #7
    6016:	d001      	beq.n	601c <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6018:	2000      	movs	r0, #0
    601a:	4770      	bx	lr
                    switch(var2)
    601c:	3b02      	subs	r3, #2
    601e:	2b00      	cmp	r3, #0
    6020:	d804      	bhi.n	602c <nrf53_errata_49+0x24>
    6022:	e8df f003 	tbb	[pc, r3]
    6026:	01          	.byte	0x01
    6027:	00          	.byte	0x00
    6028:	2001      	movs	r0, #1
    602a:	4770      	bx	lr
                            return false;
    602c:	2000      	movs	r0, #0
    #endif
}
    602e:	4770      	bx	lr

00006030 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6030:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6034:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6038:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    603c:	2a07      	cmp	r2, #7
    603e:	d001      	beq.n	6044 <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    6040:	2000      	movs	r0, #0
    6042:	4770      	bx	lr
                            return true;
    6044:	2001      	movs	r0, #1
    #endif
}
    6046:	4770      	bx	lr

00006048 <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6048:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    604c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6050:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6054:	2a07      	cmp	r2, #7
    6056:	d001      	beq.n	605c <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6058:	2000      	movs	r0, #0
    605a:	4770      	bx	lr
                    switch(var2)
    605c:	3b02      	subs	r3, #2
    605e:	2b00      	cmp	r3, #0
    6060:	d804      	bhi.n	606c <nrf53_errata_64+0x24>
    6062:	e8df f003 	tbb	[pc, r3]
    6066:	01          	.byte	0x01
    6067:	00          	.byte	0x00
    6068:	2001      	movs	r0, #1
    606a:	4770      	bx	lr
                            return false;
    606c:	2000      	movs	r0, #0
    #endif
}
    606e:	4770      	bx	lr

00006070 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6070:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6074:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6078:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    607c:	2a07      	cmp	r2, #7
    607e:	d001      	beq.n	6084 <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6080:	2000      	movs	r0, #0
    6082:	4770      	bx	lr
                    switch(var2)
    6084:	3b02      	subs	r3, #2
    6086:	2b00      	cmp	r3, #0
    6088:	d804      	bhi.n	6094 <nrf53_errata_69+0x24>
    608a:	e8df f003 	tbb	[pc, r3]
    608e:	01          	.byte	0x01
    608f:	00          	.byte	0x00
    6090:	2001      	movs	r0, #1
    6092:	4770      	bx	lr
                            return false;
    6094:	2000      	movs	r0, #0
    #endif
}
    6096:	4770      	bx	lr

00006098 <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6098:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    609c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    60a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    60a4:	2a07      	cmp	r2, #7
    60a6:	d001      	beq.n	60ac <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    60a8:	2000      	movs	r0, #0
    60aa:	4770      	bx	lr
                    switch(var2)
    60ac:	3b02      	subs	r3, #2
    60ae:	2b00      	cmp	r3, #0
    60b0:	d804      	bhi.n	60bc <nrf53_errata_97+0x24>
    60b2:	e8df f003 	tbb	[pc, r3]
    60b6:	01          	.byte	0x01
    60b7:	00          	.byte	0x00
    60b8:	2001      	movs	r0, #1
    60ba:	4770      	bx	lr
                            return false;
    60bc:	2000      	movs	r0, #0
    #endif
}
    60be:	4770      	bx	lr

000060c0 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    60c0:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    60c2:	4780      	blx	r0
}
    60c4:	bd08      	pop	{r3, pc}

000060c6 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    60c6:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    60c8:	f000 fb03 	bl	66d2 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    60cc:	bd08      	pop	{r3, pc}

000060ce <clock_initial_lfclksrc_get>:
}
    60ce:	2001      	movs	r0, #1
    60d0:	4770      	bx	lr

000060d2 <clock_lfclksrc_tweak>:
{
    60d2:	b538      	push	{r3, r4, r5, lr}
    60d4:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    60d6:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    60d8:	2b02      	cmp	r3, #2
    60da:	d006      	beq.n	60ea <clock_lfclksrc_tweak+0x18>
    60dc:	2b01      	cmp	r3, #1
    60de:	d000      	beq.n	60e2 <clock_lfclksrc_tweak+0x10>
    60e0:	2300      	movs	r3, #0
    if (!is_correct_clk)
    60e2:	461d      	mov	r5, r3
    60e4:	b11b      	cbz	r3, 60ee <clock_lfclksrc_tweak+0x1c>
}
    60e6:	4628      	mov	r0, r5
    60e8:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    60ea:	2301      	movs	r3, #1
    60ec:	e7f9      	b.n	60e2 <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    60ee:	2000      	movs	r0, #0
    60f0:	f7fc ff8c 	bl	300c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    60f4:	f7ff ffeb 	bl	60ce <clock_initial_lfclksrc_get>
    60f8:	7020      	strb	r0, [r4, #0]
    60fa:	e7f4      	b.n	60e6 <clock_lfclksrc_tweak+0x14>

000060fc <nrfx_clock_enable>:
{
    60fc:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    60fe:	2005      	movs	r0, #5
    6100:	f7fb f9e6 	bl	14d0 <arch_irq_is_enabled>
    6104:	b158      	cbz	r0, 611e <nrfx_clock_enable+0x22>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    6106:	f7ff ffe2 	bl	60ce <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    610a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    610e:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    6112:	2201      	movs	r2, #1
    6114:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    6118:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    611c:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    611e:	2005      	movs	r0, #5
    6120:	f7fb f9c8 	bl	14b4 <arch_irq_enable>
    6124:	e7ef      	b.n	6106 <nrfx_clock_enable+0xa>

00006126 <nrfx_clock_start>:
    switch (domain)
    6126:	2803      	cmp	r0, #3
    6128:	d871      	bhi.n	620e <nrfx_clock_start+0xe8>
    612a:	e8df f000 	tbb	[pc, r0]
    612e:	4802      	.short	0x4802
    6130:	6254      	.short	0x6254
{
    6132:	b500      	push	{lr}
    6134:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6136:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    613a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    613e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6142:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6146:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    614a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    614e:	d11d      	bne.n	618c <nrfx_clock_start+0x66>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6150:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6154:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6158:	f013 0f01 	tst.w	r3, #1
    615c:	d11b      	bne.n	6196 <nrfx_clock_start+0x70>
                    lfclksrc = clock_initial_lfclksrc_get();
    615e:	f7ff ffb6 	bl	60ce <clock_initial_lfclksrc_get>
    6162:	f88d 0007 	strb.w	r0, [sp, #7]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
    6166:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
    616a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    616e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6172:	2200      	movs	r2, #0
    6174:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6178:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    617c:	2202      	movs	r2, #2
    617e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6182:	2201      	movs	r2, #1
    6184:	609a      	str	r2, [r3, #8]
}
    6186:	b003      	add	sp, #12
    6188:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    618c:	f10d 0007 	add.w	r0, sp, #7
    6190:	f7ff ff9f 	bl	60d2 <clock_lfclksrc_tweak>
    6194:	e7e7      	b.n	6166 <nrfx_clock_start+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6196:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    619a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    619e:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    61a2:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    61a6:	f10d 0007 	add.w	r0, sp, #7
    61aa:	f7ff ff92 	bl	60d2 <clock_lfclksrc_tweak>
    61ae:	2800      	cmp	r0, #0
    61b0:	d0d9      	beq.n	6166 <nrfx_clock_start+0x40>
    p_reg->INTENSET = mask;
    61b2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61b6:	2202      	movs	r2, #2
    61b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    61bc:	e7e3      	b.n	6186 <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61be:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61c2:	2200      	movs	r2, #0
    61c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    61c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    61cc:	2201      	movs	r2, #1
    61ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    61d2:	601a      	str	r2, [r3, #0]
}
    61d4:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61d6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61da:	2200      	movs	r2, #0
    61dc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    61e0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    61e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    61e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    61ec:	2201      	movs	r2, #1
    61ee:	621a      	str	r2, [r3, #32]
}
    61f0:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61f2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61f6:	2200      	movs	r2, #0
    61f8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    61fc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    6200:	f44f 7280 	mov.w	r2, #256	; 0x100
    6204:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6208:	2201      	movs	r2, #1
    620a:	619a      	str	r2, [r3, #24]
}
    620c:	4770      	bx	lr
    620e:	4770      	bx	lr

00006210 <nrfx_clock_stop>:
{
    6210:	b508      	push	{r3, lr}
    clock_stop(domain);
    6212:	f7fc fefb 	bl	300c <clock_stop>
}
    6216:	bd08      	pop	{r3, pc}

00006218 <pin_is_task_output>:
{
    6218:	b510      	push	{r4, lr}
    621a:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    621c:	f7fd f83a 	bl	3294 <pin_is_output>
    6220:	b128      	cbz	r0, 622e <pin_is_task_output+0x16>
    6222:	4620      	mov	r0, r4
    6224:	f7fd f820 	bl	3268 <pin_in_use_by_te>
    6228:	b118      	cbz	r0, 6232 <pin_is_task_output+0x1a>
    622a:	2001      	movs	r0, #1
    622c:	e000      	b.n	6230 <pin_is_task_output+0x18>
    622e:	2000      	movs	r0, #0
}
    6230:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6232:	2000      	movs	r0, #0
    6234:	e7fc      	b.n	6230 <pin_is_task_output+0x18>

00006236 <pin_is_input>:
{
    6236:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    6238:	f7fd f82c 	bl	3294 <pin_is_output>
    623c:	f080 0001 	eor.w	r0, r0, #1
}
    6240:	b2c0      	uxtb	r0, r0
    6242:	bd08      	pop	{r3, pc}

00006244 <gpiote_polarity_to_trigger>:
}
    6244:	4770      	bx	lr

00006246 <gpiote_trigger_to_polarity>:
}
    6246:	4770      	bx	lr

00006248 <is_level>:
}
    6248:	2803      	cmp	r0, #3
    624a:	bf94      	ite	ls
    624c:	2000      	movls	r0, #0
    624e:	2001      	movhi	r0, #1
    6250:	4770      	bx	lr

00006252 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6252:	b148      	cbz	r0, 6268 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6254:	68c3      	ldr	r3, [r0, #12]
    6256:	8818      	ldrh	r0, [r3, #0]
    6258:	f3c0 0008 	ubfx	r0, r0, #0, #9
    625c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    6260:	bf14      	ite	ne
    6262:	2000      	movne	r0, #0
    6264:	2001      	moveq	r0, #1
    6266:	4770      	bx	lr
		return false;
    6268:	2000      	movs	r0, #0
}
    626a:	4770      	bx	lr

0000626c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    626e:	4605      	mov	r5, r0
    6270:	460e      	mov	r6, r1
	__asm__ volatile(
    6272:	f04f 0320 	mov.w	r3, #32
    6276:	f3ef 8711 	mrs	r7, BASEPRI
    627a:	f383 8812 	msr	BASEPRI_MAX, r3
    627e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6282:	f7fe fc25 	bl	4ad0 <z_impl_z_current_get>
    6286:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    6288:	4631      	mov	r1, r6
    628a:	4628      	mov	r0, r5
    628c:	f7ff fe7e 	bl	5f8c <k_sys_fatal_error_handler>
	__asm__ volatile(
    6290:	f387 8811 	msr	BASEPRI, r7
    6294:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6298:	4620      	mov	r0, r4
    629a:	f7fb fbcd 	bl	1a38 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    629e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000062a0 <z_early_memset>:
{
    62a0:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    62a2:	f7ff fa5c 	bl	575e <memset>
}
    62a6:	bd08      	pop	{r3, pc}

000062a8 <z_early_memcpy>:
{
    62a8:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    62aa:	f7ff fa29 	bl	5700 <memcpy>
}
    62ae:	bd08      	pop	{r3, pc}

000062b0 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    62b0:	68c2      	ldr	r2, [r0, #12]
    62b2:	6903      	ldr	r3, [r0, #16]
    62b4:	431a      	orrs	r2, r3
    62b6:	f012 0203 	ands.w	r2, r2, #3
    62ba:	d10d      	bne.n	62d8 <create_free_list+0x28>
	slab->free_list = NULL;
    62bc:	2100      	movs	r1, #0
    62be:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    62c0:	e005      	b.n	62ce <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    62c2:	6941      	ldr	r1, [r0, #20]
    62c4:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    62c6:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    62c8:	68c1      	ldr	r1, [r0, #12]
    62ca:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    62cc:	3201      	adds	r2, #1
    62ce:	6881      	ldr	r1, [r0, #8]
    62d0:	4291      	cmp	r1, r2
    62d2:	d8f6      	bhi.n	62c2 <create_free_list+0x12>
	return 0;
    62d4:	2000      	movs	r0, #0
    62d6:	4770      	bx	lr
		return -EINVAL;
    62d8:	f06f 0015 	mvn.w	r0, #21
}
    62dc:	4770      	bx	lr

000062de <k_mem_slab_init>:
{
    62de:	b510      	push	{r4, lr}
    62e0:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    62e2:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    62e4:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    62e6:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    62e8:	2300      	movs	r3, #0
    62ea:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    62ec:	f7ff ffe0 	bl	62b0 <create_free_list>
	if (rc < 0) {
    62f0:	2800      	cmp	r0, #0
    62f2:	db01      	blt.n	62f8 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    62f4:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    62f6:	6064      	str	r4, [r4, #4]
}
    62f8:	bd10      	pop	{r4, pc}

000062fa <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    62fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62fc:	4604      	mov	r4, r0
    62fe:	460d      	mov	r5, r1
	__asm__ volatile(
    6300:	f04f 0320 	mov.w	r3, #32
    6304:	f3ef 8611 	mrs	r6, BASEPRI
    6308:	f383 8812 	msr	BASEPRI_MAX, r3
    630c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6310:	6943      	ldr	r3, [r0, #20]
    6312:	b163      	cbz	r3, 632e <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    6314:	682b      	ldr	r3, [r5, #0]
    6316:	6962      	ldr	r2, [r4, #20]
    6318:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    631a:	682b      	ldr	r3, [r5, #0]
    631c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    631e:	69a3      	ldr	r3, [r4, #24]
    6320:	3b01      	subs	r3, #1
    6322:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6324:	f386 8811 	msr	BASEPRI, r6
    6328:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    632c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    632e:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6332:	f000 f924 	bl	657e <z_unpend_first_thread>
		if (pending_thread != NULL) {
    6336:	2800      	cmp	r0, #0
    6338:	d0ec      	beq.n	6314 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    633a:	682a      	ldr	r2, [r5, #0]
    633c:	2100      	movs	r1, #0
    633e:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6342:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    6344:	f000 f87b 	bl	643e <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6348:	4631      	mov	r1, r6
    634a:	4638      	mov	r0, r7
    634c:	f7fe f844 	bl	43d8 <z_reschedule>
			return;
    6350:	e7ec      	b.n	632c <k_mem_slab_free+0x32>

00006352 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6352:	3207      	adds	r2, #7
    6354:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    6358:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    635c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    6360:	2300      	movs	r3, #0
    6362:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    6366:	1888      	adds	r0, r1, r2
    6368:	4770      	bx	lr

0000636a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    636a:	f3ef 8005 	mrs	r0, IPSR
}
    636e:	3800      	subs	r0, #0
    6370:	bf18      	it	ne
    6372:	2001      	movne	r0, #1
    6374:	4770      	bx	lr

00006376 <z_impl_k_thread_start>:
{
    6376:	b508      	push	{r3, lr}
	z_sched_start(thread);
    6378:	f7fe f97c 	bl	4674 <z_sched_start>
}
    637c:	bd08      	pop	{r3, pc}

0000637e <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    637e:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    6380:	2400      	movs	r4, #0
    6382:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    6384:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    6386:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    6388:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    638a:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    638c:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    638e:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    6390:	bc10      	pop	{r4}
    6392:	4770      	bx	lr

00006394 <z_pm_save_idle_exit>:
{
    6394:	b508      	push	{r3, lr}
	pm_system_resume();
    6396:	f7fa fe1b 	bl	fd0 <pm_system_resume>
	sys_clock_idle_exit();
    639a:	f7ff fd67 	bl	5e6c <sys_clock_idle_exit>
}
    639e:	bd08      	pop	{r3, pc}

000063a0 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    63a0:	4288      	cmp	r0, r1
    63a2:	da00      	bge.n	63a6 <new_prio_for_inheritance+0x6>
    63a4:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    63a6:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    63aa:	db01      	blt.n	63b0 <new_prio_for_inheritance+0x10>
    63ac:	4608      	mov	r0, r1
    63ae:	4770      	bx	lr
    63b0:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    63b4:	4770      	bx	lr

000063b6 <adjust_owner_prio>:
{
    63b6:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    63b8:	6880      	ldr	r0, [r0, #8]
    63ba:	f990 300e 	ldrsb.w	r3, [r0, #14]
    63be:	428b      	cmp	r3, r1
    63c0:	d101      	bne.n	63c6 <adjust_owner_prio+0x10>
	return false;
    63c2:	2000      	movs	r0, #0
}
    63c4:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    63c6:	f7fe f9a3 	bl	4710 <z_set_prio>
    63ca:	e7fb      	b.n	63c4 <adjust_owner_prio+0xe>

000063cc <z_impl_k_mutex_init>:
{
    63cc:	4603      	mov	r3, r0
	mutex->owner = NULL;
    63ce:	2000      	movs	r0, #0
    63d0:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    63d2:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    63d4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    63d6:	605b      	str	r3, [r3, #4]
}
    63d8:	4770      	bx	lr

000063da <thread_active_elsewhere>:
}
    63da:	2000      	movs	r0, #0
    63dc:	4770      	bx	lr

000063de <pended_on_thread>:
}
    63de:	6880      	ldr	r0, [r0, #8]
    63e0:	4770      	bx	lr

000063e2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    63e2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    63e6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    63ea:	4283      	cmp	r3, r0
    63ec:	d001      	beq.n	63f2 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    63ee:	1ac0      	subs	r0, r0, r3
    63f0:	4770      	bx	lr
	return 0;
    63f2:	2000      	movs	r0, #0
}
    63f4:	4770      	bx	lr

000063f6 <z_reschedule_irqlock>:
{
    63f6:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    63f8:	4603      	mov	r3, r0
    63fa:	b920      	cbnz	r0, 6406 <z_reschedule_irqlock+0x10>
    63fc:	f3ef 8205 	mrs	r2, IPSR
    6400:	b942      	cbnz	r2, 6414 <z_reschedule_irqlock+0x1e>
    6402:	2201      	movs	r2, #1
    6404:	e000      	b.n	6408 <z_reschedule_irqlock+0x12>
    6406:	2200      	movs	r2, #0
	if (resched(key)) {
    6408:	b932      	cbnz	r2, 6418 <z_reschedule_irqlock+0x22>
    640a:	f383 8811 	msr	BASEPRI, r3
    640e:	f3bf 8f6f 	isb	sy
}
    6412:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6414:	2200      	movs	r2, #0
    6416:	e7f7      	b.n	6408 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    6418:	4618      	mov	r0, r3
    641a:	f7fb f89d 	bl	1558 <arch_swap>
	return ret;
    641e:	e7f8      	b.n	6412 <z_reschedule_irqlock+0x1c>

00006420 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6420:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    6422:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    6424:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6426:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6428:	2300      	movs	r3, #0
    642a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    642c:	604b      	str	r3, [r1, #4]
}
    642e:	4770      	bx	lr

00006430 <z_priq_dumb_best>:
{
    6430:	4603      	mov	r3, r0
	return list->head == list;
    6432:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6434:	4283      	cmp	r3, r0
    6436:	d000      	beq.n	643a <z_priq_dumb_best+0xa>
}
    6438:	4770      	bx	lr
	struct k_thread *thread = NULL;
    643a:	2000      	movs	r0, #0
	return thread;
    643c:	e7fc      	b.n	6438 <z_priq_dumb_best+0x8>

0000643e <z_ready_thread>:
{
    643e:	b538      	push	{r3, r4, r5, lr}
    6440:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    6442:	2300      	movs	r3, #0
	__asm__ volatile(
    6444:	f04f 0220 	mov.w	r2, #32
    6448:	f3ef 8511 	mrs	r5, BASEPRI
    644c:	f382 8812 	msr	BASEPRI_MAX, r2
    6450:	f3bf 8f6f 	isb	sy
    6454:	e004      	b.n	6460 <z_ready_thread+0x22>
	__asm__ volatile(
    6456:	f385 8811 	msr	BASEPRI, r5
    645a:	f3bf 8f6f 	isb	sy
    645e:	2301      	movs	r3, #1
    6460:	b943      	cbnz	r3, 6474 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    6462:	4620      	mov	r0, r4
    6464:	f7ff ffb9 	bl	63da <thread_active_elsewhere>
    6468:	2800      	cmp	r0, #0
    646a:	d1f4      	bne.n	6456 <z_ready_thread+0x18>
			ready_thread(thread);
    646c:	4620      	mov	r0, r4
    646e:	f7fe f8c1 	bl	45f4 <ready_thread>
    6472:	e7f0      	b.n	6456 <z_ready_thread+0x18>
}
    6474:	bd38      	pop	{r3, r4, r5, pc}

00006476 <z_thread_timeout>:
{
    6476:	b570      	push	{r4, r5, r6, lr}
    6478:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    647a:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    647e:	2300      	movs	r3, #0
	__asm__ volatile(
    6480:	f04f 0220 	mov.w	r2, #32
    6484:	f3ef 8611 	mrs	r6, BASEPRI
    6488:	f382 8812 	msr	BASEPRI_MAX, r2
    648c:	f3bf 8f6f 	isb	sy
    6490:	e011      	b.n	64b6 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6492:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6496:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    649a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    649e:	f023 0310 	bic.w	r3, r3, #16
    64a2:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    64a6:	4628      	mov	r0, r5
    64a8:	f7fe f8a4 	bl	45f4 <ready_thread>
	__asm__ volatile(
    64ac:	f386 8811 	msr	BASEPRI, r6
    64b0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    64b4:	2301      	movs	r3, #1
    64b6:	b9ab      	cbnz	r3, 64e4 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    64b8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    64bc:	f013 0f28 	tst.w	r3, #40	; 0x28
    64c0:	d1f4      	bne.n	64ac <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    64c2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    64c6:	2b00      	cmp	r3, #0
    64c8:	d0e3      	beq.n	6492 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    64ca:	4628      	mov	r0, r5
    64cc:	f7ff ff87 	bl	63de <pended_on_thread>
    64d0:	4629      	mov	r1, r5
    64d2:	f7ff ffa5 	bl	6420 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    64d6:	7b6b      	ldrb	r3, [r5, #13]
    64d8:	f023 0302 	bic.w	r3, r3, #2
    64dc:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    64de:	2300      	movs	r3, #0
    64e0:	60ab      	str	r3, [r5, #8]
}
    64e2:	e7d6      	b.n	6492 <z_thread_timeout+0x1c>
}
    64e4:	bd70      	pop	{r4, r5, r6, pc}

000064e6 <add_to_waitq_locked>:
{
    64e6:	b570      	push	{r4, r5, r6, lr}
    64e8:	4605      	mov	r5, r0
    64ea:	460e      	mov	r6, r1
	unready_thread(thread);
    64ec:	f7fe f8e0 	bl	46b0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    64f0:	7b6b      	ldrb	r3, [r5, #13]
    64f2:	f043 0302 	orr.w	r3, r3, #2
    64f6:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    64f8:	b1b6      	cbz	r6, 6528 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    64fa:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    64fc:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    64fe:	42a6      	cmp	r6, r4
    6500:	d019      	beq.n	6536 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6502:	b164      	cbz	r4, 651e <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6504:	4621      	mov	r1, r4
    6506:	4628      	mov	r0, r5
    6508:	f7ff ff6b 	bl	63e2 <z_sched_prio_cmp>
    650c:	2800      	cmp	r0, #0
    650e:	dc0c      	bgt.n	652a <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6510:	b12c      	cbz	r4, 651e <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    6512:	6873      	ldr	r3, [r6, #4]
    6514:	429c      	cmp	r4, r3
    6516:	d002      	beq.n	651e <add_to_waitq_locked+0x38>
    6518:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    651a:	2c00      	cmp	r4, #0
    651c:	d1f1      	bne.n	6502 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    651e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    6520:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    6522:	606b      	str	r3, [r5, #4]
	tail->next = node;
    6524:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6526:	6075      	str	r5, [r6, #4]
}
    6528:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    652a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    652c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    652e:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6530:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6532:	6065      	str	r5, [r4, #4]
}
    6534:	e7f8      	b.n	6528 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6536:	2400      	movs	r4, #0
    6538:	e7e3      	b.n	6502 <add_to_waitq_locked+0x1c>

0000653a <pend>:
{
    653a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    653e:	4605      	mov	r5, r0
    6540:	460e      	mov	r6, r1
    6542:	4691      	mov	r9, r2
    6544:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    6546:	2400      	movs	r4, #0
	__asm__ volatile(
    6548:	f04f 0320 	mov.w	r3, #32
    654c:	f3ef 8711 	mrs	r7, BASEPRI
    6550:	f383 8812 	msr	BASEPRI_MAX, r3
    6554:	f3bf 8f6f 	isb	sy
    6558:	e008      	b.n	656c <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
    655a:	4631      	mov	r1, r6
    655c:	4628      	mov	r0, r5
    655e:	f7ff ffc2 	bl	64e6 <add_to_waitq_locked>
	__asm__ volatile(
    6562:	f387 8811 	msr	BASEPRI, r7
    6566:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    656a:	2401      	movs	r4, #1
    656c:	2c00      	cmp	r4, #0
    656e:	d0f4      	beq.n	655a <pend+0x20>
	add_thread_timeout(thread, timeout);
    6570:	464a      	mov	r2, r9
    6572:	4643      	mov	r3, r8
    6574:	4628      	mov	r0, r5
    6576:	f7fd fed1 	bl	431c <add_thread_timeout>
}
    657a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000657e <z_unpend_first_thread>:
{
    657e:	b570      	push	{r4, r5, r6, lr}
    6580:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    6582:	2300      	movs	r3, #0
	__asm__ volatile(
    6584:	f04f 0220 	mov.w	r2, #32
    6588:	f3ef 8611 	mrs	r6, BASEPRI
    658c:	f382 8812 	msr	BASEPRI_MAX, r2
    6590:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    6594:	461c      	mov	r4, r3
    6596:	e004      	b.n	65a2 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    6598:	f386 8811 	msr	BASEPRI, r6
    659c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    65a0:	2301      	movs	r3, #1
    65a2:	b9ab      	cbnz	r3, 65d0 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    65a4:	4628      	mov	r0, r5
    65a6:	f7ff ff43 	bl	6430 <z_priq_dumb_best>
		if (thread != NULL) {
    65aa:	4604      	mov	r4, r0
    65ac:	2800      	cmp	r0, #0
    65ae:	d0f3      	beq.n	6598 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    65b0:	f7ff ff15 	bl	63de <pended_on_thread>
    65b4:	4621      	mov	r1, r4
    65b6:	f7ff ff33 	bl	6420 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    65ba:	7b63      	ldrb	r3, [r4, #13]
    65bc:	f023 0302 	bic.w	r3, r3, #2
    65c0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    65c2:	2300      	movs	r3, #0
    65c4:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    65c6:	f104 0018 	add.w	r0, r4, #24
    65ca:	f000 f81e 	bl	660a <z_abort_timeout>
    65ce:	e7e3      	b.n	6598 <z_unpend_first_thread+0x1a>
}
    65d0:	4620      	mov	r0, r4
    65d2:	bd70      	pop	{r4, r5, r6, pc}

000065d4 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    65d4:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    65d6:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    65d8:	6083      	str	r3, [r0, #8]
}
    65da:	4770      	bx	lr

000065dc <remove_timeout>:
{
    65dc:	b510      	push	{r4, lr}
    65de:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    65e0:	f7fe fac8 	bl	4b74 <next>
    65e4:	b148      	cbz	r0, 65fa <remove_timeout+0x1e>
    65e6:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    65e8:	6920      	ldr	r0, [r4, #16]
    65ea:	6961      	ldr	r1, [r4, #20]
    65ec:	6913      	ldr	r3, [r2, #16]
    65ee:	181b      	adds	r3, r3, r0
    65f0:	6950      	ldr	r0, [r2, #20]
    65f2:	eb41 0100 	adc.w	r1, r1, r0
    65f6:	6113      	str	r3, [r2, #16]
    65f8:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    65fa:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    65fc:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    65fe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6600:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6602:	2300      	movs	r3, #0
    6604:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    6606:	6063      	str	r3, [r4, #4]
}
    6608:	bd10      	pop	{r4, pc}

0000660a <z_abort_timeout>:
{
    660a:	b570      	push	{r4, r5, r6, lr}
    660c:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    660e:	2300      	movs	r3, #0
	__asm__ volatile(
    6610:	f04f 0220 	mov.w	r2, #32
    6614:	f3ef 8611 	mrs	r6, BASEPRI
    6618:	f382 8812 	msr	BASEPRI_MAX, r2
    661c:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    6620:	f06f 0015 	mvn.w	r0, #21
    6624:	e004      	b.n	6630 <z_abort_timeout+0x26>
	__asm__ volatile(
    6626:	f386 8811 	msr	BASEPRI, r6
    662a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    662e:	2301      	movs	r3, #1
    6630:	461d      	mov	r5, r3
    6632:	b93b      	cbnz	r3, 6644 <z_abort_timeout+0x3a>
	return node->next != NULL;
    6634:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    6636:	2b00      	cmp	r3, #0
    6638:	d0f5      	beq.n	6626 <z_abort_timeout+0x1c>
			remove_timeout(to);
    663a:	4620      	mov	r0, r4
    663c:	f7ff ffce 	bl	65dc <remove_timeout>
			ret = 0;
    6640:	4628      	mov	r0, r5
    6642:	e7f0      	b.n	6626 <z_abort_timeout+0x1c>
}
    6644:	bd70      	pop	{r4, r5, r6, pc}

00006646 <z_get_next_timeout_expiry>:
{
    6646:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    6648:	2300      	movs	r3, #0
	__asm__ volatile(
    664a:	f04f 0220 	mov.w	r2, #32
    664e:	f3ef 8411 	mrs	r4, BASEPRI
    6652:	f382 8812 	msr	BASEPRI_MAX, r2
    6656:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    665a:	f04f 30ff 	mov.w	r0, #4294967295
    665e:	e006      	b.n	666e <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    6660:	f7fe faa0 	bl	4ba4 <next_timeout>
	__asm__ volatile(
    6664:	f384 8811 	msr	BASEPRI, r4
    6668:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    666c:	2301      	movs	r3, #1
    666e:	2b00      	cmp	r3, #0
    6670:	d0f6      	beq.n	6660 <z_get_next_timeout_expiry+0x1a>
}
    6672:	bd10      	pop	{r4, pc}

00006674 <z_set_timeout_expiry>:
{
    6674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6676:	4605      	mov	r5, r0
    6678:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    667a:	2300      	movs	r3, #0
	__asm__ volatile(
    667c:	f04f 0220 	mov.w	r2, #32
    6680:	f3ef 8611 	mrs	r6, BASEPRI
    6684:	f382 8812 	msr	BASEPRI_MAX, r2
    6688:	f3bf 8f6f 	isb	sy
    668c:	e00a      	b.n	66a4 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    668e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    6690:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6694:	2801      	cmp	r0, #1
    6696:	dd00      	ble.n	669a <z_set_timeout_expiry+0x26>
    6698:	b97c      	cbnz	r4, 66ba <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    669a:	f386 8811 	msr	BASEPRI, r6
    669e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    66a2:	2301      	movs	r3, #1
    66a4:	461c      	mov	r4, r3
    66a6:	b97b      	cbnz	r3, 66c8 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    66a8:	f7fe fa7c 	bl	4ba4 <next_timeout>
			      || (ticks <= next_to);
    66ac:	f1b0 3fff 	cmp.w	r0, #4294967295
    66b0:	d0ed      	beq.n	668e <z_set_timeout_expiry+0x1a>
    66b2:	42a8      	cmp	r0, r5
    66b4:	dbec      	blt.n	6690 <z_set_timeout_expiry+0x1c>
    66b6:	2401      	movs	r4, #1
    66b8:	e7ea      	b.n	6690 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    66ba:	4639      	mov	r1, r7
    66bc:	42a8      	cmp	r0, r5
    66be:	bfa8      	it	ge
    66c0:	4628      	movge	r0, r5
    66c2:	f7fc f989 	bl	29d8 <sys_clock_set_timeout>
    66c6:	e7e8      	b.n	669a <z_set_timeout_expiry+0x26>
}
    66c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000066ca <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    66ca:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    66cc:	f7fe fb7e 	bl	4dcc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    66d0:	bd08      	pop	{r3, pc}

000066d2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    66d2:	b900      	cbnz	r0, 66d6 <z_impl_k_busy_wait+0x4>
    66d4:	4770      	bx	lr
{
    66d6:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    66d8:	f7fa fc54 	bl	f84 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    66dc:	bd08      	pop	{r3, pc}

000066de <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    66de:	4770      	bx	lr

000066e0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    66e0:	f7fc bbc2 	b.w	2e68 <SystemInit>
